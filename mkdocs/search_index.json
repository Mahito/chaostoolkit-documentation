{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Chaos Toolkit Project\n\u00b6\n\n\nThe Chaos Toolkit is a free, open source project that enables you to create and\napply Chaos Experiments to various types of infrastructure, platforms and\napplications.\n\n\nRunning experiments is as simple as:\n\n\n$ chaos run an-experiment.json\n\n\n\n\nThis takes the description of your experiment, runs it and ourput a reports\nto share with your team.\n\n\nMission\n\u00b6\n\n\nThe Chaos Toolkit aims at simplifying your journey through the\n\nPrinciples of Chaos Engineering\n and more generally considers that\nyou should embrace continuously observe and poke your system to empower your\nteam in face of adversity.\n\n\nCome join the Chaos Toolkit community\n\u00b6\n\n\nThe Chaos Toolkit is an \nopen source project\n and strives on a diverse and\ncooperative community. We welcome input and discussions on the project itself\nbut also on the \nPrinciples of Chaos Engineering\n in general.\n\n\nPlease \njoin us\n!",
            "title": "Introduction"
        },
        {
            "location": "/#welcome-to-the-chaos-toolkit-project",
            "text": "The Chaos Toolkit is a free, open source project that enables you to create and\napply Chaos Experiments to various types of infrastructure, platforms and\napplications.  Running experiments is as simple as:  $ chaos run an-experiment.json  This takes the description of your experiment, runs it and ourput a reports\nto share with your team.",
            "title": "Welcome to the Chaos Toolkit Project"
        },
        {
            "location": "/#mission",
            "text": "The Chaos Toolkit aims at simplifying your journey through the Principles of Chaos Engineering  and more generally considers that\nyou should embrace continuously observe and poke your system to empower your\nteam in face of adversity.",
            "title": "Mission"
        },
        {
            "location": "/#come-join-the-chaos-toolkit-community",
            "text": "The Chaos Toolkit is an  open source project  and strives on a diverse and\ncooperative community. We welcome input and discussions on the project itself\nbut also on the  Principles of Chaos Engineering  in general.  Please  join us !",
            "title": "Come join the Chaos Toolkit community"
        },
        {
            "location": "/overview/concepts/",
            "text": "Chaos Engeering Concepts in the Chaos Toolkit\n\u00b6\n\n\nIf you haven\u2019t already, we strongly recommend reading the fantastic \nChaos Engineering\n book from O\u2019Reilly Media. This book will give you some fantastic background on the whole Chaos Engineering discipline, and it\u2019s free!\n\n\nChaos Engineering is a discipline that allows you to surface weaknesses, and eventually build confidence, in complex and often distributed systems. \n\n\nThe Chaos Toolkit aims to give you the simplest experience for writing and running your own Chaos Engineering experiments. The main concepts are all expressed in an experiment definition, of which the following is an example from the \nChaos Toolkit Samples\n project:\n\n\n{\n\n    \n\"title\"\n:\n \n\"System is resilient to provider's failures\"\n,\n\n    \n\"description\"\n:\n \n\"Can our consumer survive gracefully a provider's failure?\"\n,\n\n    \n\"target-layers\"\n:\n \n{\n\n        \n\"platforms\"\n:\n \n[\n\n            \n{\n \n\"key\"\n:\n \n\"kubernetes\"\n \n}\n\n        \n],\n\n        \n\"applications\"\n:\n \n[\n\n            \n{\n \n\"key\"\n:\n \n\"spring\"\n \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Checking our system is healthy\"\n,\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservices-all-healthy\"\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Killing the provider abruptly\"\n,\n\n            \n\"action\"\n:\n \n{\n\n                \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                \n\"name\"\n:\n \n\"kill-microservice\"\n,\n\n                \n\"parameters\"\n:\n \n{\n\n                    \n\"name\"\n:\n \n\"my-provider-service\"\n\n                \n},\n\n                \n\"pauses\"\n:\n \n{\n\n                    \n\"after\"\n:\n \n10\n\n                \n}\n\n            \n},\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservice-available-and-healthy\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"name\"\n:\n \n\"my-provider-service\"\n\n                    \n}\n\n                \n},\n\n                \n\"close\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservice-is-not-available\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"name\"\n:\n \n\"my-provider-service\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Consumer should not be impacted by provider's failure\"\n,\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"spring\"\n,\n\n                    \n\"name\"\n:\n \n\"endpoint-should-respond-ok\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"url\"\n:\n \n\"http://192.168.99.100:32220/invokeConsumedService\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nThe key concepts of the Chaos Toolkit are \nExperiments\n, \nTarget Layers\n and the experiment\u2019s \nMethod\n. The \nMethod\n contains a combination of \nProbes\n and \nActions\n.\n\n\nExperiments\n\u00b6\n\n\nA Chaos Toolkit experiment is provided in a single file and is currently expressed in JSON.\n\n\nTarget Layers\n\u00b6\n\n\nA target layer is in fact a collection of extensions that allow the experiment to target specific systems to apply the experiment to. Out of the box support for Kubernetes (Platform layer) and Spring (Application Layer) is currently provided and we intend to extend this out rapidly into other technologies.\n\n\nWhen you execute an experiment\u2019s probes and actions it is against a particular target layer.\n\n\nMethod\n\u00b6\n\n\nAn experiment\u2019s activities are contained within its \nMethod\n block.\n\n\nProbes\n\u00b6\n\n\nA probe is a way of detecting a particular set of conditions in the system that is undergoing experimentation.\n\n\nActions\n\u00b6\n\n\nAn action is a particular activity that needs to be enacted on the system under experimentation.",
            "title": "Concepts"
        },
        {
            "location": "/overview/concepts/#chaos-engeering-concepts-in-the-chaos-toolkit",
            "text": "If you haven\u2019t already, we strongly recommend reading the fantastic  Chaos Engineering  book from O\u2019Reilly Media. This book will give you some fantastic background on the whole Chaos Engineering discipline, and it\u2019s free!  Chaos Engineering is a discipline that allows you to surface weaknesses, and eventually build confidence, in complex and often distributed systems.   The Chaos Toolkit aims to give you the simplest experience for writing and running your own Chaos Engineering experiments. The main concepts are all expressed in an experiment definition, of which the following is an example from the  Chaos Toolkit Samples  project:  { \n     \"title\" :   \"System is resilient to provider's failures\" , \n     \"description\" :   \"Can our consumer survive gracefully a provider's failure?\" , \n     \"target-layers\" :   { \n         \"platforms\" :   [ \n             {   \"key\" :   \"kubernetes\"   } \n         ], \n         \"applications\" :   [ \n             {   \"key\" :   \"spring\"   } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"title\" :   \"Checking our system is healthy\" , \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservices-all-healthy\" \n                 } \n             } \n         }, \n         { \n             \"title\" :   \"Killing the provider abruptly\" , \n             \"action\" :   { \n                 \"layer\" :   \"kubernetes\" , \n                 \"name\" :   \"kill-microservice\" , \n                 \"parameters\" :   { \n                     \"name\" :   \"my-provider-service\" \n                 }, \n                 \"pauses\" :   { \n                     \"after\" :   10 \n                 } \n             }, \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservice-available-and-healthy\" , \n                     \"parameters\" :   { \n                         \"name\" :   \"my-provider-service\" \n                     } \n                 }, \n                 \"close\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservice-is-not-available\" , \n                     \"parameters\" :   { \n                         \"name\" :   \"my-provider-service\" \n                     } \n                 } \n             } \n         }, \n         { \n             \"title\" :   \"Consumer should not be impacted by provider's failure\" , \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"spring\" , \n                     \"name\" :   \"endpoint-should-respond-ok\" , \n                     \"parameters\" :   { \n                         \"url\" :   \"http://192.168.99.100:32220/invokeConsumedService\" \n                     } \n                 } \n             } \n         } \n     ]  }   The key concepts of the Chaos Toolkit are  Experiments ,  Target Layers  and the experiment\u2019s  Method . The  Method  contains a combination of  Probes  and  Actions .",
            "title": "Chaos Engeering Concepts in the Chaos Toolkit"
        },
        {
            "location": "/overview/concepts/#experiments",
            "text": "A Chaos Toolkit experiment is provided in a single file and is currently expressed in JSON.",
            "title": "Experiments"
        },
        {
            "location": "/overview/concepts/#target-layers",
            "text": "A target layer is in fact a collection of extensions that allow the experiment to target specific systems to apply the experiment to. Out of the box support for Kubernetes (Platform layer) and Spring (Application Layer) is currently provided and we intend to extend this out rapidly into other technologies.  When you execute an experiment\u2019s probes and actions it is against a particular target layer.",
            "title": "Target Layers"
        },
        {
            "location": "/overview/concepts/#method",
            "text": "An experiment\u2019s activities are contained within its  Method  block.",
            "title": "Method"
        },
        {
            "location": "/overview/concepts/#probes",
            "text": "A probe is a way of detecting a particular set of conditions in the system that is undergoing experimentation.",
            "title": "Probes"
        },
        {
            "location": "/overview/concepts/#actions",
            "text": "An action is a particular activity that needs to be enacted on the system under experimentation.",
            "title": "Actions"
        },
        {
            "location": "/usage/install/",
            "text": "How to Install the Chaos Toolkit\n\u00b6\n\n\nYou can either install the chaostoolkit command line or run it directly as a\ncontainer. The former expects \nPython 3.5+\n properly\nsetup on your machine while the latter expects a tool implementing the\n\nOCI 1.0 specification\n, such as \nDocker\n or \nrunc\n.\n\n\nPython Requirements\n\u00b6\n\n\nchaostoolkit\n is implemented in Python 3 and this require a working Python\ninstallation to run. It officially supports Python 3.5+ but may work with\nother versions of the language. It has only been tested against CPython.\n\n\nInstall Python\n\u00b6\n\n\nInstall Python for your system:\n\n\nOn MacOSX:\n\n\n$ brew install python3\n\n\n\n\nOn Debian/Ubuntu:\n\n\n$ sudo apt-get install python3 python3-venv\n\n\n\n\nOn CentOS:\n\n\n$ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35\n\n\n\n\nOn Windows:\n\n\nDownload the latest binary installer\n from the Python website.\n\n\nCreate a virtual environment\n\u00b6\n\n\nDependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment. Let\u2019s create first such a virtual environment:\n\n\n$ python3 -m venv ~/.venvs/chaostk\n\n\n\n\nMake sure to always activate your virtual environment before using it:\n\n\n$ source  ~/.venvs/chaostk/bin/activate\n\n\n\n\n\n\nTip\n\n\nYou may want to use \nvirtualenvwrapper\n to make this process much nicer.\n\n\n\n\nInstall the CLI\n\u00b6\n\n\nInstall \nchaostoolkit\n in the virtual environment as follows:\n\n\n(chaostk) $ pip install chaostoolkit\n\n\n\n\nYou can verify the command was installed by running:\n\n\n(chaostk) $ chaos --version\n\n\n\n\n\n\nActivate your virtual environment\n\n\nRemember to always activate your virtual environment before running the\n\nchaos\n command.\n\n\n\n\nDownload the container image\n\u00b6\n\n\nYou can run the chaostoolkit from a container rather than install it.\n\n\nFor instance, using \nDocker\n, you can pull the\n\nchaostoolkit image\n:\n\n\n$ docker pull chaostoolkit/chaostoolkit",
            "title": "Install"
        },
        {
            "location": "/usage/install/#how-to-install-the-chaos-toolkit",
            "text": "You can either install the chaostoolkit command line or run it directly as a\ncontainer. The former expects  Python 3.5+  properly\nsetup on your machine while the latter expects a tool implementing the OCI 1.0 specification , such as  Docker  or  runc .",
            "title": "How to Install the Chaos Toolkit"
        },
        {
            "location": "/usage/install/#python-requirements",
            "text": "chaostoolkit  is implemented in Python 3 and this require a working Python\ninstallation to run. It officially supports Python 3.5+ but may work with\nother versions of the language. It has only been tested against CPython.",
            "title": "Python Requirements"
        },
        {
            "location": "/usage/install/#install-python",
            "text": "Install Python for your system:  On MacOSX:  $ brew install python3  On Debian/Ubuntu:  $ sudo apt-get install python3 python3-venv  On CentOS:  $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35  On Windows:  Download the latest binary installer  from the Python website.",
            "title": "Install Python"
        },
        {
            "location": "/usage/install/#create-a-virtual-environment",
            "text": "Dependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment. Let\u2019s create first such a virtual environment:  $ python3 -m venv ~/.venvs/chaostk  Make sure to always activate your virtual environment before using it:  $ source  ~/.venvs/chaostk/bin/activate   Tip  You may want to use  virtualenvwrapper  to make this process much nicer.",
            "title": "Create a virtual environment"
        },
        {
            "location": "/usage/install/#install-the-cli",
            "text": "Install  chaostoolkit  in the virtual environment as follows:  (chaostk) $ pip install chaostoolkit  You can verify the command was installed by running:  (chaostk) $ chaos --version   Activate your virtual environment  Remember to always activate your virtual environment before running the chaos  command.",
            "title": "Install the CLI"
        },
        {
            "location": "/usage/install/#download-the-container-image",
            "text": "You can run the chaostoolkit from a container rather than install it.  For instance, using  Docker , you can pull the chaostoolkit image :  $ docker pull chaostoolkit/chaostoolkit",
            "title": "Download the container image"
        },
        {
            "location": "/usage/running/",
            "text": "Running the Chaos Toolkit\n\u00b6\n\n\nThe \nchaostoolkit\n CLI will display commands it supports as follows:\n\n\n(venv) $ chaos --help\n\n\n\n\nExecuting a plan\n\u00b6\n\n\nThe main function of the \nchaostoolkit\n CLI is to execute the plan you\ndeclared. This is done as follows:\n\n\n(venv) $ chaos run my-plan.json\n\n\n\n\nYou can initially perform a dry run:\n\n\n(venv) $ chaos run --dry my-plan.json\n\n\n\n\nchaostoolkit\n will log all the steps it follows from your plan.\n\n\nIf you run the command from a container, you may use a command such as:\n\n\n$ docker run --rm -it \\\n    --user `id -u` \\\n    -v $HOME/.kube:/root/.kube \\\n    -v $HOME/.minikube:$HOME/.minikube \\\n    -v `pwd`:/tmp/chaos \\\n    chaostoolkit/chaostoolkit run /tmp/chaos/my-plan.json\n\n\n\n\nThis command snippet shows how you would share your \nKubernetes\n\n and \nminikube\n configurations if your experiment targets Kubernetes.",
            "title": "Run"
        },
        {
            "location": "/usage/running/#running-the-chaos-toolkit",
            "text": "The  chaostoolkit  CLI will display commands it supports as follows:  (venv) $ chaos --help",
            "title": "Running the Chaos Toolkit"
        },
        {
            "location": "/usage/running/#executing-a-plan",
            "text": "The main function of the  chaostoolkit  CLI is to execute the plan you\ndeclared. This is done as follows:  (venv) $ chaos run my-plan.json  You can initially perform a dry run:  (venv) $ chaos run --dry my-plan.json  chaostoolkit  will log all the steps it follows from your plan.  If you run the command from a container, you may use a command such as:  $ docker run --rm -it \\\n    --user `id -u` \\\n    -v $HOME/.kube:/root/.kube \\\n    -v $HOME/.minikube:$HOME/.minikube \\\n    -v `pwd`:/tmp/chaos \\\n    chaostoolkit/chaostoolkit run /tmp/chaos/my-plan.json  This command snippet shows how you would share your  Kubernetes \n and  minikube  configurations if your experiment targets Kubernetes.",
            "title": "Executing a plan"
        },
        {
            "location": "/technology/",
            "text": "Technology\n\u00b6\n\n\nKey values\n\u00b6\n\n\nThe following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.\n\n\nSimplicity\n\u00b6\n\n\nThe Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.\n\n\nTo achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.\n\n\nExtensibility\n\u00b6\n\n\nThe Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.\n\n\nBy using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.\n\n\nReadability\n\u00b6\n\n\nWe believe code readbility is a factor for positive maintenance and evolutivity.\n\n\nReadable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in \nPEP8\n.\n\n\nDiversity\n\u00b6\n\n\nAlthough not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.\n\n\nCore Projects\n\u00b6\n\n\nThe Chaos Toolkit is made of several projects that work together to provide its\nservice.\n\n\nchaostoolkit\n\u00b6\n\n\nThe \nchaostoolkit\n project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.\n\n\nThat project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-lib\n\u00b6\n\n\nThe \nchaostoolkit-lib\n project is the core library which implements\nthe \ncore concepts\n of the Chaos Toolkit.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-documentation\n\u00b6\n\n\nThe \nchaostoolkit-documehtation\n is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.\n\n\nThis project is implemented in Python 3 by generating HTML from Markdown\ndocuments.\n\n\nExtension Projects\n\u00b6\n\n\nIn addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.\n\n\nchaostoolkit-kubernetes-support\n\u00b6\n\n\nThe \nchaostoolkit-kubernetes-support\n implements probes and actions\nfor experiments targetting a \nKubernetes\n cluster. Those activities\nare implemented as Python functions.\n\n\nThis project is implemented in Python 3.\n\n\nTechnical Choices\n\u00b6\n\n\nPython 3\n\u00b6\n\n\nThe Chaos Toolkit is implemented in \nPython 3\n. A high-level language with\na long successfuly story for writing tools.\n\n\nThe language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.\n\n\nAlthough Python cannot generate (well, not easily) standalone binaries like\n\ngolang\n would. We do not believe this will harm the project and hope that\npackage managers will eventually provide native installers.\n\n\nFunctional\n\u00b6\n\n\nWell, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.\n\n\nMutable data structures are used but mostly created and returned from functions\nrather than modified.\n\n\nGenerally speaking, the project draws inspirations from certain ideas of \n\nfunctional paradigms\n but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error code. This may change if the community expresses\nsuch an intention.",
            "title": "Overview"
        },
        {
            "location": "/technology/#technology",
            "text": "",
            "title": "Technology"
        },
        {
            "location": "/technology/#key-values",
            "text": "The following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.",
            "title": "Key values"
        },
        {
            "location": "/technology/#simplicity",
            "text": "The Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.  To achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.",
            "title": "Simplicity"
        },
        {
            "location": "/technology/#extensibility",
            "text": "The Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.  By using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.",
            "title": "Extensibility"
        },
        {
            "location": "/technology/#readability",
            "text": "We believe code readbility is a factor for positive maintenance and evolutivity.  Readable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in  PEP8 .",
            "title": "Readability"
        },
        {
            "location": "/technology/#diversity",
            "text": "Although not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Diversity"
        },
        {
            "location": "/technology/#core-projects",
            "text": "The Chaos Toolkit is made of several projects that work together to provide its\nservice.",
            "title": "Core Projects"
        },
        {
            "location": "/technology/#chaostoolkit",
            "text": "The  chaostoolkit  project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.  That project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.  This project is implemented in Python 3.",
            "title": "chaostoolkit"
        },
        {
            "location": "/technology/#chaostoolkit-lib",
            "text": "The  chaostoolkit-lib  project is the core library which implements\nthe  core concepts  of the Chaos Toolkit.  This project is implemented in Python 3.",
            "title": "chaostoolkit-lib"
        },
        {
            "location": "/technology/#chaostoolkit-documentation",
            "text": "The  chaostoolkit-documehtation  is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.  This project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "chaostoolkit-documentation"
        },
        {
            "location": "/technology/#extension-projects",
            "text": "In addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.",
            "title": "Extension Projects"
        },
        {
            "location": "/technology/#chaostoolkit-kubernetes-support",
            "text": "The  chaostoolkit-kubernetes-support  implements probes and actions\nfor experiments targetting a  Kubernetes  cluster. Those activities\nare implemented as Python functions.  This project is implemented in Python 3.",
            "title": "chaostoolkit-kubernetes-support"
        },
        {
            "location": "/technology/#technical-choices",
            "text": "",
            "title": "Technical Choices"
        },
        {
            "location": "/technology/#python-3",
            "text": "The Chaos Toolkit is implemented in  Python 3 . A high-level language with\na long successfuly story for writing tools.  The language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.  Although Python cannot generate (well, not easily) standalone binaries like golang  would. We do not believe this will harm the project and hope that\npackage managers will eventually provide native installers.",
            "title": "Python 3"
        },
        {
            "location": "/technology/#functional",
            "text": "Well, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.  Mutable data structures are used but mostly created and returned from functions\nrather than modified.  Generally speaking, the project draws inspirations from certain ideas of  functional paradigms  but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error code. This may change if the community expresses\nsuch an intention.",
            "title": "Functional"
        }
    ]
}