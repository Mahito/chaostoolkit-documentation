{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Chaos Toolkit Project\n\u00b6\n\n\nThe Chaos Toolkit is a free, open source project that enables you to create and\napply Chaos Experiments to various types of infrastructure, platforms and\napplications.\n\n\nRunning experiments is as simple as:\n\n\n$ chaos run an-experiment.json\n\n\n\n\nThis takes the description of your experiment, runs it and ourput a reports\nto share with your team.\n\n\nMission\n\u00b6\n\n\nThe Chaos Toolkit aims at simplifying your journey through the\n\nPrinciples of Chaos Engineering\n and more generally considers that\nyou should embrace continuously observe and poke your system to empower your\nteam in face of adversity.\n\n\nCome join the Chaos Toolkit community\n\u00b6\n\n\nThe Chaos Toolkit is an \nopen source project\n and strives on a diverse and\ncooperative community. We welcome input and discussions on the project itself\nbut also on the \nPrinciples of Chaos Engineering\n in general.\n\n\nPlease \njoin us\n!",
            "title": "Introduction"
        },
        {
            "location": "/#welcome-to-the-chaos-toolkit-project",
            "text": "The Chaos Toolkit is a free, open source project that enables you to create and\napply Chaos Experiments to various types of infrastructure, platforms and\napplications.  Running experiments is as simple as:  $ chaos run an-experiment.json  This takes the description of your experiment, runs it and ourput a reports\nto share with your team.",
            "title": "Welcome to the Chaos Toolkit Project"
        },
        {
            "location": "/#mission",
            "text": "The Chaos Toolkit aims at simplifying your journey through the Principles of Chaos Engineering  and more generally considers that\nyou should embrace continuously observe and poke your system to empower your\nteam in face of adversity.",
            "title": "Mission"
        },
        {
            "location": "/#come-join-the-chaos-toolkit-community",
            "text": "The Chaos Toolkit is an  open source project  and strives on a diverse and\ncooperative community. We welcome input and discussions on the project itself\nbut also on the  Principles of Chaos Engineering  in general.  Please  join us !",
            "title": "Come join the Chaos Toolkit community"
        },
        {
            "location": "/overview/concepts/",
            "text": "Chaos Engeering Concepts in the Chaos Toolkit\n\u00b6\n\n\nIf you haven\u2019t already, we strongly recommend reading the fantastic \nChaos Engineering\n book from O\u2019Reilly Media. This book will give you some fantastic background on the whole Chaos Engineering discipline, and it\u2019s free!\n\n\nChaos Engineering is a discipline that allows you to surface weaknesses, and eventually build confidence, in complex and often distributed systems. \n\n\nThe Chaos Toolkit aims to give you the simplest experience for writing and running your own Chaos Engineering experiments. The main concepts are all expressed in an experiment definition, of which the following is an example from the \nChaos Toolkit Samples\n project:\n\n\n{\n\n    \n\"title\"\n:\n \n\"System is resilient to provider's failures\"\n,\n\n    \n\"description\"\n:\n \n\"Can our consumer survive gracefully a provider's failure?\"\n,\n\n    \n\"target-layers\"\n:\n \n{\n\n        \n\"platforms\"\n:\n \n[\n\n            \n{\n \n\"key\"\n:\n \n\"kubernetes\"\n \n}\n\n        \n],\n\n        \n\"applications\"\n:\n \n[\n\n            \n{\n \n\"key\"\n:\n \n\"spring\"\n \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Checking our system is healthy\"\n,\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservices-all-healthy\"\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Killing the provider abruptly\"\n,\n\n            \n\"action\"\n:\n \n{\n\n                \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                \n\"name\"\n:\n \n\"kill-microservice\"\n,\n\n                \n\"parameters\"\n:\n \n{\n\n                    \n\"name\"\n:\n \n\"my-provider-service\"\n\n                \n},\n\n                \n\"pauses\"\n:\n \n{\n\n                    \n\"after\"\n:\n \n10\n\n                \n}\n\n            \n},\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservice-available-and-healthy\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"name\"\n:\n \n\"my-provider-service\"\n\n                    \n}\n\n                \n},\n\n                \n\"close\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"kubernetes\"\n,\n\n                    \n\"name\"\n:\n \n\"microservice-is-not-available\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"name\"\n:\n \n\"my-provider-service\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"title\"\n:\n \n\"Consumer should not be impacted by provider's failure\"\n,\n\n            \n\"probes\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"layer\"\n:\n \n\"spring\"\n,\n\n                    \n\"name\"\n:\n \n\"endpoint-should-respond-ok\"\n,\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"url\"\n:\n \n\"http://192.168.99.100:32220/invokeConsumedService\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nThe key concepts of the Chaos Toolkit are \nExperiments\n, \nTarget Layers\n and the experiment\u2019s \nMethod\n. The \nMethod\n contains a combination of \nProbes\n and \nActions\n.\n\n\nExperiments\n\u00b6\n\n\nA Chaos Toolkit experiment is provided in a single file and is currently expressed in JSON.\n\n\nTarget Layers\n\u00b6\n\n\nA target layer is in fact a collection of extensions that allow the experiment to target specific systems to apply the experiment to. Out of the box support for Kubernetes (Platform layer) and Spring (Application Layer) is currently provided and we intend to extend this out rapidly into other technologies.\n\n\nWhen you execute an experiment\u2019s probes and actions it is against a particular target layer.\n\n\nMethod\n\u00b6\n\n\nAn experiment\u2019s activities are contained within its \nMethod\n block.\n\n\nProbes\n\u00b6\n\n\nA probe is a way of observing a particular set of conditions in the system that is undergoing experimentation.\n\n\nActions\n\u00b6\n\n\nAn action is a particular activity that needs to be enacted on the system under experimentation.",
            "title": "Concepts"
        },
        {
            "location": "/overview/concepts/#chaos-engeering-concepts-in-the-chaos-toolkit",
            "text": "If you haven\u2019t already, we strongly recommend reading the fantastic  Chaos Engineering  book from O\u2019Reilly Media. This book will give you some fantastic background on the whole Chaos Engineering discipline, and it\u2019s free!  Chaos Engineering is a discipline that allows you to surface weaknesses, and eventually build confidence, in complex and often distributed systems.   The Chaos Toolkit aims to give you the simplest experience for writing and running your own Chaos Engineering experiments. The main concepts are all expressed in an experiment definition, of which the following is an example from the  Chaos Toolkit Samples  project:  { \n     \"title\" :   \"System is resilient to provider's failures\" , \n     \"description\" :   \"Can our consumer survive gracefully a provider's failure?\" , \n     \"target-layers\" :   { \n         \"platforms\" :   [ \n             {   \"key\" :   \"kubernetes\"   } \n         ], \n         \"applications\" :   [ \n             {   \"key\" :   \"spring\"   } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"title\" :   \"Checking our system is healthy\" , \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservices-all-healthy\" \n                 } \n             } \n         }, \n         { \n             \"title\" :   \"Killing the provider abruptly\" , \n             \"action\" :   { \n                 \"layer\" :   \"kubernetes\" , \n                 \"name\" :   \"kill-microservice\" , \n                 \"parameters\" :   { \n                     \"name\" :   \"my-provider-service\" \n                 }, \n                 \"pauses\" :   { \n                     \"after\" :   10 \n                 } \n             }, \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservice-available-and-healthy\" , \n                     \"parameters\" :   { \n                         \"name\" :   \"my-provider-service\" \n                     } \n                 }, \n                 \"close\" :   { \n                     \"layer\" :   \"kubernetes\" , \n                     \"name\" :   \"microservice-is-not-available\" , \n                     \"parameters\" :   { \n                         \"name\" :   \"my-provider-service\" \n                     } \n                 } \n             } \n         }, \n         { \n             \"title\" :   \"Consumer should not be impacted by provider's failure\" , \n             \"probes\" :   { \n                 \"steady\" :   { \n                     \"layer\" :   \"spring\" , \n                     \"name\" :   \"endpoint-should-respond-ok\" , \n                     \"parameters\" :   { \n                         \"url\" :   \"http://192.168.99.100:32220/invokeConsumedService\" \n                     } \n                 } \n             } \n         } \n     ]  }   The key concepts of the Chaos Toolkit are  Experiments ,  Target Layers  and the experiment\u2019s  Method . The  Method  contains a combination of  Probes  and  Actions .",
            "title": "Chaos Engeering Concepts in the Chaos Toolkit"
        },
        {
            "location": "/overview/concepts/#experiments",
            "text": "A Chaos Toolkit experiment is provided in a single file and is currently expressed in JSON.",
            "title": "Experiments"
        },
        {
            "location": "/overview/concepts/#target-layers",
            "text": "A target layer is in fact a collection of extensions that allow the experiment to target specific systems to apply the experiment to. Out of the box support for Kubernetes (Platform layer) and Spring (Application Layer) is currently provided and we intend to extend this out rapidly into other technologies.  When you execute an experiment\u2019s probes and actions it is against a particular target layer.",
            "title": "Target Layers"
        },
        {
            "location": "/overview/concepts/#method",
            "text": "An experiment\u2019s activities are contained within its  Method  block.",
            "title": "Method"
        },
        {
            "location": "/overview/concepts/#probes",
            "text": "A probe is a way of observing a particular set of conditions in the system that is undergoing experimentation.",
            "title": "Probes"
        },
        {
            "location": "/overview/concepts/#actions",
            "text": "An action is a particular activity that needs to be enacted on the system under experimentation.",
            "title": "Actions"
        },
        {
            "location": "/faq/",
            "text": "FAQ\n\u00b6\n\n\nWhat is the Chaos Toolkit?\n\u00b6\n\n\nIt is an open-source software that runs an experiment against your system to\nconfirm or infirm an hypothesis. Colloquially this refers to the \nC\nhaos Engineering Principles\n.\n\n\nWhy do I need to run experiments?\n\u00b6\n\n\nSystems do not live in a vacuum, they are subjected to real world events, some\nexpected and tolerated, others considered as attacks. Waiting for those\nconditions arise does not give the time your team needs to handle, learn and\nadapt to the situation at hand.\n\n\nIn many countries, fire alarm tests are conducted at random in offices so \npeople learn how to react well for the benefit of everyone. Software systems\nshould go through the same exercises . The Chaos Toolkit hopes to make it \nsimple and safe to run experiments like these.\n\n\nWhy a toolkit?\n\u00b6\n\n\nCurrently, running experiments is not an easy task because the ecosystem is \nstill fairly young. Complex cases have been demonstrated at large corporations\nsuch as Netflix or LinkedIn. Tools such as \nChAP\n or \nSimoorg\n\nare powerful but quite involved.\n\n\nThe Chaos Toolkit aims at providing a more straightforward initial user\nexperience to gain confidence in doing Chaos Engineering experiments. The\nsimpler it gets the greater our cognitive capacity to understand what is going\non.\n\n\nUltimately, the Chaos Toolkit should lead you on the path to using richer tools\nsuch as those cited above.\n\n\nWhat does the Chaos Toolkit do?\n\u00b6\n\n\nThe Chaos Toolkit user-interface is a command line that takes a JSON-encoded\nfile describing the experiment to run. It consists of a sequence of activities\nthe toolkit executes in order to produce a final report. \n\n\nThe activities are of two kinds. Probes observe the system at various point of\nthe experiment. Actions interact with the system to change its state. Usually\nthe action represents the hypothesis you are trying to learn from.\n\n\nWho is behind the Chaos Toolkit?\n\u00b6\n\n\nThe effort was initiated by \nRuss Miles\n and\n\nSylvain Hellegouarch\n, two engineers passionate about fluidity in\ncomplex systems. However, their vision is really to build a\n\nstrong community\n of engineer experiences to feedback\ninto the Chaos Toolkit.\n\n\nWhat is the license of the Chaos Toolkit?\n\u00b6\n\n\nApache 2.0\n.\n\n\nHow can I contribute?\n\u00b6\n\n\nThe Chaos Toolkit welcomes contributors! To help the project, please go to\nthe right project on \nGitHub\n and create an issue. If you feel like it,\ndo not hesitate to fork the repository, make a change and submit a \npull-request to the upstream project for review.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/faq/#what-is-the-chaos-toolkit",
            "text": "It is an open-source software that runs an experiment against your system to\nconfirm or infirm an hypothesis. Colloquially this refers to the \nC haos Engineering Principles .",
            "title": "What is the Chaos Toolkit?"
        },
        {
            "location": "/faq/#why-do-i-need-to-run-experiments",
            "text": "Systems do not live in a vacuum, they are subjected to real world events, some\nexpected and tolerated, others considered as attacks. Waiting for those\nconditions arise does not give the time your team needs to handle, learn and\nadapt to the situation at hand.  In many countries, fire alarm tests are conducted at random in offices so \npeople learn how to react well for the benefit of everyone. Software systems\nshould go through the same exercises . The Chaos Toolkit hopes to make it \nsimple and safe to run experiments like these.",
            "title": "Why do I need to run experiments?"
        },
        {
            "location": "/faq/#why-a-toolkit",
            "text": "Currently, running experiments is not an easy task because the ecosystem is \nstill fairly young. Complex cases have been demonstrated at large corporations\nsuch as Netflix or LinkedIn. Tools such as  ChAP  or  Simoorg \nare powerful but quite involved.  The Chaos Toolkit aims at providing a more straightforward initial user\nexperience to gain confidence in doing Chaos Engineering experiments. The\nsimpler it gets the greater our cognitive capacity to understand what is going\non.  Ultimately, the Chaos Toolkit should lead you on the path to using richer tools\nsuch as those cited above.",
            "title": "Why a toolkit?"
        },
        {
            "location": "/faq/#what-does-the-chaos-toolkit-do",
            "text": "The Chaos Toolkit user-interface is a command line that takes a JSON-encoded\nfile describing the experiment to run. It consists of a sequence of activities\nthe toolkit executes in order to produce a final report.   The activities are of two kinds. Probes observe the system at various point of\nthe experiment. Actions interact with the system to change its state. Usually\nthe action represents the hypothesis you are trying to learn from.",
            "title": "What does the Chaos Toolkit do?"
        },
        {
            "location": "/faq/#who-is-behind-the-chaos-toolkit",
            "text": "The effort was initiated by  Russ Miles  and Sylvain Hellegouarch , two engineers passionate about fluidity in\ncomplex systems. However, their vision is really to build a strong community  of engineer experiences to feedback\ninto the Chaos Toolkit.",
            "title": "Who is behind the Chaos Toolkit?"
        },
        {
            "location": "/faq/#what-is-the-license-of-the-chaos-toolkit",
            "text": "Apache 2.0 .",
            "title": "What is the license of the Chaos Toolkit?"
        },
        {
            "location": "/faq/#how-can-i-contribute",
            "text": "The Chaos Toolkit welcomes contributors! To help the project, please go to\nthe right project on  GitHub  and create an issue. If you feel like it,\ndo not hesitate to fork the repository, make a change and submit a \npull-request to the upstream project for review.",
            "title": "How can I contribute?"
        },
        {
            "location": "/usage/install/",
            "text": "How to Install the Chaos Toolkit\n\u00b6\n\n\nYou can either install the chaostoolkit command line or run it from a container.\n\n\nThe former expects \nPython 3.5+\n properly setup on your machine while\nthe latter expects a tool implementing the \nOCI 1.0 specification\n, \nsuch as \nDocker\n or \nrunc\n.\n\n\nPython Requirements\n\u00b6\n\n\nchaostoolkit\n is implemented in Python 3 and this require a working Python\ninstallation to run. It officially supports Python 3.5+ but may work with\nother versions of the language. It has only been tested against CPython.\n\n\nInstall Python\n\u00b6\n\n\nInstall Python for your system:\n\n\nOn MacOSX:\n\n\n$ brew install python3\n\n\n\n\nOn Debian/Ubuntu:\n\n\n$ sudo apt-get install python3 python3-venv\n\n\n\n\nOn CentOS:\n\n\n$ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35\n\n\n\n\nOn Windows:\n\n\nDownload the latest binary installer\n from the Python website.\n\n\nCreate a virtual environment\n\u00b6\n\n\nDependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.\n\n\n$ python3 -m venv ~/.venvs/chaostk\n\n\n\n\nMake sure to always activate your virtual environment before using it:\n\n\n$ source  ~/.venvs/chaostk/bin/activate\n\n\n\n\n\n\nTip\n\n\nYou may want to use \nvirtualenvwrapper\n to make this process much nicer.\n\n\n\n\nInstall the CLI\n\u00b6\n\n\nInstall \nchaostoolkit\n in the virtual environment as follows:\n\n\n(chaostk) $ pip install chaostoolkit\n\n\n\n\nYou can verify the command was installed by running:\n\n\n(chaostk) $ chaos --version\n\n\n\n\nDownload the container image\n\u00b6\n\n\nYou can run the chaostoolkit from a container rather than install it.\n\n\nFor instance, using \nDocker\n, you can pull the\n\nchaostoolkit image\n:\n\n\n$ docker pull chaostoolkit/chaostoolkit",
            "title": "Install"
        },
        {
            "location": "/usage/install/#how-to-install-the-chaos-toolkit",
            "text": "You can either install the chaostoolkit command line or run it from a container.  The former expects  Python 3.5+  properly setup on your machine while\nthe latter expects a tool implementing the  OCI 1.0 specification , \nsuch as  Docker  or  runc .",
            "title": "How to Install the Chaos Toolkit"
        },
        {
            "location": "/usage/install/#python-requirements",
            "text": "chaostoolkit  is implemented in Python 3 and this require a working Python\ninstallation to run. It officially supports Python 3.5+ but may work with\nother versions of the language. It has only been tested against CPython.",
            "title": "Python Requirements"
        },
        {
            "location": "/usage/install/#install-python",
            "text": "Install Python for your system:  On MacOSX:  $ brew install python3  On Debian/Ubuntu:  $ sudo apt-get install python3 python3-venv  On CentOS:  $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35  On Windows:  Download the latest binary installer  from the Python website.",
            "title": "Install Python"
        },
        {
            "location": "/usage/install/#create-a-virtual-environment",
            "text": "Dependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.  $ python3 -m venv ~/.venvs/chaostk  Make sure to always activate your virtual environment before using it:  $ source  ~/.venvs/chaostk/bin/activate   Tip  You may want to use  virtualenvwrapper  to make this process much nicer.",
            "title": "Create a virtual environment"
        },
        {
            "location": "/usage/install/#install-the-cli",
            "text": "Install  chaostoolkit  in the virtual environment as follows:  (chaostk) $ pip install chaostoolkit  You can verify the command was installed by running:  (chaostk) $ chaos --version",
            "title": "Install the CLI"
        },
        {
            "location": "/usage/install/#download-the-container-image",
            "text": "You can run the chaostoolkit from a container rather than install it.  For instance, using  Docker , you can pull the chaostoolkit image :  $ docker pull chaostoolkit/chaostoolkit",
            "title": "Download the container image"
        },
        {
            "location": "/usage/upgrade/",
            "text": "How to Upgrade the Chaos Toolkit\n\u00b6\n\n\nUsing pip\n\u00b6\n\n\nYou can update your Chaos Toolkit installation as follows:\n\n\n(chaostk) $ pip install -U chaostoolkit\n\n\n\n\nUsing a container image\n\u00b6\n\n\nIf you downloaded the Docker image of the toolkit, you can pull it again:\n\n\n$ docker pull chaostoolkit/chaostoolkit",
            "title": "Upgrade"
        },
        {
            "location": "/usage/upgrade/#how-to-upgrade-the-chaos-toolkit",
            "text": "",
            "title": "How to Upgrade the Chaos Toolkit"
        },
        {
            "location": "/usage/upgrade/#using-pip",
            "text": "You can update your Chaos Toolkit installation as follows:  (chaostk) $ pip install -U chaostoolkit",
            "title": "Using pip"
        },
        {
            "location": "/usage/upgrade/#using-a-container-image",
            "text": "If you downloaded the Docker image of the toolkit, you can pull it again:  $ docker pull chaostoolkit/chaostoolkit",
            "title": "Using a container image"
        },
        {
            "location": "/usage/running/",
            "text": "Running the Chaos Toolkit\n\u00b6\n\n\nThe \nchaostoolkit\n CLI will display commands it supports as follows:\n\n\n(chaostk) $ chaos --help\n\n\n\n\n\n\nActivate the Python virtual environment\n\n\nIf you run the Chaos Toolkit directly, rather than using a container,\nalways ensure you have activated the virtual environment so that it can\nbe found along its dependencies:\n\n\n$ source ~/.venvs/chaostk/bin/activate\n(chaostk) $\n\n\n\n\n\n\nExecuting a plan\n\u00b6\n\n\nThe main function of the \nchaostoolkit\n CLI is to execute the plan you\ndeclared. This is done as follows:\n\n\n(chaostk) $ chaos run my-plan.json\n\n\n\n\nchaostoolkit\n will log all the steps it follows from your plan.\n\n\nIf you run the command from a container:\n\n\n$ docker run --rm -it \\\n    --user `id -u` \\\n    -v $HOME/.kube:/root/.kube \\\n    -v $HOME/.minikube:$HOME/.minikube \\\n    -v `pwd`:/tmp/chaos \\\n    chaostoolkit/chaostoolkit run /tmp/chaos/my-plan.json\n\n\n\n\nThis command snippet shows how you would share your \nKubernetes\n\n and \nminikube\n configurations if your experiment targets Kubernetes.\n\n\n\n\nBattery not included in the container\n\n\nDepending on your experiment, running as a container may not be as simple\nas it looks because all the extensions (Python packages, commands to run,\nconfig files\u2026) are not included in the base image.",
            "title": "Run"
        },
        {
            "location": "/usage/running/#running-the-chaos-toolkit",
            "text": "The  chaostoolkit  CLI will display commands it supports as follows:  (chaostk) $ chaos --help   Activate the Python virtual environment  If you run the Chaos Toolkit directly, rather than using a container,\nalways ensure you have activated the virtual environment so that it can\nbe found along its dependencies:  $ source ~/.venvs/chaostk/bin/activate\n(chaostk) $",
            "title": "Running the Chaos Toolkit"
        },
        {
            "location": "/usage/running/#executing-a-plan",
            "text": "The main function of the  chaostoolkit  CLI is to execute the plan you\ndeclared. This is done as follows:  (chaostk) $ chaos run my-plan.json  chaostoolkit  will log all the steps it follows from your plan.  If you run the command from a container:  $ docker run --rm -it \\\n    --user `id -u` \\\n    -v $HOME/.kube:/root/.kube \\\n    -v $HOME/.minikube:$HOME/.minikube \\\n    -v `pwd`:/tmp/chaos \\\n    chaostoolkit/chaostoolkit run /tmp/chaos/my-plan.json  This command snippet shows how you would share your  Kubernetes \n and  minikube  configurations if your experiment targets Kubernetes.   Battery not included in the container  Depending on your experiment, running as a container may not be as simple\nas it looks because all the extensions (Python packages, commands to run,\nconfig files\u2026) are not included in the base image.",
            "title": "Executing a plan"
        },
        {
            "location": "/technology/",
            "text": "Technology\n\u00b6\n\n\nKey values\n\u00b6\n\n\nThe following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.\n\n\nSimplicity\n\u00b6\n\n\nThe Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.\n\n\nTo achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.\n\n\nExtensibility\n\u00b6\n\n\nThe Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.\n\n\nBy using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.\n\n\nReadability\n\u00b6\n\n\nWe believe code readbility is a factor for positive maintenance and evolutivity.\n\n\nReadable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in \nPEP8\n.\n\n\nDiversity\n\u00b6\n\n\nAlthough not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.\n\n\nCore Projects\n\u00b6\n\n\nThe Chaos Toolkit is made of several projects that work together to provide its\nservice.\n\n\nchaostoolkit\n\u00b6\n\n\nThe \nchaostoolkit\n project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.\n\n\nThat project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-lib\n\u00b6\n\n\nThe \nchaostoolkit-lib\n project is the core library which implements\nthe \ncore concepts\n of the Chaos Toolkit.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-documentation\n\u00b6\n\n\nThe \nchaostoolkit-documehtation\n is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.\n\n\nThis project is implemented in Python 3 by generating HTML from Markdown\ndocuments.\n\n\nExtension Projects\n\u00b6\n\n\nIn addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.\n\n\nchaostoolkit-kubernetes-support\n\u00b6\n\n\nThe \nchaostoolkit-kubernetes-support\n implements probes and actions\nfor experiments targetting a \nKubernetes\n cluster. Those activities\nare implemented as Python functions.\n\n\nThis project is implemented in Python 3.\n\n\nTechnical Choices\n\u00b6\n\n\nPython 3\n\u00b6\n\n\nThe Chaos Toolkit is implemented in \nPython 3\n. A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.\n\n\nThe language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.\n\n\nThe choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.\n\n\nAlthough Python cannot generate (well, not easily) standalone binaries like\n\ngolang\n would. We do not believe this will harm the project and hope that\npackage managers will eventually provide native installers.\n\n\nFunctional\n\u00b6\n\n\nWell, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.\n\n\nMutable data structures are used but mostly created and returned from functions\nrather than modified.\n\n\nGenerally speaking, the project draws inspirations from certain ideas of \n\nfunctional paradigms\n but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.\n\n\nJSON\n\u00b6\n\n\nThe experiment description and structure is encoded using JSON. The choice for\nJSON over YAML is because it leaves less room for ambiguity and is marginally\nless readable for a structure with a shallow depth like Chaos Toolkit\nexperiments.",
            "title": "Overview"
        },
        {
            "location": "/technology/#technology",
            "text": "",
            "title": "Technology"
        },
        {
            "location": "/technology/#key-values",
            "text": "The following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.",
            "title": "Key values"
        },
        {
            "location": "/technology/#simplicity",
            "text": "The Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.  To achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.",
            "title": "Simplicity"
        },
        {
            "location": "/technology/#extensibility",
            "text": "The Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.  By using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.",
            "title": "Extensibility"
        },
        {
            "location": "/technology/#readability",
            "text": "We believe code readbility is a factor for positive maintenance and evolutivity.  Readable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in  PEP8 .",
            "title": "Readability"
        },
        {
            "location": "/technology/#diversity",
            "text": "Although not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Diversity"
        },
        {
            "location": "/technology/#core-projects",
            "text": "The Chaos Toolkit is made of several projects that work together to provide its\nservice.",
            "title": "Core Projects"
        },
        {
            "location": "/technology/#chaostoolkit",
            "text": "The  chaostoolkit  project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.  That project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.  This project is implemented in Python 3.",
            "title": "chaostoolkit"
        },
        {
            "location": "/technology/#chaostoolkit-lib",
            "text": "The  chaostoolkit-lib  project is the core library which implements\nthe  core concepts  of the Chaos Toolkit.  This project is implemented in Python 3.",
            "title": "chaostoolkit-lib"
        },
        {
            "location": "/technology/#chaostoolkit-documentation",
            "text": "The  chaostoolkit-documehtation  is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.  This project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "chaostoolkit-documentation"
        },
        {
            "location": "/technology/#extension-projects",
            "text": "In addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.",
            "title": "Extension Projects"
        },
        {
            "location": "/technology/#chaostoolkit-kubernetes-support",
            "text": "The  chaostoolkit-kubernetes-support  implements probes and actions\nfor experiments targetting a  Kubernetes  cluster. Those activities\nare implemented as Python functions.  This project is implemented in Python 3.",
            "title": "chaostoolkit-kubernetes-support"
        },
        {
            "location": "/technology/#technical-choices",
            "text": "",
            "title": "Technical Choices"
        },
        {
            "location": "/technology/#python-3",
            "text": "The Chaos Toolkit is implemented in  Python 3 . A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.  The language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.  The choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.  Although Python cannot generate (well, not easily) standalone binaries like golang  would. We do not believe this will harm the project and hope that\npackage managers will eventually provide native installers.",
            "title": "Python 3"
        },
        {
            "location": "/technology/#functional",
            "text": "Well, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.  Mutable data structures are used but mostly created and returned from functions\nrather than modified.  Generally speaking, the project draws inspirations from certain ideas of  functional paradigms  but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.",
            "title": "Functional"
        },
        {
            "location": "/technology/#json",
            "text": "The experiment description and structure is encoded using JSON. The choice for\nJSON over YAML is because it leaves less room for ambiguity and is marginally\nless readable for a structure with a shallow depth like Chaos Toolkit\nexperiments.",
            "title": "JSON"
        },
        {
            "location": "/technology/experiment/",
            "text": "Experiment\n\u00b6\n\n\nObjective\n\u00b6\n\n\nA Chaos experiment is an hypothesis you make about your system. The Chaos\nToolkit runs it and observes the state of the system. On completion, a report\nis generated for analsyis.\n\n\nOverview\n\u00b6\n\n\nAn experiment has a simple structure with the following elements:\n\n\n\n\nsome high-level metadata\n\n\na method: a sequence of activities that together represent the experiment\n\n\n\n\nThe metadata found in the experiment helps the shared understanding of its\ncontext and objective among the team. In other words, the metadata target the\nhumans dealing with this experiment.\n\n\nThe method is the meat of the experiment. It tells the Chaos Toolkit what to\nrun. It is a sequence of activities:\n\n\n\n\nactions\n\n\nprobes\n\n\n\n\nActions represent the enactment of your hypothesis, e.g. \u201cLet\u2019s shutdown\nservice A and confirm this should not bring our entire system down by ripple\neffect\u201d.\n\n\nProbes observe the system as the experiment runs. Two kinds of probes can be\ndeclared: steady and close. A steady probe looks for the state of a resource\nor the whole system before an action (or another probe) is applied. Likewsise,\nthe close probe look for the state after the action was applied.\n\n\nProbes inform your about what was happening in your system as the experiment\ntook place but also the effect of actioning the system.\n\n\nMethod Activities\n\u00b6\n\n\nProbe\n\u00b6\n\n\nA probe lets you observe your system (or any external system relevant to the\nexperiment). Think of a probe as a view on a specific aspect of your system.\nThrough probes, you can assess the conditions of your system at a\ngiven point of your experiment.\n\n\nAs seen before, the Chaos Toolkit defines two kinds of probes:\n\n\n\n\nsteady probes: appropriate to observe the steady state of your system before\n  an action is trggered\n\n\nclose probes: appropriate to observe the close state after an action is \n  triggered\n\n\n\n\nBoth probes have the same structure and only differ about when you apply them.\n\n\nAction\n\u00b6\n\n\nAn action interacts with the system, either stopping or starting a service, or\nmaybe triggering a resource failure.\n\n\nAlthough an experiment can declare many actions, it is better to keep the\nhypothesis comprehensible to make the analysis simpler and conclusive.\n\n\nStructure Schema\n\u00b6\n\n\nAn experiment is stored in a JSON-encoded file. It has the following schema:\n\n\n{\n\n    \n\"$schema\"\n:\n \n\"http://json-schema.org/draft-04/schema#\"\n,\n\n    \n\"type\"\n:\n \n\"object\"\n,\n\n    \n\"required\"\n:\n \n[\n\n        \n\"method\"\n,\n\n        \n\"title\"\n \n    \n],\n\n    \n\"properties\"\n:\n \n{\n\n        \n\"description\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"string\"\n,\n\n            \n\"description\"\n:\n \n\"Describing the Chaos experiment to provide context\"\n\n        \n},\n\n        \n\"title\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"string\"\n,\n\n            \n\"description\"\n:\n \n\"The high-level title of the Chaos experiment\"\n\n        \n},\n\n        \n\"method\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"array\"\n,\n\n            \n\"description\"\n:\n \n\"The activities to try our the hypothesis\"\n,\n\n            \n\"items\"\n:\n \n[\n\n                \n{\n \n\"$ref\"\n:\n \n\"#definitions/step\"\n \n}\n   \n            \n]\n\n        \n}\n\n    \n},\n\n    \n\"definitions\"\n:\n \n{\n\n        \n\"step\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"title\"\n:\n \n\"A step of the method. Made of actions and/or probes\"\n,\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"title\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A description of the step\"\n\n                \n}\n\n            \n},\n\n            \n\"additionalProperties\"\n:\n \n{\n\n                \n\"anyOf\"\n:\n \n[\n\n                    \n{\n\n                        \n\"$ref\"\n:\n \n\"#/definitions/probes\"\n\n                    \n},\n\n                    \n{\n\n                        \n\"$ref\"\n:\n \n\"#/definitions/action\"\n\n                    \n}\n\n                \n]\n\n            \n}\n\n        \n},\n\n        \n\"action\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"description\"\n:\n \n\"The hypothesis enactment\"\n,\n\n            \n\"required\"\n:\n \n[\n\n                \n\"arguments\"\n,\n\n                \n\"layer\"\n,\n\n                \n\"title\"\n,\n\n                \n\"type\"\n\n            \n],\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"object\"\n,\n\n                    \n\"properties\"\n:\n \n{}\n\n                \n},\n\n                \n\"type\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n\n                \n},\n\n                \n\"layer\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n\n                \n},\n\n                \n\"title\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n\n                \n},\n\n                \n\"negate\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"boolean\"\n,\n\n                    \n\"title\"\n:\n \n\"Sould the Chaos Toolkit take the opposite of the action's result?\"\n,\n\n                    \n\"enum\"\n:\n \n[\ntrue\n,\n \nfalse\n]\n\n                \n},\n\n                \n\"timeout\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"number\"\n,\n\n                    \n\"title\"\n:\n \n\"The maximum duration the Chaos toolkit will wait for the action to complete\"\n\n                \n},\n\n                \n\"pauses\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"number\"\n,\n\n                    \n\"title\"\n:\n \n\"Pauses the Chaos toolkit may pause before or after an action\"\n,\n\n                    \n\"properties\"\n:\n \n{\n\n                        \n\"before\"\n:\n \n{\n\n                            \n\"type\"\n:\n \n\"number\"\n,\n\n                            \n\"title\"\n:\n \n\"How long before triggering the action (in seconds)\"\n\n                        \n},\n\n                        \n\"after\"\n:\n \n{\n\n                            \n\"type\"\n:\n \n\"number\"\n,\n\n                            \n\"title\"\n:\n \n\"How long after the action was triggered (in seconds)\"\n\n                        \n}\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n\"probe\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"oneOf\"\n:\n \n[\n\n                \n{\n\n                    \n\"$ref\"\n:\n \n\"#/definitions/python-probe\"\n\n                \n},\n\n                \n{\n\n                    \n\"$ref\"\n:\n \n\"#/definitions/process-probe\"\n\n                \n},\n\n                \n{\n\n                    \n\"$ref\"\n:\n \n\"#/definitions/http-probe\"\n\n                \n}\n\n            \n]\n\n        \n},\n\n        \n\"python-probe\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"required\"\n:\n \n[\n\n                \n\"layer\"\n,\n\n                \n\"title\"\n,\n\n                \n\"type\"\n,\n\n                \n\"module\"\n,\n\n                \n\"func\"\n\n            \n],\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"type\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The kind of probe implementation\"\n,\n\n                    \n\"pattern\"\n:\n \n\"^(python)$\"\n\n                \n},\n\n                \n\"layer\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The layer the probe applies at\"\n,\n\n                    \n\"enum\"\n:\n \n[\n\n                        \n\"infrastructure\"\n,\n\n                        \n\"platform\"\n,\n\n                        \n\"application\"\n\n                    \n]\n\n                \n},\n\n                \n\"title\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A short description of the probe\"\n\n                \n},\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"object\"\n,\n\n                    \n\"title\"\n:\n \n\"A K->V mapping that is passed as-is to the probe\"\n,\n\n                    \n\"properties\"\n:\n \n{}\n\n                \n},\n\n                \n\"negate\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"boolean\"\n,\n\n                    \n\"title\"\n:\n \n\"Sould the Chaos Toolkit take the opposite of the probe's result?\"\n,\n\n                    \n\"enum\"\n:\n \n[\ntrue\n,\n \nfalse\n]\n\n                \n},\n\n                \n\"module\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A Python module path the Chaos Toolkit can import at runtime\"\n\n                \n},\n\n                \n\"func\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A function name exposed in the module\"\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n\"process-probe\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"required\"\n:\n \n[\n\n                \n\"layer\"\n,\n\n                \n\"title\"\n,\n\n                \n\"type\"\n,\n\n                \n\"path\"\n\n            \n],\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"type\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The kind of probe implementation\"\n,\n\n                    \n\"pattern\"\n:\n \n\"^(process)$\"\n\n                \n},\n\n                \n\"layer\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The layer the probe applies at\"\n,\n\n                    \n\"enum\"\n:\n \n[\n\n                        \n\"infrastructure\"\n,\n\n                        \n\"platform\"\n,\n\n                        \n\"application\"\n\n                    \n]\n\n                \n},\n\n                \n\"title\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A short description of the probe\"\n\n                \n},\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"object\"\n,\n\n                    \n\"title\"\n:\n \n\"A K->V mapping that is passed as-is to the probe\"\n,\n\n                    \n\"properties\"\n:\n \n{}\n\n                \n},\n\n                \n\"negate\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"boolean\"\n,\n\n                    \n\"title\"\n:\n \n\"Sould the Chaos Toolkit take the opposite of the probe's result?\"\n,\n\n                    \n\"enum\"\n:\n \n[\ntrue\n,\n \nfalse\n]\n\n                \n},\n\n                \n\"path\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The path to an executable to call\"\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n\"http-probe\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"required\"\n:\n \n[\n\n                \n\"layer\"\n,\n\n                \n\"title\"\n,\n\n                \n\"type\"\n,\n\n                \n\"url\"\n\n            \n],\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"type\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The kind of probe implementation\"\n,\n\n                    \n\"pattern\"\n:\n \n\"^(http)$\"\n\n                \n},\n\n                \n\"layer\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"The layer the probe applies at\"\n,\n\n                    \n\"enum\"\n:\n \n[\n\n                        \n\"infrastructure\"\n,\n\n                        \n\"platform\"\n,\n\n                        \n\"application\"\n\n                    \n]\n\n                \n},\n\n                \n\"title\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A short description of the probe\"\n\n                \n},\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"object\"\n,\n\n                    \n\"title\"\n:\n \n\"A K->V mapping that is passed as-is to the probe\"\n,\n\n                    \n\"properties\"\n:\n \n{}\n\n                \n},\n\n                \n\"url\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A deferencable URL\"\n\n                \n},\n\n                \n\"method\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"string\"\n,\n\n                    \n\"title\"\n:\n \n\"A valid HTTP method\"\n,\n\n                    \n\"enum\"\n:\n \n[\n\n                        \n\"GET\"\n,\n\n                        \n\"POST\"\n,\n\n                        \n\"PUT\"\n,\n\n                        \n\"DELETE\"\n,\n\n                        \n\"PATCH\"\n\n                    \n]\n\n                \n},\n\n                \n\"headers\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"object\"\n,\n\n                    \n\"properties\"\n:\n \n{}\n\n                \n},\n\n                \n\"negate\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"boolean\"\n,\n\n                    \n\"title\"\n:\n \n\"Sould the Chaos Toolkit take the opposite of the probe's result?\"\n,\n\n                    \n\"enum\"\n:\n \n[\ntrue\n,\n \nfalse\n]\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n\"probes\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"object\"\n,\n\n            \n\"properties\"\n:\n \n{\n\n                \n\"steady\"\n:\n \n{\n\n                    \n\"$ref\"\n:\n \n\"#/definitions/probe\"\n\n                \n},\n\n                \n\"close\"\n:\n \n{\n\n                    \n\"$ref\"\n:\n \n\"#/definitions/probe\"\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}",
            "title": "Experiment"
        },
        {
            "location": "/technology/experiment/#experiment",
            "text": "",
            "title": "Experiment"
        },
        {
            "location": "/technology/experiment/#objective",
            "text": "A Chaos experiment is an hypothesis you make about your system. The Chaos\nToolkit runs it and observes the state of the system. On completion, a report\nis generated for analsyis.",
            "title": "Objective"
        },
        {
            "location": "/technology/experiment/#overview",
            "text": "An experiment has a simple structure with the following elements:   some high-level metadata  a method: a sequence of activities that together represent the experiment   The metadata found in the experiment helps the shared understanding of its\ncontext and objective among the team. In other words, the metadata target the\nhumans dealing with this experiment.  The method is the meat of the experiment. It tells the Chaos Toolkit what to\nrun. It is a sequence of activities:   actions  probes   Actions represent the enactment of your hypothesis, e.g. \u201cLet\u2019s shutdown\nservice A and confirm this should not bring our entire system down by ripple\neffect\u201d.  Probes observe the system as the experiment runs. Two kinds of probes can be\ndeclared: steady and close. A steady probe looks for the state of a resource\nor the whole system before an action (or another probe) is applied. Likewsise,\nthe close probe look for the state after the action was applied.  Probes inform your about what was happening in your system as the experiment\ntook place but also the effect of actioning the system.",
            "title": "Overview"
        },
        {
            "location": "/technology/experiment/#method-activities",
            "text": "",
            "title": "Method Activities"
        },
        {
            "location": "/technology/experiment/#probe",
            "text": "A probe lets you observe your system (or any external system relevant to the\nexperiment). Think of a probe as a view on a specific aspect of your system.\nThrough probes, you can assess the conditions of your system at a\ngiven point of your experiment.  As seen before, the Chaos Toolkit defines two kinds of probes:   steady probes: appropriate to observe the steady state of your system before\n  an action is trggered  close probes: appropriate to observe the close state after an action is \n  triggered   Both probes have the same structure and only differ about when you apply them.",
            "title": "Probe"
        },
        {
            "location": "/technology/experiment/#action",
            "text": "An action interacts with the system, either stopping or starting a service, or\nmaybe triggering a resource failure.  Although an experiment can declare many actions, it is better to keep the\nhypothesis comprehensible to make the analysis simpler and conclusive.",
            "title": "Action"
        },
        {
            "location": "/technology/experiment/#structure-schema",
            "text": "An experiment is stored in a JSON-encoded file. It has the following schema:  { \n     \"$schema\" :   \"http://json-schema.org/draft-04/schema#\" , \n     \"type\" :   \"object\" , \n     \"required\" :   [ \n         \"method\" , \n         \"title\"  \n     ], \n     \"properties\" :   { \n         \"description\" :   { \n             \"type\" :   \"string\" , \n             \"description\" :   \"Describing the Chaos experiment to provide context\" \n         }, \n         \"title\" :   { \n             \"type\" :   \"string\" , \n             \"description\" :   \"The high-level title of the Chaos experiment\" \n         }, \n         \"method\" :   { \n             \"type\" :   \"array\" , \n             \"description\" :   \"The activities to try our the hypothesis\" , \n             \"items\" :   [ \n                 {   \"$ref\" :   \"#definitions/step\"   }    \n             ] \n         } \n     }, \n     \"definitions\" :   { \n         \"step\" :   { \n             \"type\" :   \"object\" , \n             \"title\" :   \"A step of the method. Made of actions and/or probes\" , \n             \"properties\" :   { \n                 \"title\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A description of the step\" \n                 } \n             }, \n             \"additionalProperties\" :   { \n                 \"anyOf\" :   [ \n                     { \n                         \"$ref\" :   \"#/definitions/probes\" \n                     }, \n                     { \n                         \"$ref\" :   \"#/definitions/action\" \n                     } \n                 ] \n             } \n         }, \n         \"action\" :   { \n             \"type\" :   \"object\" , \n             \"description\" :   \"The hypothesis enactment\" , \n             \"required\" :   [ \n                 \"arguments\" , \n                 \"layer\" , \n                 \"title\" , \n                 \"type\" \n             ], \n             \"properties\" :   { \n                 \"arguments\" :   { \n                     \"type\" :   \"object\" , \n                     \"properties\" :   {} \n                 }, \n                 \"type\" :   { \n                     \"type\" :   \"string\" \n                 }, \n                 \"layer\" :   { \n                     \"type\" :   \"string\" \n                 }, \n                 \"title\" :   { \n                     \"type\" :   \"string\" \n                 }, \n                 \"negate\" :   { \n                     \"type\" :   \"boolean\" , \n                     \"title\" :   \"Sould the Chaos Toolkit take the opposite of the action's result?\" , \n                     \"enum\" :   [ true ,   false ] \n                 }, \n                 \"timeout\" :   { \n                     \"type\" :   \"number\" , \n                     \"title\" :   \"The maximum duration the Chaos toolkit will wait for the action to complete\" \n                 }, \n                 \"pauses\" :   { \n                     \"type\" :   \"number\" , \n                     \"title\" :   \"Pauses the Chaos toolkit may pause before or after an action\" , \n                     \"properties\" :   { \n                         \"before\" :   { \n                             \"type\" :   \"number\" , \n                             \"title\" :   \"How long before triggering the action (in seconds)\" \n                         }, \n                         \"after\" :   { \n                             \"type\" :   \"number\" , \n                             \"title\" :   \"How long after the action was triggered (in seconds)\" \n                         } \n                     } \n                 } \n             } \n         }, \n         \"probe\" :   { \n             \"type\" :   \"object\" , \n             \"oneOf\" :   [ \n                 { \n                     \"$ref\" :   \"#/definitions/python-probe\" \n                 }, \n                 { \n                     \"$ref\" :   \"#/definitions/process-probe\" \n                 }, \n                 { \n                     \"$ref\" :   \"#/definitions/http-probe\" \n                 } \n             ] \n         }, \n         \"python-probe\" :   { \n             \"type\" :   \"object\" , \n             \"required\" :   [ \n                 \"layer\" , \n                 \"title\" , \n                 \"type\" , \n                 \"module\" , \n                 \"func\" \n             ], \n             \"properties\" :   { \n                 \"type\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The kind of probe implementation\" , \n                     \"pattern\" :   \"^(python)$\" \n                 }, \n                 \"layer\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The layer the probe applies at\" , \n                     \"enum\" :   [ \n                         \"infrastructure\" , \n                         \"platform\" , \n                         \"application\" \n                     ] \n                 }, \n                 \"title\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A short description of the probe\" \n                 }, \n                 \"arguments\" :   { \n                     \"type\" :   \"object\" , \n                     \"title\" :   \"A K->V mapping that is passed as-is to the probe\" , \n                     \"properties\" :   {} \n                 }, \n                 \"negate\" :   { \n                     \"type\" :   \"boolean\" , \n                     \"title\" :   \"Sould the Chaos Toolkit take the opposite of the probe's result?\" , \n                     \"enum\" :   [ true ,   false ] \n                 }, \n                 \"module\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A Python module path the Chaos Toolkit can import at runtime\" \n                 }, \n                 \"func\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A function name exposed in the module\" \n                 } \n             } \n         }, \n         \"process-probe\" :   { \n             \"type\" :   \"object\" , \n             \"required\" :   [ \n                 \"layer\" , \n                 \"title\" , \n                 \"type\" , \n                 \"path\" \n             ], \n             \"properties\" :   { \n                 \"type\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The kind of probe implementation\" , \n                     \"pattern\" :   \"^(process)$\" \n                 }, \n                 \"layer\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The layer the probe applies at\" , \n                     \"enum\" :   [ \n                         \"infrastructure\" , \n                         \"platform\" , \n                         \"application\" \n                     ] \n                 }, \n                 \"title\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A short description of the probe\" \n                 }, \n                 \"arguments\" :   { \n                     \"type\" :   \"object\" , \n                     \"title\" :   \"A K->V mapping that is passed as-is to the probe\" , \n                     \"properties\" :   {} \n                 }, \n                 \"negate\" :   { \n                     \"type\" :   \"boolean\" , \n                     \"title\" :   \"Sould the Chaos Toolkit take the opposite of the probe's result?\" , \n                     \"enum\" :   [ true ,   false ] \n                 }, \n                 \"path\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The path to an executable to call\" \n                 } \n             } \n         }, \n         \"http-probe\" :   { \n             \"type\" :   \"object\" , \n             \"required\" :   [ \n                 \"layer\" , \n                 \"title\" , \n                 \"type\" , \n                 \"url\" \n             ], \n             \"properties\" :   { \n                 \"type\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The kind of probe implementation\" , \n                     \"pattern\" :   \"^(http)$\" \n                 }, \n                 \"layer\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"The layer the probe applies at\" , \n                     \"enum\" :   [ \n                         \"infrastructure\" , \n                         \"platform\" , \n                         \"application\" \n                     ] \n                 }, \n                 \"title\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A short description of the probe\" \n                 }, \n                 \"arguments\" :   { \n                     \"type\" :   \"object\" , \n                     \"title\" :   \"A K->V mapping that is passed as-is to the probe\" , \n                     \"properties\" :   {} \n                 }, \n                 \"url\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A deferencable URL\" \n                 }, \n                 \"method\" :   { \n                     \"type\" :   \"string\" , \n                     \"title\" :   \"A valid HTTP method\" , \n                     \"enum\" :   [ \n                         \"GET\" , \n                         \"POST\" , \n                         \"PUT\" , \n                         \"DELETE\" , \n                         \"PATCH\" \n                     ] \n                 }, \n                 \"headers\" :   { \n                     \"type\" :   \"object\" , \n                     \"properties\" :   {} \n                 }, \n                 \"negate\" :   { \n                     \"type\" :   \"boolean\" , \n                     \"title\" :   \"Sould the Chaos Toolkit take the opposite of the probe's result?\" , \n                     \"enum\" :   [ true ,   false ] \n                 } \n             } \n         }, \n         \"probes\" :   { \n             \"type\" :   \"object\" , \n             \"properties\" :   { \n                 \"steady\" :   { \n                     \"$ref\" :   \"#/definitions/probe\" \n                 }, \n                 \"close\" :   { \n                     \"$ref\" :   \"#/definitions/probe\" \n                 } \n             } \n         } \n     }  }",
            "title": "Structure Schema"
        },
        {
            "location": "/technology/extend/",
            "text": "Extend\n\u00b6\n\n\nOverview\n\u00b6\n\n\nExperiments are declared in JSON-encoded files. Probes and actions describe\nwhat should be executed by the Chaos Toolkit.\n\n\nThe ChaosToolkit does not implement probes and actions natively. Instead,\nit supports three extension mechanisms:\n\n\n\n\nPython function\n\n\nProcess\n\n\nHTTP\n\n\n\n\nIn the future, other providers will likely be added such as \nFaaS\n.\n\n\nPython function\n\u00b6\n\n\nYou can implement a probe or action as a Python function. In that case, you\ncan use any Python package your activity needs. The structure for a Python\nfunction is as follows:\n\n\n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"module\"\n:\n \n\"os.path\"\n,\n\n    \n\"func\"\n:\n \n\"exists\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n        \n\"path\"\n:\n \n\"/some/path\"\n\n    \n}\n\n\n}\n\n\n\n\n\nThe \ntype=\"python\"\n entry informs the Chaos Toolkit this is a Python function\nactivity. The \nmodule\n should be found in the Python path of the Chaos Toolkit\nprocess (its virtual environment usually). Make sure the \nfunc\n belongs to\na package that has been installed prior to running the command the toolkit will\nnot attempt to fetch it.\n\n\nThe \narguments\n object is a mapping of keys to string values that will be \npassed as-is to the function arguments. If they do not match, the Chaos Toolkit\nwill raise an error.\n\n\nProcess\n\u00b6\n\n\nThe Chaos Toolkit can run external processes, found in the PATH. The structure\nfor a process is as follows:\n\n\n{\n\n    \n\"type\"\n:\n \n\"process\"\n,\n\n    \n\"path\"\n:\n \n\"/sbin/ip\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n        \n\"-a\"\n:\n \nnull\n\n    \n}\n\n\n}\n\n\n\n\n\nThe \ntype=\"process\"\n entry informs the Chaos Toolkit this is a process activity.\nThe \npath\n indicates the executable to run. Either an absolute path or a command\nto be found in the PATH. The user running the Chaos Toolkit must have the \npermissions to execute the command.\n\n\nThe \narguments\n object is a mapping of keys to string values that will be \npassed as-is to the process as arguments.\n\n\nYou can provide a \ntimeout\n to interrupt the command at some point, in that case\nthe activity will be considered failed.\n\n\nHTTP\n\u00b6\n\n\nThe Chaos Toolkit can call HTTP endpoints.The structure for a HTTP call is as\nfollows:\n\n\n{\n\n    \n\"type\"\n:\n \n\"http\"\n,\n\n    \n\"url\"\n:\n \n\"http://httpbin.org/post\"\n,\n\n    \n\"method\"\n:\n \n\"POST\"\n,\n\n    \n\"headers\"\n:\n \n{\n\n        \n\"accept\"\n:\n \n\"application/json\"\n\n    \n},\n\n    \n\"arguments\"\n:\n \n{\n\n        \n\"name\"\n:\n \n\"john\"\n \n    \n}\n\n\n}\n\n\n\n\n\nThe \ntype=\"http\"\n entry informs the Chaos Toolkit this is a HTTP activity.\nThe \nurl\n is the only required key and indicates the endpoint to talk to. You\ncan pass \nheaders\n as well and specify the HTTP \nmethod\n to be used.\n\n\nThe \narguments\n object is a mapping of keys to string values that will be \npassed as-is to the process as arguments.\n\n\nYou can provide a \ntimeout\n to interrupt the command at some point, in that case\nthe activity will be considered failed.",
            "title": "Extend"
        },
        {
            "location": "/technology/extend/#extend",
            "text": "",
            "title": "Extend"
        },
        {
            "location": "/technology/extend/#overview",
            "text": "Experiments are declared in JSON-encoded files. Probes and actions describe\nwhat should be executed by the Chaos Toolkit.  The ChaosToolkit does not implement probes and actions natively. Instead,\nit supports three extension mechanisms:   Python function  Process  HTTP   In the future, other providers will likely be added such as  FaaS .",
            "title": "Overview"
        },
        {
            "location": "/technology/extend/#python-function",
            "text": "You can implement a probe or action as a Python function. In that case, you\ncan use any Python package your activity needs. The structure for a Python\nfunction is as follows:  { \n     \"type\" :   \"python\" , \n     \"module\" :   \"os.path\" , \n     \"func\" :   \"exists\" , \n     \"arguments\" :   { \n         \"path\" :   \"/some/path\" \n     }  }   The  type=\"python\"  entry informs the Chaos Toolkit this is a Python function\nactivity. The  module  should be found in the Python path of the Chaos Toolkit\nprocess (its virtual environment usually). Make sure the  func  belongs to\na package that has been installed prior to running the command the toolkit will\nnot attempt to fetch it.  The  arguments  object is a mapping of keys to string values that will be \npassed as-is to the function arguments. If they do not match, the Chaos Toolkit\nwill raise an error.",
            "title": "Python function"
        },
        {
            "location": "/technology/extend/#process",
            "text": "The Chaos Toolkit can run external processes, found in the PATH. The structure\nfor a process is as follows:  { \n     \"type\" :   \"process\" , \n     \"path\" :   \"/sbin/ip\" , \n     \"arguments\" :   { \n         \"-a\" :   null \n     }  }   The  type=\"process\"  entry informs the Chaos Toolkit this is a process activity.\nThe  path  indicates the executable to run. Either an absolute path or a command\nto be found in the PATH. The user running the Chaos Toolkit must have the \npermissions to execute the command.  The  arguments  object is a mapping of keys to string values that will be \npassed as-is to the process as arguments.  You can provide a  timeout  to interrupt the command at some point, in that case\nthe activity will be considered failed.",
            "title": "Process"
        },
        {
            "location": "/technology/extend/#http",
            "text": "The Chaos Toolkit can call HTTP endpoints.The structure for a HTTP call is as\nfollows:  { \n     \"type\" :   \"http\" , \n     \"url\" :   \"http://httpbin.org/post\" , \n     \"method\" :   \"POST\" , \n     \"headers\" :   { \n         \"accept\" :   \"application/json\" \n     }, \n     \"arguments\" :   { \n         \"name\" :   \"john\"  \n     }  }   The  type=\"http\"  entry informs the Chaos Toolkit this is a HTTP activity.\nThe  url  is the only required key and indicates the endpoint to talk to. You\ncan pass  headers  as well and specify the HTTP  method  to be used.  The  arguments  object is a mapping of keys to string values that will be \npassed as-is to the process as arguments.  You can provide a  timeout  to interrupt the command at some point, in that case\nthe activity will be considered failed.",
            "title": "HTTP"
        }
    ]
}