{
    "docs": [
        {
            "location": "/",
            "text": "Chaos Engineering Experiments Automation\n\u00b6\n\n\nThe Chaos Toolkit aims to be the simplest and easiest way to explore building \nyour own \nChaos Engineering\n Experiments. It \nalso aims to define a vendor and technology independent way of specifying \nChaos Engineering experiments by providing an \n\nOpen API\n.\n\n\n\n\nWe suggest you start with the \ntutorials\n to get a feel for how the Chaos\nToolkit can help you automate your Chaos Engineering effort. Once you are ready\nfor your own experiments, have a look at the various \ndriver extensions\n\nwe support, which ranges from platforms to cloud providers while giving you\ntools to observe your system as you run your experiments.\n\n\nFinally, if you cant to \ncontribute\n, you are more than welcome. Start with\n\njoining the community\n and read our references like the Open API\nwhich specifies the Chaos Toolkit experiment format.\n\n\nAbove all, have fun!",
            "title": "Home"
        },
        {
            "location": "/#chaos-engineering-experiments-automation",
            "text": "The Chaos Toolkit aims to be the simplest and easiest way to explore building \nyour own  Chaos Engineering  Experiments. It \nalso aims to define a vendor and technology independent way of specifying \nChaos Engineering experiments by providing an  Open API .   We suggest you start with the  tutorials  to get a feel for how the Chaos\nToolkit can help you automate your Chaos Engineering effort. Once you are ready\nfor your own experiments, have a look at the various  driver extensions \nwe support, which ranges from platforms to cloud providers while giving you\ntools to observe your system as you run your experiments.  Finally, if you cant to  contribute , you are more than welcome. Start with joining the community  and read our references like the Open API\nwhich specifies the Chaos Toolkit experiment format.  Above all, have fun!",
            "title": "Chaos Engineering Experiments Automation"
        },
        {
            "location": "/reference/usage/install/",
            "text": "How to Install the Chaos Toolkit\n\u00b6\n\n\n\n\n\nPython Requirements\n\u00b6\n\n\nThe \nchaostoolkit CLI\n is implemented in Python 3 and this requires a\nworking Python installation to run. It officially supports Python 3.5+. It has\nonly been tested against [CPython][python].\n\n\nInstall Python\n\u00b6\n\n\nInstall Python for your system:\n\n\nOn MacOS X:\n\n\n$ brew install python3\n\n\n\n\nOn Debian/Ubuntu:\n\n\n$ sudo apt-get install python3 python3-venv\n\n\n\n\nOn CentOS:\n\n\n$ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35u\n\n\n\n\nNotice, on CentOS, the Python 3.5 binary is named \npython3.5\n rather than\n\npython3\n as other systems.\n\n\nOn Windows:\n\n\nDownload the latest binary installer\n from the Python website.\n\n\nCreate a virtual environment\n\u00b6\n\n\nDependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.\n\n\n$ python3 -m venv ~/.venvs/chaostk\n\n\n\n\nMake sure to always activate your virtual environment before using it:\n\n\n$ source  ~/.venvs/chaostk/bin/activate\n\n\n\n\n\n\nTip\n\n\nYou may want to use \nvirtualenvwrapper\n to make this process much nicer.\n\n\n\n\nInstall the CLI\n\u00b6\n\n\nInstall \nchaostoolkit\n in the virtual environment as follows:\n\n\n(chaostk) $ pip install chaostoolkit\n\n\n\n\nYou can verify the command was installed by running:\n\n\n(chaostk) $ chaos --version\n\n\n\n\nInstall Extensions\n\u00b6\n\n\nAt this stage, you have installed the \nchaos\n command line and its core\nlibrary. To fully enjoy the Chaos Toolkit, you will also want to install\n\nextensions\n for the various facets of your journey into Chaos Engineering.",
            "title": "Install"
        },
        {
            "location": "/reference/usage/install/#how-to-install-the-chaos-toolkit",
            "text": "",
            "title": "How to Install the Chaos Toolkit"
        },
        {
            "location": "/reference/usage/install/#python-requirements",
            "text": "The  chaostoolkit CLI  is implemented in Python 3 and this requires a\nworking Python installation to run. It officially supports Python 3.5+. It has\nonly been tested against [CPython][python].",
            "title": "Python Requirements"
        },
        {
            "location": "/reference/usage/install/#install-python",
            "text": "Install Python for your system:  On MacOS X:  $ brew install python3  On Debian/Ubuntu:  $ sudo apt-get install python3 python3-venv  On CentOS:  $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35u  Notice, on CentOS, the Python 3.5 binary is named  python3.5  rather than python3  as other systems.  On Windows:  Download the latest binary installer  from the Python website.",
            "title": "Install Python"
        },
        {
            "location": "/reference/usage/install/#create-a-virtual-environment",
            "text": "Dependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.  $ python3 -m venv ~/.venvs/chaostk  Make sure to always activate your virtual environment before using it:  $ source  ~/.venvs/chaostk/bin/activate   Tip  You may want to use  virtualenvwrapper  to make this process much nicer.",
            "title": "Create a virtual environment"
        },
        {
            "location": "/reference/usage/install/#install-the-cli",
            "text": "Install  chaostoolkit  in the virtual environment as follows:  (chaostk) $ pip install chaostoolkit  You can verify the command was installed by running:  (chaostk) $ chaos --version",
            "title": "Install the CLI"
        },
        {
            "location": "/reference/usage/install/#install-extensions",
            "text": "At this stage, you have installed the  chaos  command line and its core\nlibrary. To fully enjoy the Chaos Toolkit, you will also want to install extensions  for the various facets of your journey into Chaos Engineering.",
            "title": "Install Extensions"
        },
        {
            "location": "/reference/usage/upgrade/",
            "text": "How to Upgrade the Chaos Toolkit\n\u00b6\n\n\nYou can update your Chaos Toolkit installation by executing:\n\n\n(chaostk) $ pip install -U chaostoolkit",
            "title": "Upgrade"
        },
        {
            "location": "/reference/usage/upgrade/#how-to-upgrade-the-chaos-toolkit",
            "text": "You can update your Chaos Toolkit installation by executing:  (chaostk) $ pip install -U chaostoolkit",
            "title": "How to Upgrade the Chaos Toolkit"
        },
        {
            "location": "/reference/usage/cli/",
            "text": "The heart of the Chaos Toolkit is the \nchaos\n command line.\n\n\n\n\nActivate the Python virtual environment\n\n\nIf you run the Chaos Toolkit directly, rather than using a container,\nalways ensure you have activated the virtual environment so that it can\nbe found along its dependencies:\n\n\n$ source ~/.venvs/chaostk/bin/activate\n(chaostk) $\n\n\n\n\n\n\nOnce \ninstalled\n, the Chaos Toolkit CLI will display the commands it supports \nby executing:\n\n\n(chaostk) $ chaos --help\n\n\n\n\nConfigure the Chaos Toolkit\n\u00b6\n\n\nFor the most part, the Chaos Toolkit does not necessitate to be configured.\nThese settings are stored in a YAML file on your local machine.\n\n\n\n\nTip\n\n\nUnless you enable one of the features requiring extra configuration,\nyou don\u2019t need to create that file.\n\n\n\n\nCreate The Settings File\n\u00b6\n\n\nThe settings file for the Chaos Toolkit should be located under the following\npath:\n\n\n$HOME/.chaostoolkit/settings.yaml\n\n\n\n\nAs this file may hold sensitive data, it is advised to make it readable only\nfor your own user:\n\n\nchmod 600 $HOME/.chaostoolkit/settings.yaml\n\n\n\n\nFeatures Settings\n\u00b6\n\n\nThe settings file entries depend on which features you wish to enable.\n\n\nNotification\n\u00b6\n\n\nIf you want to get notified of the Chaos Toolkit events, you should set the\nfollowing section:\n\n\nnotifications:\n -\n  type: http\n  url: https://mystuff.com/api\n  verify_tls: false\n  headers:\n    Auth: \"Bearer 1234\"\n\n\n\n\nThis entry is a list of mapping. Each item of this list defines one channel\nof notification, and potentially which events this channel should receive.\n\n\nPlease refer to the \nnotifications\n section for more\ninformation.\n\n\nHow to Investigate Issues\n\u00b6\n\n\nWhen your experiment fails to work as you would expect, you should start\nlooking at the \nchaostoolkit.log\n file written to by the \nchaos\n command.\n\n\nThis file contains a lot of traces from the Chaos Toolkit core but also any\nextensions that used the toolkit\u2019s logger.\n\n\nAs new logs are appended to that file, it may grow big. Do not hesitate to\nwipe it out from time to time.\n\n\nPlease, do make sure to visit our \nSlack\n or \nGitHub\n when you have\na question around how the toolkit does things. The community will be pleased\nto help you out.",
            "title": "Overview"
        },
        {
            "location": "/reference/usage/cli/#configure-the-chaos-toolkit",
            "text": "For the most part, the Chaos Toolkit does not necessitate to be configured.\nThese settings are stored in a YAML file on your local machine.   Tip  Unless you enable one of the features requiring extra configuration,\nyou don\u2019t need to create that file.",
            "title": "Configure the Chaos Toolkit"
        },
        {
            "location": "/reference/usage/cli/#create-the-settings-file",
            "text": "The settings file for the Chaos Toolkit should be located under the following\npath:  $HOME/.chaostoolkit/settings.yaml  As this file may hold sensitive data, it is advised to make it readable only\nfor your own user:  chmod 600 $HOME/.chaostoolkit/settings.yaml",
            "title": "Create The Settings File"
        },
        {
            "location": "/reference/usage/cli/#features-settings",
            "text": "The settings file entries depend on which features you wish to enable.",
            "title": "Features Settings"
        },
        {
            "location": "/reference/usage/cli/#notification",
            "text": "If you want to get notified of the Chaos Toolkit events, you should set the\nfollowing section:  notifications:\n -\n  type: http\n  url: https://mystuff.com/api\n  verify_tls: false\n  headers:\n    Auth: \"Bearer 1234\"  This entry is a list of mapping. Each item of this list defines one channel\nof notification, and potentially which events this channel should receive.  Please refer to the  notifications  section for more\ninformation.",
            "title": "Notification"
        },
        {
            "location": "/reference/usage/cli/#how-to-investigate-issues",
            "text": "When your experiment fails to work as you would expect, you should start\nlooking at the  chaostoolkit.log  file written to by the  chaos  command.  This file contains a lot of traces from the Chaos Toolkit core but also any\nextensions that used the toolkit\u2019s logger.  As new logs are appended to that file, it may grow big. Do not hesitate to\nwipe it out from time to time.  Please, do make sure to visit our  Slack  or  GitHub  when you have\na question around how the toolkit does things. The community will be pleased\nto help you out.",
            "title": "How to Investigate Issues"
        },
        {
            "location": "/reference/usage/discover/",
            "text": "The \nchaos discover\n command\n\u00b6\n\n\nYou use the \nchaos discover\n command to specify a Chaos Toolkit integration extension and,\nif supported by the integration, to then explore your target environment in order \nto build a \ndiscovery report\n that can be used by the \nchaos init\n command to help \nyou bootstrap your own chaos engineering experiments.\n\n\nYou can see the options available to you by executing:\n\n\n(chaostk) $ chaos discover --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos discover\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nDiscovering capabilities and experiments\n\u00b6\n\n\nTo execute discover all you need to do is specify the Chaos Toolkit integration \nextension that you\u2019d like to use, for example to use Kubernetes:\n\n\n(chaostk) $ chaos discover chaostoolkit-kubernetes\n\n\n\n\n\n\n\nThe \nchaos discover\n command will produce a report saved in \n./discovery.json\n by default, \nalthough you can specify where this report is produced by supplying the \n\n--discovery-report-path\n option.\n\n\nDiscovery without System Information\n\u00b6\n\n\nTo not probe the target system during the discovery process you can supply the \n\n--no-system-info\n option.\n\n\nDiscovery without Installation of an Integration Extension\n\u00b6\n\n\nIf you already have the integration extension installed and available you can \nspeed up the discovery process by specifying the \n--no-install\n option.",
            "title": "Discover"
        },
        {
            "location": "/reference/usage/discover/#the-chaos-discover-command",
            "text": "You use the  chaos discover  command to specify a Chaos Toolkit integration extension and,\nif supported by the integration, to then explore your target environment in order \nto build a  discovery report  that can be used by the  chaos init  command to help \nyou bootstrap your own chaos engineering experiments.  You can see the options available to you by executing:  (chaostk) $ chaos discover --help   A tutorial on how to use the  chaos discover  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos discover command"
        },
        {
            "location": "/reference/usage/discover/#discovering-capabilities-and-experiments",
            "text": "To execute discover all you need to do is specify the Chaos Toolkit integration \nextension that you\u2019d like to use, for example to use Kubernetes:  (chaostk) $ chaos discover chaostoolkit-kubernetes   The  chaos discover  command will produce a report saved in  ./discovery.json  by default, \nalthough you can specify where this report is produced by supplying the  --discovery-report-path  option.",
            "title": "Discovering capabilities and experiments"
        },
        {
            "location": "/reference/usage/discover/#discovery-without-system-information",
            "text": "To not probe the target system during the discovery process you can supply the  --no-system-info  option.",
            "title": "Discovery without System Information"
        },
        {
            "location": "/reference/usage/discover/#discovery-without-installation-of-an-integration-extension",
            "text": "If you already have the integration extension installed and available you can \nspeed up the discovery process by specifying the  --no-install  option.",
            "title": "Discovery without Installation of an Integration Extension"
        },
        {
            "location": "/reference/usage/init/",
            "text": "The \nchaos init\n command\n\u00b6\n\n\nYou use the \nchaos init\n command to take a \ndiscovery report\n, usually created \nby the \nchaos discover\n command, to then create an experiment based upon \nwhat has been discovered about the integration extension and, if applicable, \nthe target environment.\n\n\nYou can see the options available to you by executing:\n\n\n(chaostk) $ chaos init --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos init\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nInitialise a new experiment\n\u00b6\n\n\nTo initialise a new experiment based on what has been \ndiscovered\n \nyou simply need to execute the \nchaos init\n command:\n\n\n(chaostk) $ chaos init\n\n\n\n\n\n\n\nBy default, the \nchaos init\n command will look for a \n./discovery.json\n \nfile and use that as the basis of a new experiment\u2019s initialisation.\n\n\nYou can specify another file to be used by suppling the \n\n--discovery-report-path\n option.\n\n\nIn addition the default output from the \ninit\n command will be a new \nChaos Toolkit experiment definition in a \n./experiment.json\n file. If you would \nprefer a different filename then this can be specified using the \n\n--experiment-path\n option.",
            "title": "Init"
        },
        {
            "location": "/reference/usage/init/#the-chaos-init-command",
            "text": "You use the  chaos init  command to take a  discovery report , usually created \nby the  chaos discover  command, to then create an experiment based upon \nwhat has been discovered about the integration extension and, if applicable, \nthe target environment.  You can see the options available to you by executing:  (chaostk) $ chaos init --help   A tutorial on how to use the  chaos init  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos init command"
        },
        {
            "location": "/reference/usage/init/#initialise-a-new-experiment",
            "text": "To initialise a new experiment based on what has been  discovered  \nyou simply need to execute the  chaos init  command:  (chaostk) $ chaos init   By default, the  chaos init  command will look for a  ./discovery.json  \nfile and use that as the basis of a new experiment\u2019s initialisation.  You can specify another file to be used by suppling the  --discovery-report-path  option.  In addition the default output from the  init  command will be a new \nChaos Toolkit experiment definition in a  ./experiment.json  file. If you would \nprefer a different filename then this can be specified using the  --experiment-path  option.",
            "title": "Initialise a new experiment"
        },
        {
            "location": "/reference/usage/run/",
            "text": "The \nchaos run\n command\n\u00b6\n\n\nYou use the \nchaos run\n command to execute your declarative chaos engineering \nexperiments. To see the options that can be passed to the \nchaos run\n command, \nexecute:\n\n\n(chaostk) $ chaos run --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos run\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nExecuting an Experiment Plan\n\u00b6\n\n\nTo execute an experiment plan you simply pass it to the \nchaos run\n command:\n\n\n(chaostk) $ chaos run experiment.json\n\n\n\n\n\n\n\nchaostoolkit\n will log all the steps it follows from your plan in a journal by \ndefault called \nchaos-report.json\n. You can specify the name of this journal \noutput file using the \n--report-path\n option.\n\n\nRehearsing an experiment execution\n\u00b6\n\n\nTo test that you have a valid experiment you can pass the \n--dry\n option.\n\n\nRun an experiment without validation\n\u00b6\n\n\nYou can run an experiment and skip the experiment\u2019s validation using the \n\n--no-validation\n option.",
            "title": "Run"
        },
        {
            "location": "/reference/usage/run/#the-chaos-run-command",
            "text": "You use the  chaos run  command to execute your declarative chaos engineering \nexperiments. To see the options that can be passed to the  chaos run  command, \nexecute:  (chaostk) $ chaos run --help   A tutorial on how to use the  chaos run  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos run command"
        },
        {
            "location": "/reference/usage/run/#executing-an-experiment-plan",
            "text": "To execute an experiment plan you simply pass it to the  chaos run  command:  (chaostk) $ chaos run experiment.json   chaostoolkit  will log all the steps it follows from your plan in a journal by \ndefault called  chaos-report.json . You can specify the name of this journal \noutput file using the  --report-path  option.",
            "title": "Executing an Experiment Plan"
        },
        {
            "location": "/reference/usage/run/#rehearsing-an-experiment-execution",
            "text": "To test that you have a valid experiment you can pass the  --dry  option.",
            "title": "Rehearsing an experiment execution"
        },
        {
            "location": "/reference/usage/run/#run-an-experiment-without-validation",
            "text": "You can run an experiment and skip the experiment\u2019s validation using the  --no-validation  option.",
            "title": "Run an experiment without validation"
        },
        {
            "location": "/reference/usage/report/",
            "text": "The \nchaos report\n command\n\u00b6\n\n\nYou use the \nchaos report\n command to take the journal produced by the \n\nchaos run\n command and produce a report in a specified format.\n\n\nDue to the many operating system-dependent features that the \nchaos report\n \ncommand relies upon, the \nchaos report\n command is not installed with the \nChaos Toolkit CLI. To install the \nchaos report\n command you need to \ninstall \nthe \nchaostoolkit-reporting\n plugin and the dependencies appropriate to your \nown operating system\n.\n\n\nOnce the plugin is installed you can see the options available to you by \nexecuting:\n\n\n(chaostk) $ chaos report --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos report\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nGenerating a report\n\u00b6\n\n\nWhen an experiment completes after using the \nchaos run\n command a journal is \ngenerated and stored in the \nchaos-report.json\n file. A PDF or HTML report may \nbe generated from this journal using the \nchaostoolkit-reporting\n \nlibrary.\n\n\nThe \nchaos report\n command expects the path to the \nchaos-report.json\n file \nand a path to the actual report file that you require.\n\n\nYou can export various formats of report by specifying what you want using the \n\n--export-format\n option.\n\n\nFor example, to generate a PDF report you can run the following command:\n\n\n$ chaos report --export-format=pdf chaos-report.json report.pdf\n\n\n\n\nAn HTML report can be produced using:\n\n\n$ chaos report --export-format=html5 chaos-report.json report.html",
            "title": "Report"
        },
        {
            "location": "/reference/usage/report/#the-chaos-report-command",
            "text": "You use the  chaos report  command to take the journal produced by the  chaos run  command and produce a report in a specified format.  Due to the many operating system-dependent features that the  chaos report  \ncommand relies upon, the  chaos report  command is not installed with the \nChaos Toolkit CLI. To install the  chaos report  command you need to  install \nthe  chaostoolkit-reporting  plugin and the dependencies appropriate to your \nown operating system .  Once the plugin is installed you can see the options available to you by \nexecuting:  (chaostk) $ chaos report --help   A tutorial on how to use the  chaos report  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos report command"
        },
        {
            "location": "/reference/usage/report/#generating-a-report",
            "text": "When an experiment completes after using the  chaos run  command a journal is \ngenerated and stored in the  chaos-report.json  file. A PDF or HTML report may \nbe generated from this journal using the  chaostoolkit-reporting  \nlibrary.  The  chaos report  command expects the path to the  chaos-report.json  file \nand a path to the actual report file that you require.  You can export various formats of report by specifying what you want using the  --export-format  option.  For example, to generate a PDF report you can run the following command:  $ chaos report --export-format=pdf chaos-report.json report.pdf  An HTML report can be produced using:  $ chaos report --export-format=html5 chaos-report.json report.html",
            "title": "Generating a report"
        },
        {
            "location": "/reference/usage/notification/",
            "text": "Get Notifications From The Chaos Toolkit Flow\n\u00b6\n\n\nThe Chaos Toolkit generates events when it is executed. You may benefit from\nthose events to get notified via your chosen notification channels.\n\n\nChaos Toolkit Flow Events\n\u00b6\n\n\nThe Chaos Toolkit defines the following events:\n\n\nDiscovery flow\n\n\n\n\n\"discover-started\"\n: when the discovery flow has begun\n\n\n\"discover-completed\"\n: when the discovery flow has completed\n\n\n\"discover-failed\"\n: when the discovery flow has failed\n\n\n\n\nInit flow\n\n\n\n\n\"init-started\"\n: when the init flow has begun\n\n\n\"init-completed\"\n: when the init flow has completed\n\n\n\"init-failed\"\n: when the init flow has failed\n\n\n\n\nRun flow\n\n\n\n\n\"run-started\"\n: when the run flow has begun\n\n\n\"run-completed\"\n: when the run flow has completed\n\n\n\"run-failed\"\n: when the run flow has failed\n\n\n\n\nValidate flow\n\n\n\n\n\"validate-started\"\n: when the validate flow has begun\n\n\n\"validate-completed\"\n: when the validate flow has completed\n\n\n\"validate-failed\"\n: when the validate flow has failed\n\n\n\n\nDeclare Notification Channels\n\u00b6\n\n\nNotification channels are declared in the Chaos Toolkit\n\nsettings file\n under the \nnotifications:\n\nsection.\n\n\nHere is an example:\n\n\nnotifications\n:\n\n \n-\n\n  \ntype\n:\n \nhttp\n\n  \nurl\n:\n \nhttps://mystuff.com/api\n\n  \nverify_tls\n:\n \nfalse\n\n  \nheaders\n:\n\n    \nAuthorization\n:\n \n\"Bearer\n \n1234\"\n\n \n-\n\n  \ntype\n:\n \nplugin\n\n  \nmodule\n:\n \nchaosslack.notification\n\n  \ntoken\n:\n \nxop-1235\n\n  \nchannel\n:\n \ngeneral\n\n\n\n\n\nAs you can see, channels are items in a list. Each channel is a mapping\ndescribing the kind of channel and its required information.\n\n\nFor instance, here we have two channels. The first one is a call to the HTTPS\nendpoint while the other one uses the \nChaos Toolkit Extension for Slack\n\nto send messages to Slack channels.\n\n\n\n\nWarning\n\n\nNotification channels are run sequential to the whole chaos flow, so the\nmore you declare, the bigger the impact they could have on the readibility\nof the experiment results.\n\n\n\n\nFilter Events\n\u00b6\n\n\nBy default, all \nevents\n are sent to the channels.\nHowever, you may decide, on a per channel basis, which events you want to be\nsent. This is done by adding the \nevents\n field to a channel:\n\n\nnotifications\n:\n\n \n-\n\n  \ntype\n:\n \nplugin\n\n  \nmodule\n:\n \nchaosslack.notification\n\n  \ntoken\n:\n \nxop-1235\n\n  \nchannel\n:\n \ngeneral\n\n  \nevents\n:\n\n    \n-\n \nrun-failed\n\n\n\n\n\nThe Slack channel will only receive events when a run experiment fails. This\nis a list so declare as many events as you need.\n\n\nHTTP Notification Channel\n\u00b6\n\n\nA HTTP notification channel tells the Chaos Toolkit it must send the event\nover HTTP (or HTTPS) to the given endpoint. Here is the description of its\nfields:\n\n\n\n\ntype\n: must \n\"http\"\n (required)\n\n\nurl\n: the endpoint address (required)\n\n\nverify_tls\n: \ntrue|false\n depending if the endpoint certificates are\n  self-signed\n\n\nheaders\n: a mapping where the keys are header names and their associated\n  values\n\n\nforward_event_payload\n: \ntrue|false\n. If \ntrue\n, the default, then the event\n  payload is sent to that endpoint in a \nPOST\n request. Otherwise, a \nGET\n\n  request is performed with no body\n\n\n\n\nPlugin Notification Channel\n\u00b6\n\n\nA plugin notification channel is an integration between an external system and\nthe Chaos Toolkit event notification flow. It is more capable than basic HTTP\nchannels as they are fully fledged Python functions.\n\n\n\n\nWarning\n\n\nA plugin channel could also be understood as a hook point into the Chaos\nToolkit flow. Nothing prevents you from writing a plugin that performs\noperations based on those hook events. Please note however that they run\nsequentially to the whole flow, so the longer your operation takes, the\nlonger it takes for your chaos experiment to carry on. This may invalidate\ncertain experiments when timing is critical.\n\n\n\n\nHere are the fields to declare one:\n\n\n\n\ntype\n: must \n\"plugin\"\n (required)\n\n\nmodule\n: the dotted path to the Python module containing the function to\n  apply (required)\n\n\nfunc\n: the name of the function to apply (in that module), defaults to\n  \n\"notify\"\n\n\n\n\nAny other fields will be passed on as-is to the function for its internal usage.\nFor instance:\n\n\nnotifications\n:\n\n \n-\n\n  \ntype\n:\n \nplugin\n\n  \nmodule\n:\n \nchaosslack.notification\n\n  \ntoken\n:\n \nxop-1235\n\n  \nchannel\n:\n \ngeneral\n\n\n\n\n\nThe \ntoken\n and \nchannel\n fields will be provided directly to the \nnotify\n\nfunction of the \nchaosslack.notification\n module.\n\n\nSend Notifications To Slack\n\u00b6\n\n\nNotifying about Chaos Experiment in a slack channel is so common that we will\ndescribe this integration here.\n\n\nFirst, you must install the \nChaos Toolkit Integration for Slack\n as usual:\n\n\n(chaostk) $\n pip install -U chaostoolkit-slack\n\n\n\n\nThen, you should declare your notification channels as follows in the Chaos\nToolkit settings file.\n\n\nnotifications\n:\n\n \n-\n\n  \ntype\n:\n \nplugin\n\n  \nmodule\n:\n \nchaosslack.notification\n\n  \ntoken\n:\n \nxop-1235\n\n  \nchannel\n:\n \ngeneral\n\n\n\n\n\nYou may define as many channels as you need, for instance for different kind\nof events.\n\n\nThe \ntoken\n and \nchannel\n fields are mandatory in this case. The \ntoken\n field\nmust be set to a valid Slack token. You may start with a \nlegacy token\n\nbefore moving on to a \nSlack App\n as per Slack \nguidelines\n.\n\n\nThe Chaos Toolkit itself does not provide a Slack App at this moment.\n\n\nThe channel must be a name of an existing channel. The\npayload message sent to Slack is defined in the \nplugin\n. If you need to\namend it, please open an \nissue\n there.\n\n\nDebugging Notifications\n\u00b6\n\n\nThe Chaos Toolkit does its best to not break the experiment when an event\ncould not be pushed. If you do not see the notification you were expecting,\nyou should start investigating in the \nchaostoolkit.og\n file. Indeed, in that\ncase the error is logged at the \nDEBUG\n level with, hopefully, enough\ninformation why the event could not be sent.\n\n\nIf the error occurs inside the core Chaos Toolkit library, please raise an\n\nissue there\n. Otherwise, raise an issue with the appropriate\nplugin.",
            "title": "Notify"
        },
        {
            "location": "/reference/usage/notification/#get-notifications-from-the-chaos-toolkit-flow",
            "text": "The Chaos Toolkit generates events when it is executed. You may benefit from\nthose events to get notified via your chosen notification channels.",
            "title": "Get Notifications From The Chaos Toolkit Flow"
        },
        {
            "location": "/reference/usage/notification/#chaos-toolkit-flow-events",
            "text": "The Chaos Toolkit defines the following events:  Discovery flow   \"discover-started\" : when the discovery flow has begun  \"discover-completed\" : when the discovery flow has completed  \"discover-failed\" : when the discovery flow has failed   Init flow   \"init-started\" : when the init flow has begun  \"init-completed\" : when the init flow has completed  \"init-failed\" : when the init flow has failed   Run flow   \"run-started\" : when the run flow has begun  \"run-completed\" : when the run flow has completed  \"run-failed\" : when the run flow has failed   Validate flow   \"validate-started\" : when the validate flow has begun  \"validate-completed\" : when the validate flow has completed  \"validate-failed\" : when the validate flow has failed",
            "title": "Chaos Toolkit Flow Events"
        },
        {
            "location": "/reference/usage/notification/#declare-notification-channels",
            "text": "Notification channels are declared in the Chaos Toolkit settings file  under the  notifications: \nsection.  Here is an example:  notifications : \n  - \n   type :   http \n   url :   https://mystuff.com/api \n   verify_tls :   false \n   headers : \n     Authorization :   \"Bearer   1234\" \n  - \n   type :   plugin \n   module :   chaosslack.notification \n   token :   xop-1235 \n   channel :   general   As you can see, channels are items in a list. Each channel is a mapping\ndescribing the kind of channel and its required information.  For instance, here we have two channels. The first one is a call to the HTTPS\nendpoint while the other one uses the  Chaos Toolkit Extension for Slack \nto send messages to Slack channels.   Warning  Notification channels are run sequential to the whole chaos flow, so the\nmore you declare, the bigger the impact they could have on the readibility\nof the experiment results.",
            "title": "Declare Notification Channels"
        },
        {
            "location": "/reference/usage/notification/#filter-events",
            "text": "By default, all  events  are sent to the channels.\nHowever, you may decide, on a per channel basis, which events you want to be\nsent. This is done by adding the  events  field to a channel:  notifications : \n  - \n   type :   plugin \n   module :   chaosslack.notification \n   token :   xop-1235 \n   channel :   general \n   events : \n     -   run-failed   The Slack channel will only receive events when a run experiment fails. This\nis a list so declare as many events as you need.",
            "title": "Filter Events"
        },
        {
            "location": "/reference/usage/notification/#http-notification-channel",
            "text": "A HTTP notification channel tells the Chaos Toolkit it must send the event\nover HTTP (or HTTPS) to the given endpoint. Here is the description of its\nfields:   type : must  \"http\"  (required)  url : the endpoint address (required)  verify_tls :  true|false  depending if the endpoint certificates are\n  self-signed  headers : a mapping where the keys are header names and their associated\n  values  forward_event_payload :  true|false . If  true , the default, then the event\n  payload is sent to that endpoint in a  POST  request. Otherwise, a  GET \n  request is performed with no body",
            "title": "HTTP Notification Channel"
        },
        {
            "location": "/reference/usage/notification/#plugin-notification-channel",
            "text": "A plugin notification channel is an integration between an external system and\nthe Chaos Toolkit event notification flow. It is more capable than basic HTTP\nchannels as they are fully fledged Python functions.   Warning  A plugin channel could also be understood as a hook point into the Chaos\nToolkit flow. Nothing prevents you from writing a plugin that performs\noperations based on those hook events. Please note however that they run\nsequentially to the whole flow, so the longer your operation takes, the\nlonger it takes for your chaos experiment to carry on. This may invalidate\ncertain experiments when timing is critical.   Here are the fields to declare one:   type : must  \"plugin\"  (required)  module : the dotted path to the Python module containing the function to\n  apply (required)  func : the name of the function to apply (in that module), defaults to\n   \"notify\"   Any other fields will be passed on as-is to the function for its internal usage.\nFor instance:  notifications : \n  - \n   type :   plugin \n   module :   chaosslack.notification \n   token :   xop-1235 \n   channel :   general   The  token  and  channel  fields will be provided directly to the  notify \nfunction of the  chaosslack.notification  module.",
            "title": "Plugin Notification Channel"
        },
        {
            "location": "/reference/usage/notification/#send-notifications-to-slack",
            "text": "Notifying about Chaos Experiment in a slack channel is so common that we will\ndescribe this integration here.  First, you must install the  Chaos Toolkit Integration for Slack  as usual:  (chaostk) $  pip install -U chaostoolkit-slack  Then, you should declare your notification channels as follows in the Chaos\nToolkit settings file.  notifications : \n  - \n   type :   plugin \n   module :   chaosslack.notification \n   token :   xop-1235 \n   channel :   general   You may define as many channels as you need, for instance for different kind\nof events.  The  token  and  channel  fields are mandatory in this case. The  token  field\nmust be set to a valid Slack token. You may start with a  legacy token \nbefore moving on to a  Slack App  as per Slack  guidelines .  The Chaos Toolkit itself does not provide a Slack App at this moment.  The channel must be a name of an existing channel. The\npayload message sent to Slack is defined in the  plugin . If you need to\namend it, please open an  issue  there.",
            "title": "Send Notifications To Slack"
        },
        {
            "location": "/reference/usage/notification/#debugging-notifications",
            "text": "The Chaos Toolkit does its best to not break the experiment when an event\ncould not be pushed. If you do not see the notification you were expecting,\nyou should start investigating in the  chaostoolkit.og  file. Indeed, in that\ncase the error is logged at the  DEBUG  level with, hopefully, enough\ninformation why the event could not be sent.  If the error occurs inside the core Chaos Toolkit library, please raise an issue there . Otherwise, raise an issue with the appropriate\nplugin.",
            "title": "Debugging Notifications"
        },
        {
            "location": "/reference/tutorial/",
            "text": "A simple Walkthrough\n\u00b6\n\n\nWhen you practice chaos engineering, you are discovering how your system\nreacts following certain conditions you inject. By doing this in a controlled\nfashion, you may learn how to change the system accordingly.\n\n\nThis tutorial will quickly give you a tour of the basic elements of an\nexperiment.\n\n\n\n\nTip\n\n\nYou will find interactive tutorials on the \nKataCoda platform\n as\nwell.\n\n\n\n\nGet Ready\n\u00b6\n\n\nBefore you can run the experiment against your system, you will need to have\nit setup.\n\n\nGet the Code\n\u00b6\n\n\nThe code can be found \nhere\n.\n\n\nInstall the Chaos Toolkit\n\u00b6\n\n\nYou must install the Chaos Toolkit and its dependencies for the purpose of this\ntutorial. While we suggest you go through the \ninstall\n section, it boils\ndown to:\n\n\n$\n pip install -U chaostoolkit\n\n\n\n\nThird-party binaries\n\u00b6\n\n\nThe experiment will use the following binaries, make sure you have them in your\nPATH:\n\n\n\n\nopenssl\n\n\npkill\n\n\n\n\nInstall the Application dependencies\n\u00b6\n\n\nOur application is made of a simple set of two microservices that converse\nwith each other over HTTPS.\n\n\nAs you should already run Python 3 for the toolkit itself, we assume you are set\naccordingly, please install only the application dependencies:\n\n\n$\n pip install -U -r requirements.txt\n\n\n\n\nYour First Experiment\n\u00b6\n\n\nExplore a Potential Weakness\n\u00b6\n\n\nSo, looking at our application, what could we consider as of interest to\ndiscover through an experiment? Well, we are using HTTPS between the two\nservices in our application, what if the certificate expired?\n\n\n\n\nTip\n\n\nIn such a simple setup, we appreciate that things will likely break and, in\ngeneral there is no point to run an experiment when you already know the\noutcome. However, let\u2019s humour ourselves for the sake of learning the\nbasics behind the Chaos Toolkit.\n\n\n\n\nWe can intuit things will fall apart if the sunset service cannot talk the\nastre service but, should the chain be part of much more complex graph of\nservices, it could be difficult to fully understand all the branches that\nwould be affected nor how badly. So, it may still be useful to experiment by\ninjecting an expired certificate.\n\n\nDefine the Steady State Hypothesis\n\u00b6\n\n\nYou can only learn if you know where you start from and what a good baseline\nfor your application is.\n\n\nHere we assume two things:\n\n\n\n\nthe services are running\n\n\nwe can call the sunset service to retrieve the sunset time for a given city\n\n\n\n\nDuring our experiment, we will vary the conditions of the system and expect the\nstate to remain valid.\n\n\nChanging the Conditions\n\u00b6\n\n\nIn this tutorial, we are going to set an expired certificate and restart the\nservices. We will then call our application and see how its response.\n\n\nDeclare an Experiment to Observe the Weakness\n\u00b6\n\n\nAt this stage, we can create an experiment that tells how the system behaves\nwhen a certificate expires.\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"What is the impact of an expired certificate on our application chain?\"\n,\n\n    \n\"description\"\n:\n \n\"If a certificate expires, we should gracefully deal with the issue.\"\n,\n\n    \n\"tags\"\n:\n \n[\n\"tls\"\n],\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"Application responds\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"the-astre-service-must-be-running\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"python\"\n,\n\n                    \n\"module\"\n:\n \n\"os.path\"\n,\n\n                    \n\"func\"\n:\n \n\"exists\"\n,\n\n                    \n\"arguments\"\n:\n \n{\n\n                        \n\"path\"\n:\n \n\"astre.pid\"\n\n                    \n}\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"the-sunset-service-must-be-running\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"python\"\n,\n\n                    \n\"module\"\n:\n \n\"os.path\"\n,\n\n                    \n\"func\"\n:\n \n\"exists\"\n,\n\n                    \n\"arguments\"\n:\n \n{\n\n                        \n\"path\"\n:\n \n\"sunset.pid\"\n\n                    \n}\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"we-can-request-sunset\"\n,\n\n                \n\"tolerance\"\n:\n \n200\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"http\"\n,\n\n                    \n\"timeout\"\n:\n \n3\n,\n\n                    \n\"verify_tls\"\n:\n \nfalse\n,\n\n                    \n\"url\"\n:\n \n\"https://localhost:8443/city/Paris\"\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"swap-to-expired-cert\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"cp\"\n,\n\n                \n\"arguments\"\n:\n \n\"expired-cert.pem cert.pem\"\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"read-tls-cert-expiry-date\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"openssl\"\n,\n\n                \n\"arguments\"\n:\n \n\"x509 -enddate -noout -in cert.pem\"\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"restart-astre-service-to-pick-up-certificate\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"pkill\"\n,\n\n                \n\"arguments\"\n:\n \n\"--echo -HUP -F astre.pid\"\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"restart-sunset-service-to-pick-up-certificate\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"pkill\"\n,\n\n                \n\"arguments\"\n:\n \n\"--echo -HUP -F sunset.pid\"\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n1\n\n            \n}\n\n        \n}\n\n    \n],\n\n    \n\"rollbacks\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"swap-to-vald-cert\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"cp\"\n,\n\n                \n\"arguments\"\n:\n \n\"valid-cert.pem cert.pem\"\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"restart-astre-service-to-pick-up-certificate\"\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"restart-sunset-service-to-pick-up-certificate\"\n\n        \n}\n\n    \n]\n\n\n\n\n\nThe Various Sections of an Experiment\n\u00b6\n\n\nLet\u2019s now go through the experiment blocks.\n\n\nThe steady state hypothesis declares the various probes that will be applied\nas part of the hypothesis check.\n\n\nThe hypothesis is played twice. The first time before we do anything else to\nensure the system is indeed in a normal state, here we check the services are\nrunning by looking up their PID files and we call the sunset service which\nshould respond OK. The second time the hypothesis is applied is after the\nconditions were changed in the system, to validate it is still in a normal\nstate.\n\n\nThe method is the block which changes the conditions of our system/application.\nHere, we swap the valid certificate for an expired one and restart the services\nby sending them a SIGHUP signal.\n\n\nFinally, the rollback section (which is optional) tries to remediate to the\nchanges we made, in this case by swapping back to the valid certificate.\n\n\nDifferent Kinds of Activities\n\u00b6\n\n\nIt is interesting to notice that the hypothesis uses probes while rollbacks are\nmade of actions only. The method may use both. The reason is that the\nhypothesis is only about querying the system while rollbacks act on it. Finally,\nit is often useful to query the system while we change the conditions, for\nfuture analysis.\n\n\nProbes and Actions are activities that do not differ in the way they work, it\u2019s\nonly their goal that differs.\n\n\nYou can create activities that make HTTP calls, execute processes or perform\nmore complex operations through extensions (often implemented in Python). This\ntutorial showcases a bit of all of those.\n\n\nTolerances in the Hypothesis\n\u00b6\n\n\nHypothesis probes expect a \ntolerance\n property which tells the Chaos Toolkit\nhow to validate a certain aspect of the state. In our example, tolerances are\nrather simple. We check file exists and that a HTTP request returns a status\ncode of \n200\n. Richer tolerances can be created by using regex or jsonpath.\n\n\nRun the Experiment\n\u00b6\n\n\nStart the Experiment without the Application\n\u00b6\n\n\nTo run the experiment, simply execute the following command:\n\n\n$\n chaos run experiment.json\n\n[2018-05-14 18:38:04 INFO] Validating the experiment's syntax\n\n\n[2018-05-14 18:38:04 INFO] Experiment looks valid\n\n\n[2018-05-14 18:38:04 INFO] Running experiment: What is the impact of an expired certificate on our application chain?\n\n\n[2018-05-14 18:38:04 INFO] Steady state hypothesis: Application responds\n\n\n[2018-05-14 18:38:04 INFO] Probe: the-astre-service-must-be-running\n\n\n[2018-05-14 18:38:04 CRITICAL] Steady state probe 'the-astre-service-must-be-running' is not in the given tolerance so failing this experiment\n\n\n[2018-05-14 18:38:04 INFO] Let's rollback...\n\n\n[2018-05-14 18:38:04 INFO] Rollback: swap-to-vald-cert\n\n\n[2018-05-14 18:38:04 INFO] Action: swap-to-vald-cert\n\n\n[2018-05-14 18:38:04 INFO] Rollback: None\n\n\n[2018-05-14 18:38:04 INFO] Action: restart-astre-service-to-pick-up-certificate\n\n\n[2018-05-14 18:38:04 INFO] Rollback: None\n\n\n[2018-05-14 18:38:04 INFO] Action: restart-sunset-service-to-pick-up-certificate\n\n\n[2018-05-14 18:38:04 INFO] Pausing after activity for 1s...\n\n\n[2018-05-14 18:38:05 INFO] Experiment ended with status: failed\n\n\n\n\n\nBecause we ran this command before we even started our application, our\nsteady-state hypothesis failed and bailed the experiment immediatly.\n\n\nNote that the rolllbacks will run anyway. They are only bypassed when you\nsend a SIGINT or SIGTERM signal to the \nchaos\n process because the toolkit\nassumes you may want to review your system.\n\n\nStart the Application\n\u00b6\n\n\nYou may now run the application.\n\n\nFirst, copy the valid certificate as follows:\n\n\n$\n cp valid-cert.pem cert.pem\n\n\n\n\nNext, start the services:\n\n\n$\n python3 apps/astre/app.py\n\n[14/May/2018:16:11:09] ENGINE Listening for SIGTERM.\n\n\n[14/May/2018:16:11:09] ENGINE Listening for SIGHUP.\n\n\n[14/May/2018:16:11:09] ENGINE Listening for SIGUSR1.\n\n\n[14/May/2018:16:11:09] ENGINE Bus STARTING\n\n\n[14/May/2018:16:11:09] ENGINE Serving on https://127.0.0.1:8444\n\n\n[14/May/2018:16:11:09] ENGINE Bus STARTE\n\n\n\n\n\n$\n python3 apps/sunset/app.py\n\n[14/May/2018:16:13:58] ENGINE Listening for SIGTERM.\n\n\n[14/May/2018:16:13:58] ENGINE Listening for SIGHUP.\n\n\n[14/May/2018:16:13:58] ENGINE Listening for SIGUSR1.\n\n\n[14/May/2018:16:13:58] ENGINE Bus STARTING\n\n\n[14/May/2018:16:13:58] ENGINE Serving on https://127.0.0.1:8443\n\n\n[14/May/2018:16:13:58] ENGINE Bus STARTED\n\n\n\n\n\nNow you may perform a simple call:\n\n\n$\n curl -k https://localhost:8443/city/Paris\n\nThe sunset will occur at 2018-05-14T21:23:09+02:00 in Paris\n\n\n\n\n\nWhat happens is that the sunset service performs a call to the astre service\nfor the data and simply render them to you, as plain text. Both services are\nchained together over HTTPS.\n\n\nRun the Experiment\n\u00b6\n\n\nNow your application is running, execute the experiment once again:\n\n\n$\n chaos run experiment.json\n\n[2018-05-14 18:41:09 INFO] Validating the experiment's syntax\n\n\n[2018-05-14 18:41:09 INFO] Experiment looks valid\n\n\n[2018-05-14 18:41:09 INFO] Running experiment: What is the impact of an expired certificate on our application chain?\n\n\n[2018-05-14 18:41:09 INFO] Steady state hypothesis: Application responds\n\n\n[2018-05-14 18:41:09 INFO] Probe: the-astre-service-must-be-running\n\n\n[2018-05-14 18:41:09 INFO] Probe: the-sunset-service-must-be-running\n\n\n[2018-05-14 18:41:09 INFO] Probe: we-can-request-sunset\n\n\n[2018-05-14 18:41:09 INFO] Steady state hypothesis is met!\n\n\n[2018-05-14 18:41:09 INFO] Action: swap-to-expired-cert\n\n\n[2018-05-14 18:41:09 INFO] Probe: read-tls-cert-expiry-date\n\n\n[2018-05-14 18:41:09 INFO] Action: restart-astre-service-to-pick-up-certificate\n\n\n[2018-05-14 18:41:09 INFO] Action: restart-sunset-service-to-pick-up-certificate\n\n\n[2018-05-14 18:41:09 INFO] Pausing after activity for 1s...\n\n\n[2018-05-14 18:41:10 INFO] Steady state hypothesis: Application responds\n\n\n[2018-05-14 18:41:10 INFO] Probe: the-astre-service-must-be-running\n\n\n[2018-05-14 18:41:10 INFO] Probe: the-sunset-service-must-be-running\n\n\n[2018-05-14 18:41:10 INFO] Probe: we-can-request-sunset\n\n\n[2018-05-14 18:41:10 CRITICAL] Steady state probe 'we-can-request-sunset' is not in the given tolerance so failing this experiment\n\n\n[2018-05-14 18:41:10 INFO] Let's rollback...\n\n\n[2018-05-14 18:41:10 INFO] Rollback: swap-to-vald-cert\n\n\n[2018-05-14 18:41:10 INFO] Action: swap-to-vald-cert\n\n\n[2018-05-14 18:41:10 INFO] Rollback: None\n\n\n[2018-05-14 18:41:10 INFO] Action: restart-astre-service-to-pick-up-certificate\n\n\n[2018-05-14 18:41:10 INFO] Rollback: None\n\n\n[2018-05-14 18:41:10 INFO] Action: restart-sunset-service-to-pick-up-certificate\n\n\n[2018-05-14 18:41:10 INFO] Pausing after activity for 1s...\n\n\n[2018-05-14 18:41:11 INFO] Experiment ended with status: failed\n\n\n\n\n\nEach activity is run in the order it appears in the experiment. Notice now how\nthe hypothesis is not met after we swapped the certificates. But, we learn\nsomething interesting, even if expected, using an expired certificate does not\nprevent our services to even start.\n\n\nReport on your Findings\n\u00b6\n\n\nReview the Journal of the Run\n\u00b6\n\n\nYou may now review the journal generated by the run:\n\n\n$\n cat journal.json\n\n\n\n\nIt contains the activities runs and the output of each of them.\n\n\nGenerate a Report\n\u00b6\n\n\nYou can generate a PDF (or HTML, markdown\u2026) report from the journal if you\ninstall the \nchaostoolkit-reporting\n plugin first:\n\n\n$\n chaos report --export-format\n=\npdf journal.json report.pdf\n\n\n\n\nLearnings and Responses\n\u00b6\n\n\nIn this experiment, we proved what we guessed initially, that an expired\ncertificate will create trouble and break the application for our users. What\ncould be the responses?\n\n\n\n\nUse a circuit-breaker to provide a more meaningful, and controlled, answer\n  to the caller\n\n\nPrevent the service to start when the certificate is uses is expired\n\n\nPut some monitoring in place on our certificates and trigger an alert when\n  they get close to their end date\n\n\nMove to Let\u2019s Encrypt and renew our certs automatically\n\n\n\n\nFor each of thes potential responses, you could create an experiment should they\nunearth potential new questions.\n\n\nNext?\n\u00b6\n\n\nAn experiment is never the end game. The flow should be continous and you\nshould create and run experiments regularly.",
            "title": "Get Started with the Chaos Toolkit"
        },
        {
            "location": "/reference/tutorial/#a-simple-walkthrough",
            "text": "When you practice chaos engineering, you are discovering how your system\nreacts following certain conditions you inject. By doing this in a controlled\nfashion, you may learn how to change the system accordingly.  This tutorial will quickly give you a tour of the basic elements of an\nexperiment.   Tip  You will find interactive tutorials on the  KataCoda platform  as\nwell.",
            "title": "A simple Walkthrough"
        },
        {
            "location": "/reference/tutorial/#get-ready",
            "text": "Before you can run the experiment against your system, you will need to have\nit setup.",
            "title": "Get Ready"
        },
        {
            "location": "/reference/tutorial/#get-the-code",
            "text": "The code can be found  here .",
            "title": "Get the Code"
        },
        {
            "location": "/reference/tutorial/#install-the-chaos-toolkit",
            "text": "You must install the Chaos Toolkit and its dependencies for the purpose of this\ntutorial. While we suggest you go through the  install  section, it boils\ndown to:  $  pip install -U chaostoolkit",
            "title": "Install the Chaos Toolkit"
        },
        {
            "location": "/reference/tutorial/#third-party-binaries",
            "text": "The experiment will use the following binaries, make sure you have them in your\nPATH:   openssl  pkill",
            "title": "Third-party binaries"
        },
        {
            "location": "/reference/tutorial/#install-the-application-dependencies",
            "text": "Our application is made of a simple set of two microservices that converse\nwith each other over HTTPS.  As you should already run Python 3 for the toolkit itself, we assume you are set\naccordingly, please install only the application dependencies:  $  pip install -U -r requirements.txt",
            "title": "Install the Application dependencies"
        },
        {
            "location": "/reference/tutorial/#your-first-experiment",
            "text": "",
            "title": "Your First Experiment"
        },
        {
            "location": "/reference/tutorial/#explore-a-potential-weakness",
            "text": "So, looking at our application, what could we consider as of interest to\ndiscover through an experiment? Well, we are using HTTPS between the two\nservices in our application, what if the certificate expired?   Tip  In such a simple setup, we appreciate that things will likely break and, in\ngeneral there is no point to run an experiment when you already know the\noutcome. However, let\u2019s humour ourselves for the sake of learning the\nbasics behind the Chaos Toolkit.   We can intuit things will fall apart if the sunset service cannot talk the\nastre service but, should the chain be part of much more complex graph of\nservices, it could be difficult to fully understand all the branches that\nwould be affected nor how badly. So, it may still be useful to experiment by\ninjecting an expired certificate.",
            "title": "Explore a Potential Weakness"
        },
        {
            "location": "/reference/tutorial/#define-the-steady-state-hypothesis",
            "text": "You can only learn if you know where you start from and what a good baseline\nfor your application is.  Here we assume two things:   the services are running  we can call the sunset service to retrieve the sunset time for a given city   During our experiment, we will vary the conditions of the system and expect the\nstate to remain valid.",
            "title": "Define the Steady State Hypothesis"
        },
        {
            "location": "/reference/tutorial/#changing-the-conditions",
            "text": "In this tutorial, we are going to set an expired certificate and restart the\nservices. We will then call our application and see how its response.",
            "title": "Changing the Conditions"
        },
        {
            "location": "/reference/tutorial/#declare-an-experiment-to-observe-the-weakness",
            "text": "At this stage, we can create an experiment that tells how the system behaves\nwhen a certificate expires.  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"What is the impact of an expired certificate on our application chain?\" , \n     \"description\" :   \"If a certificate expires, we should gracefully deal with the issue.\" , \n     \"tags\" :   [ \"tls\" ], \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"Application responds\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"the-astre-service-must-be-running\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"type\" :   \"python\" , \n                     \"module\" :   \"os.path\" , \n                     \"func\" :   \"exists\" , \n                     \"arguments\" :   { \n                         \"path\" :   \"astre.pid\" \n                     } \n                 } \n             }, \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"the-sunset-service-must-be-running\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"type\" :   \"python\" , \n                     \"module\" :   \"os.path\" , \n                     \"func\" :   \"exists\" , \n                     \"arguments\" :   { \n                         \"path\" :   \"sunset.pid\" \n                     } \n                 } \n             }, \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"we-can-request-sunset\" , \n                 \"tolerance\" :   200 , \n                 \"provider\" :   { \n                     \"type\" :   \"http\" , \n                     \"timeout\" :   3 , \n                     \"verify_tls\" :   false , \n                     \"url\" :   \"https://localhost:8443/city/Paris\" \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"swap-to-expired-cert\" , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"cp\" , \n                 \"arguments\" :   \"expired-cert.pem cert.pem\" \n             } \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"read-tls-cert-expiry-date\" , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"openssl\" , \n                 \"arguments\" :   \"x509 -enddate -noout -in cert.pem\" \n             } \n         }, \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"restart-astre-service-to-pick-up-certificate\" , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"pkill\" , \n                 \"arguments\" :   \"--echo -HUP -F astre.pid\" \n             } \n         }, \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"restart-sunset-service-to-pick-up-certificate\" , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"pkill\" , \n                 \"arguments\" :   \"--echo -HUP -F sunset.pid\" \n             }, \n             \"pauses\" :   { \n                 \"after\" :   1 \n             } \n         } \n     ], \n     \"rollbacks\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"swap-to-vald-cert\" , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"cp\" , \n                 \"arguments\" :   \"valid-cert.pem cert.pem\" \n             } \n         }, \n         { \n             \"ref\" :   \"restart-astre-service-to-pick-up-certificate\" \n         }, \n         { \n             \"ref\" :   \"restart-sunset-service-to-pick-up-certificate\" \n         } \n     ]",
            "title": "Declare an Experiment to Observe the Weakness"
        },
        {
            "location": "/reference/tutorial/#the-various-sections-of-an-experiment",
            "text": "Let\u2019s now go through the experiment blocks.  The steady state hypothesis declares the various probes that will be applied\nas part of the hypothesis check.  The hypothesis is played twice. The first time before we do anything else to\nensure the system is indeed in a normal state, here we check the services are\nrunning by looking up their PID files and we call the sunset service which\nshould respond OK. The second time the hypothesis is applied is after the\nconditions were changed in the system, to validate it is still in a normal\nstate.  The method is the block which changes the conditions of our system/application.\nHere, we swap the valid certificate for an expired one and restart the services\nby sending them a SIGHUP signal.  Finally, the rollback section (which is optional) tries to remediate to the\nchanges we made, in this case by swapping back to the valid certificate.",
            "title": "The Various Sections of an Experiment"
        },
        {
            "location": "/reference/tutorial/#different-kinds-of-activities",
            "text": "It is interesting to notice that the hypothesis uses probes while rollbacks are\nmade of actions only. The method may use both. The reason is that the\nhypothesis is only about querying the system while rollbacks act on it. Finally,\nit is often useful to query the system while we change the conditions, for\nfuture analysis.  Probes and Actions are activities that do not differ in the way they work, it\u2019s\nonly their goal that differs.  You can create activities that make HTTP calls, execute processes or perform\nmore complex operations through extensions (often implemented in Python). This\ntutorial showcases a bit of all of those.",
            "title": "Different Kinds of Activities"
        },
        {
            "location": "/reference/tutorial/#tolerances-in-the-hypothesis",
            "text": "Hypothesis probes expect a  tolerance  property which tells the Chaos Toolkit\nhow to validate a certain aspect of the state. In our example, tolerances are\nrather simple. We check file exists and that a HTTP request returns a status\ncode of  200 . Richer tolerances can be created by using regex or jsonpath.",
            "title": "Tolerances in the Hypothesis"
        },
        {
            "location": "/reference/tutorial/#run-the-experiment",
            "text": "",
            "title": "Run the Experiment"
        },
        {
            "location": "/reference/tutorial/#start-the-experiment-without-the-application",
            "text": "To run the experiment, simply execute the following command:  $  chaos run experiment.json [2018-05-14 18:38:04 INFO] Validating the experiment's syntax  [2018-05-14 18:38:04 INFO] Experiment looks valid  [2018-05-14 18:38:04 INFO] Running experiment: What is the impact of an expired certificate on our application chain?  [2018-05-14 18:38:04 INFO] Steady state hypothesis: Application responds  [2018-05-14 18:38:04 INFO] Probe: the-astre-service-must-be-running  [2018-05-14 18:38:04 CRITICAL] Steady state probe 'the-astre-service-must-be-running' is not in the given tolerance so failing this experiment  [2018-05-14 18:38:04 INFO] Let's rollback...  [2018-05-14 18:38:04 INFO] Rollback: swap-to-vald-cert  [2018-05-14 18:38:04 INFO] Action: swap-to-vald-cert  [2018-05-14 18:38:04 INFO] Rollback: None  [2018-05-14 18:38:04 INFO] Action: restart-astre-service-to-pick-up-certificate  [2018-05-14 18:38:04 INFO] Rollback: None  [2018-05-14 18:38:04 INFO] Action: restart-sunset-service-to-pick-up-certificate  [2018-05-14 18:38:04 INFO] Pausing after activity for 1s...  [2018-05-14 18:38:05 INFO] Experiment ended with status: failed   Because we ran this command before we even started our application, our\nsteady-state hypothesis failed and bailed the experiment immediatly.  Note that the rolllbacks will run anyway. They are only bypassed when you\nsend a SIGINT or SIGTERM signal to the  chaos  process because the toolkit\nassumes you may want to review your system.",
            "title": "Start the Experiment without the Application"
        },
        {
            "location": "/reference/tutorial/#start-the-application",
            "text": "You may now run the application.  First, copy the valid certificate as follows:  $  cp valid-cert.pem cert.pem  Next, start the services:  $  python3 apps/astre/app.py [14/May/2018:16:11:09] ENGINE Listening for SIGTERM.  [14/May/2018:16:11:09] ENGINE Listening for SIGHUP.  [14/May/2018:16:11:09] ENGINE Listening for SIGUSR1.  [14/May/2018:16:11:09] ENGINE Bus STARTING  [14/May/2018:16:11:09] ENGINE Serving on https://127.0.0.1:8444  [14/May/2018:16:11:09] ENGINE Bus STARTE   $  python3 apps/sunset/app.py [14/May/2018:16:13:58] ENGINE Listening for SIGTERM.  [14/May/2018:16:13:58] ENGINE Listening for SIGHUP.  [14/May/2018:16:13:58] ENGINE Listening for SIGUSR1.  [14/May/2018:16:13:58] ENGINE Bus STARTING  [14/May/2018:16:13:58] ENGINE Serving on https://127.0.0.1:8443  [14/May/2018:16:13:58] ENGINE Bus STARTED   Now you may perform a simple call:  $  curl -k https://localhost:8443/city/Paris The sunset will occur at 2018-05-14T21:23:09+02:00 in Paris   What happens is that the sunset service performs a call to the astre service\nfor the data and simply render them to you, as plain text. Both services are\nchained together over HTTPS.",
            "title": "Start the Application"
        },
        {
            "location": "/reference/tutorial/#run-the-experiment_1",
            "text": "Now your application is running, execute the experiment once again:  $  chaos run experiment.json [2018-05-14 18:41:09 INFO] Validating the experiment's syntax  [2018-05-14 18:41:09 INFO] Experiment looks valid  [2018-05-14 18:41:09 INFO] Running experiment: What is the impact of an expired certificate on our application chain?  [2018-05-14 18:41:09 INFO] Steady state hypothesis: Application responds  [2018-05-14 18:41:09 INFO] Probe: the-astre-service-must-be-running  [2018-05-14 18:41:09 INFO] Probe: the-sunset-service-must-be-running  [2018-05-14 18:41:09 INFO] Probe: we-can-request-sunset  [2018-05-14 18:41:09 INFO] Steady state hypothesis is met!  [2018-05-14 18:41:09 INFO] Action: swap-to-expired-cert  [2018-05-14 18:41:09 INFO] Probe: read-tls-cert-expiry-date  [2018-05-14 18:41:09 INFO] Action: restart-astre-service-to-pick-up-certificate  [2018-05-14 18:41:09 INFO] Action: restart-sunset-service-to-pick-up-certificate  [2018-05-14 18:41:09 INFO] Pausing after activity for 1s...  [2018-05-14 18:41:10 INFO] Steady state hypothesis: Application responds  [2018-05-14 18:41:10 INFO] Probe: the-astre-service-must-be-running  [2018-05-14 18:41:10 INFO] Probe: the-sunset-service-must-be-running  [2018-05-14 18:41:10 INFO] Probe: we-can-request-sunset  [2018-05-14 18:41:10 CRITICAL] Steady state probe 'we-can-request-sunset' is not in the given tolerance so failing this experiment  [2018-05-14 18:41:10 INFO] Let's rollback...  [2018-05-14 18:41:10 INFO] Rollback: swap-to-vald-cert  [2018-05-14 18:41:10 INFO] Action: swap-to-vald-cert  [2018-05-14 18:41:10 INFO] Rollback: None  [2018-05-14 18:41:10 INFO] Action: restart-astre-service-to-pick-up-certificate  [2018-05-14 18:41:10 INFO] Rollback: None  [2018-05-14 18:41:10 INFO] Action: restart-sunset-service-to-pick-up-certificate  [2018-05-14 18:41:10 INFO] Pausing after activity for 1s...  [2018-05-14 18:41:11 INFO] Experiment ended with status: failed   Each activity is run in the order it appears in the experiment. Notice now how\nthe hypothesis is not met after we swapped the certificates. But, we learn\nsomething interesting, even if expected, using an expired certificate does not\nprevent our services to even start.",
            "title": "Run the Experiment"
        },
        {
            "location": "/reference/tutorial/#report-on-your-findings",
            "text": "",
            "title": "Report on your Findings"
        },
        {
            "location": "/reference/tutorial/#review-the-journal-of-the-run",
            "text": "You may now review the journal generated by the run:  $  cat journal.json  It contains the activities runs and the output of each of them.",
            "title": "Review the Journal of the Run"
        },
        {
            "location": "/reference/tutorial/#generate-a-report",
            "text": "You can generate a PDF (or HTML, markdown\u2026) report from the journal if you\ninstall the  chaostoolkit-reporting  plugin first:  $  chaos report --export-format = pdf journal.json report.pdf",
            "title": "Generate a Report"
        },
        {
            "location": "/reference/tutorial/#learnings-and-responses",
            "text": "In this experiment, we proved what we guessed initially, that an expired\ncertificate will create trouble and break the application for our users. What\ncould be the responses?   Use a circuit-breaker to provide a more meaningful, and controlled, answer\n  to the caller  Prevent the service to start when the certificate is uses is expired  Put some monitoring in place on our certificates and trigger an alert when\n  they get close to their end date  Move to Let\u2019s Encrypt and renew our certs automatically   For each of thes potential responses, you could create an experiment should they\nunearth potential new questions.",
            "title": "Learnings and Responses"
        },
        {
            "location": "/reference/tutorial/#next",
            "text": "An experiment is never the end game. The flow should be continous and you\nshould create and run experiments regularly.",
            "title": "Next?"
        },
        {
            "location": "/drivers/aws/",
            "text": "Extension \nchaosaws\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.5.1\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-aws\n\n\n\n\n\n\n\n\n\n\n\n\nThis project is a collection of \nactions\n and \nprobes\n, gathered as an\nextension to the \nChaos Toolkit\n.\n\n\nInstall\n\u00b6\n\n\nThis package requires Python 3.5+\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install -U chaostoolkit-aws\n\n\n\n\nUsage\n\u00b6\n\n\nTo use the probes and actions from this package, add the following to your\nexperiment file:\n\n\n{\n\n    \n\"name\"\n:\n \n\"stop-an-ec2-instance\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosaws.ec2.actions\"\n,\n\n        \n\"func\"\n:\n \n\"stop_instance\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"instance_id\"\n:\n \n\"i-123456\"\n\n        \n}\n\n    \n}\n\n\n}\n,\n\n\n{\n\n    \n\"name\"\n:\n \n\"create-a-new-policy\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosaws.iam.actions\"\n,\n\n        \n\"func\"\n:\n \n\"create_policy\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"mypolicy\"\n,\n\n            \n\"path\"\n:\n \n\"user/Jane\"\n,\n\n            \n\"policy\"\n:\n \n{\n\n                \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n                \n\"Statement\"\n:\n \n[\n\n                    \n{\n\n                        \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n                        \n\"Action\"\n:\n \n[\n\n                            \n\"s3:ListAllMyBuckets\"\n,\n\n                            \n\"s3:GetBucketLocation\"\n\n                        \n],\n\n                        \n\"Resource\"\n:\n \n\"arn:aws:s3:::*\"\n\n                    \n}\n\n                \n]\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nOr select one at random from an AZ:\n\n\n{\n\n    \n\"name\"\n:\n \n\"stop-an-ec2-instance-in-az-at-random\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosaws.ec2.actions\"\n,\n\n        \n\"func\"\n:\n \n\"stop_instance\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"az\"\n:\n \n\"us-west-1\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThat\u2019s it!\n\n\nPlease explore the code to see existing probes and actions.\n\n\nConfiguration\n\u00b6\n\n\nCredentials\n\u00b6\n\n\nThis extension uses the \nboto3\n library under the hood. This library expects\nthat you have properly \nconfigured\n your environment to connect and\nauthenticate with the AWS services.\n\n\nGenerally speaking, there are two ways of doing this:\n\n\n\n\n\n\nyou have \nconfigured\n the environment where you will run the\n  experiment from (any of the \nuser-wide credential sources\n would\n  do). You may also provide a profile name to \nassume a role\n.\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"aws_profile_name\"\n:\n \n\"dev\"\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nyou explicitely pass the correct environment variables to the experiment\n  definition as follows:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"aws\"\n:\n \n{\n\n            \n\"aws_access_key_id\"\n:\n \n\"your key\"\n,\n\n            \n\"aws_secret_access_key\"\n:\n \n\"access key\"\n,\n\n            \n\"aws_session_token\"\n:\n \n\"token\"\n,\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nNote that the token is optional.\n  Then, use it as follows:\n\n\n```json\n{\n    \"name\": \"stop-an-ec2-instance\",\n    \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaosaws.ec2.actions\",\n        \"func\": \"stop_instance\",\n        \"secrets\": [\"aws\"],\n        \"arguments\": {\n            \"instance_id\": \"i-123456\"\n        }\n    }\n}\n```\n\n\n\n\n\nOther AWS settings\n\u00b6\n\n\nIn additon to the authentication credentials, you can configure the region\nagainst which you want to use. At the top level of the experiment, add:\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"aws_region\"\n:\n \n\"us-east-1\"\n\n    \n}\n\n\n}\n\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit projects require all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nDevelop\n\u00b6\n\n\nIf you wish to develop on this project, make sure to install the development\ndependencies. But first, \ncreate a virtual environment\n and then install\nthose dependencies.\n\n\n$\n pip install -r requirements-dev.txt -r requirements.txt \n\n\n\n\nThen, point your environment to this directory:\n\n\n$\n python setup.py develop\n\n\n\n\nNow, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the \nchaos\n command locally.\n\n\nTest\n\u00b6\n\n\nTo run the tests for the project execute the following:\n\n\n$ pytest\n\n\n\n\nAdd new AWS API Support\n\u00b6\n\n\nOnce you have setup your environment, you can start adding new\n\nAWS API support\n by adding new actions, probes and entire sub-packages\nfor those.\n\n\nServices supported by boto\n\u00b6\n\n\nThis package relies on \nboto3\n to wrap the API calls into a fluent Python\nAPI. Some newer AWS services are not yet available in boto3, in that case,\nyou should read the next section.\n\n\nLet\u2019s say you want to support a new action in the EC2 sub-package.\n\n\nStart by creating a new function in \nec2/actions.py\n:\n\n\nfrom\n \nchaoslib.types\n \nimport\n \nConfiguration\n,\n \nSecrets\n\n\n\nfrom\n \nchaosaws\n \nimport\n \naws_client\n\n\nfrom\n \nchaosaws.types\n \nimport\n \nAWSResponse\n\n\n\ndef\n \nreboot_instance\n(\ninstance_id\n:\n \nstr\n,\n \ndry_run\n:\n \nbool\n=\nFalse\n,\n\n                    \nconfiguration\n:\n \nConfiguration\n=\nNone\n,\n\n                    \nsecrets\n:\n \nSecrets\n=\nNone\n)\n \n->\n \nAWSResponse\n:\n\n    \n\"\"\"\n\n\n    Reboot a given EC2 instance.\n\n\n    \"\"\"\n\n    \nclient\n \n=\n \naws_client\n(\n'ec2'\n,\n \nconfiguration\n,\n \nsecrets\n)\n\n    \nreturn\n \nclient\n.\nreboot_instances\n(\nInstanceIds\n=\n[\ninstance_id\n],\n \nDryRun\n=\ndry_run\n)\n\n\n\n\n\nAs you can see, the actual code is straightforward. You first create a\n\nEC2 client\n and simply call the appropriate method on that client\nwith the expected arguments. We return the action as-is so that it can be\nlogged by the chaostoolkit, or even be used as part of a steady-state\nhypothesis probe (if this was a probe, not action that is).\n\n\nYou could decide to make more than one AWS API call but, it is better to keep\nit simple so that composition is easier from the experiment. Nonetheless,\nyou may also compose those directly into a single action as well for specific\nuse-cases.\n\n\nPlease refer to the Chaos Toolkit documentation to learn more about the\n\nconfiguration\n and \nsecrets\n objects.\n\n\nOnce you have implemented that action, you must create at least one unit test\nfor it in the \ntests/ec2/test_ec2_actions.py\n test module. For example:\n\n\nfrom\n \nchaosaws.ec2.actions\n \nimport\n \nreboot_instancex\n\n\n\n@patch\n(\n'chaosaws.ec2.actions.aws_client'\n,\n \nautospec\n=\nTrue\n)\n\n\ndef\n \ntest_reboot_instance\n(\naws_client\n):\n\n    \nclient\n \n=\n \nMagicMock\n()\n\n    \naws_client\n.\nreturn_value\n \n=\n \nclient\n\n    \ninst_id\n \n=\n \n\"i-1234567890abcdef0\"\n\n    \nresponse\n \n=\n \nreboot_instance\n(\ninst_id\n)\n\n    \nclient\n.\nreboot_instances\n.\nassert_called_with\n(\n\n        \nInstanceIds\n=\n[\ninst_id\n],\n \nDryRun\n=\nFalse\n)\n\n\n\n\n\nBy using the \nbuilt-in Python module to mock objects\n, we can mock the\nEC2 client and assert we edo indeed call the appropriate method with the right\narguments. You are encouraged to write more than a single test for various\nconditions.\n\n\nFinally, should you choose to add support for a new AWS API resource altogether,\nyou should create the according sub-package.\n\n\nServices not supported by boto (new AWS features)\n\u00b6\n\n\nIf the support you want to provide is for a new AWS service that \nboto\n does\nnot support yet, this requires direct call to the API endpoint via the\n\nrequests\n package. Say we have a new service, not yet supported by boto3\n\n\nfrom\n \nchaoslib.types\n \nimport\n \nConfiguration\n,\n \nSecrets\n\n\n\nfrom\n \nchaosaws\n \nimport\n \nsigned_api_call\n\n\nfrom\n \nchaosaws.types\n \nimport\n \nAWSResponse\n\n\n\ndef\n \nterminate_worker_node\n(\nworker_node_id\n:\n \nstr\n,\n\n                          \nconfiguration\n:\n \nConfiguration\n=\nNone\n,\n\n                          \nsecrets\n:\n \nSecrets\n=\nNone\n)\n \n->\n \nAWSResponse\n:\n\n    \n\"\"\"\n\n\n    Terminate a worker node.\n\n\n    \"\"\"\n\n    \nparams\n \n=\n \n{\n\n        \n\"DryRun\"\n:\n \nTrue\n,\n\n        \n\"WorkerNodeId.1\"\n:\n \nworker_node_id\n\n    \n}\n\n    \nresponse\n \n=\n \nsigned_api_call\n(\n\n        \n'some-new-service-name'\n,\n \npath\n=\n'/2018-01-01/worker/terminate'\n,\n\n        \nmethod\n=\n'POST'\n,\n \nparams\n=\nparams\n,\n\n        \nconfiguration\n=\nconfiguration\n,\n \nsecrets\n=\nsecrets\n)\n\n    \nreturn\n \nresponse\n.\njson\n()\n\n\n\n\n\nHere is an example on existing API call (as a more concrete snippet):\n\n\nfrom\n \nchaoslib.types\n \nimport\n \nConfiguration\n,\n \nSecrets\n\n\n\nfrom\n \nchaosaws\n \nimport\n \nsigned_api_call\n\n\n\ndef\n \nstop_instance\n(\ninstance_id\n:\n \nstr\n,\n \nconfiguration\n:\n \nConfiguration\n=\nNone\n,\n\n                  \nsecrets\n:\n \nSecrets\n=\nNone\n)\n \n->\n \nstr\n:\n\n    \nresponse\n \n=\n \nsigned_api_call\n(\n\n        \n'ec2'\n,\n\n        \nconfiguration\n=\nconfiguration\n,\n\n        \nsecrets\n=\nsecrets\n,\n\n        \nparams\n=\n{\n\n            \n\"Action\"\n:\n \n\"StopInstances\"\n,\n\n            \n\"InstanceId.1\"\n:\n \ninstance_id\n,\n\n            \n\"Version\"\n:\n \n\"2013-06-15\"\n\n        \n}\n\n    \n)\n\n\n    \n# this API returns XML, not JSON\n\n    \nreturn\n \nresponse\n.\ntext\n\n\n\n\n\nWhen using the \nsigned_api_call\n, you are responsible for the right way of\npassing the parameters. Basically, look at the AWS documentation for each\nAPI call.\n\n\nWARNING:\n It should be noted that, whenever boto3 implements an API, this\npackage should be updated accordingly, as boto3 is much more versatile and\nsolid.\n\n\nMake your new sub-package discoverable\n\u00b6\n\n\nFinally, if you have created a new sub-package entirely, you need to make its\ncapability discoverable by the chaos toolkit. Simply amend the \ndiscover\n\nfunction in the \nchaosaws/__init__.py\n. For example, assuming a new \neks\n\nsub-package, with actions and probes:\n\n\n    \nactivities\n.\nextend\n(\ndiscover_actions\n(\n\"chaosaws.eks.actions\"\n))\n\n    \nactivities\n.\nextend\n(\ndiscover_probes\n(\n\"chaosaws.eks.probes\"\n))\n\n\n\n\n\nExported Activities\n\u00b6\n\n\neks\n\u00b6\n\n\n\n\ncreate_cluster\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.eks.actions\n\n\n\n\n\n\nName\n\n\ncreate_cluster\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nCreate a new EKS cluster.\n\n\nSignature:\n\n\ndef\n \ncreate_cluster\n(\n\n        \nname\n:\n \nstr\n,\n\n        \nrole_arn\n:\n \nstr\n,\n\n        \nvpc_config\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n\n        \nversion\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nrole_arn\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nvpc_config\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\nversion\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"create_cluster\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.eks.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"vpc_config\"\n:\n \n{},\n\n      \n\"role_arn\"\n:\n \n\"\"\n,\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"create-cluster\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncreate-cluster\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n    \nrole_arn\n:\n \n''\n\n    \nvpc_config\n:\n \n{}\n\n  \nfunc\n:\n \ncreate_cluster\n\n  \nmodule\n:\n \nchaosaws.eks.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndelete_cluster\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.eks.actions\n\n\n\n\n\n\nName\n\n\ndelete_cluster\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDelete the given EKS cluster.\n\n\nSignature:\n\n\ndef\n \ndelete_cluster\n(\n\n        \nname\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_cluster\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.eks.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-cluster\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-cluster\n\n\nprovider\n:\n\n  \nfunc\n:\n \ndelete_cluster\n\n  \nmodule\n:\n \nchaosaws.eks.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndescribe_cluster\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.eks.probes\n\n\n\n\n\n\nName\n\n\ndescribe_cluster\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDescribe an EKS cluster.\n\n\nSignature:\n\n\ndef\n \ndescribe_cluster\n(\n\n        \nname\n:\n \nstr\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"describe_cluster\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.eks.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"describe-cluster\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndescribe-cluster\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \ndescribe_cluster\n\n  \nmodule\n:\n \nchaosaws.eks.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nlist_clusters\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.eks.probes\n\n\n\n\n\n\nName\n\n\nlist_clusters\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nList EKS clusters available to the authenticated account.\n\n\nSignature:\n\n\ndef\n \nlist_clusters\n(\nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"list_clusters\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.eks.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"list-clusters\"\n\n\n}\n\n\n\n\n\nname\n:\n \nlist-clusters\n\n\nprovider\n:\n\n  \nfunc\n:\n \nlist_clusters\n\n  \nmodule\n:\n \nchaosaws.eks.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\nec2\n\u00b6\n\n\n\n\ndescribe_instances\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.ec2.probes\n\n\n\n\n\n\nName\n\n\ndescribe_instances\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDescribe instances following the specified filters.\n\n\nPlease refer to \nhttp://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.Client.describe_instances\n\nfor details on said filters.\n\n\nSignature:\n\n\ndef\n \ndescribe_instances\n(\n\n        \nfilters\n:\n \nList\n[\nDict\n[\nstr\n,\n \nAny\n]],\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nfilters\n\n\nlist\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"describe_instances\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ec2.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"filters\"\n:\n \n[]\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"describe-instances\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndescribe-instances\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nfilters\n:\n \n[]\n\n  \nfunc\n:\n \ndescribe_instances\n\n  \nmodule\n:\n \nchaosaws.ec2.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nstop_instance\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ec2.actions\n\n\n\n\n\n\nName\n\n\nstop_instance\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nStop a single EC2 instance.\n\n\nYou may provide an instance id explicitely or, if you only specify the AZ,\na random instance will be selected.\n\n\nSignature:\n\n\ndef\n \nstop_instance\n(\ninstance_id\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \naz\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nforce\n:\n \nbool\n \n=\n \nFalse\n,\n\n                  \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninstance_id\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\naz\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nforce\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"stop_instance\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ec2.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"stop-instance\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstop-instance\n\n\nprovider\n:\n\n  \nfunc\n:\n \nstop_instance\n\n  \nmodule\n:\n \nchaosaws.ec2.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nstop_instances\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ec2.actions\n\n\n\n\n\n\nName\n\n\nstop_instances\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nStop the given EC2 instances or, if none is provided, all instances\nof the given availability zone.\n\n\nSignature:\n\n\ndef\n \nstop_instances\n(\n\n        \ninstance_ids\n:\n \nList\n[\nstr\n]\n \n=\n \nNone\n,\n\n        \naz\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nforce\n:\n \nbool\n \n=\n \nFalse\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ninstance_ids\n\n\nlist\n\n\nnull\n\n\nNo\n\n\n\n\n\n\naz\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nforce\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"stop_instances\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ec2.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"stop-instances\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstop-instances\n\n\nprovider\n:\n\n  \nfunc\n:\n \nstop_instances\n\n  \nmodule\n:\n \nchaosaws.ec2.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\necs\n\u00b6\n\n\n\n\nare_all_desired_tasks_running\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.probes\n\n\n\n\n\n\nName\n\n\nare_all_desired_tasks_running\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nChecks to make sure desired and running tasks counts are equal\n\n\nSignature:\n\n\ndef\n \nare_all_desired_tasks_running\n(\n\n        \ncluster\n:\n \nstr\n,\n\n        \nservice\n:\n \nstr\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nservice\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"are_all_desired_tasks_running\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"service\"\n:\n \n\"\"\n,\n\n      \n\"cluster\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"are-all-desired-tasks-running\"\n\n\n}\n\n\n\n\n\nname\n:\n \nare-all-desired-tasks-running\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \ncluster\n:\n \n''\n\n    \nservice\n:\n \n''\n\n  \nfunc\n:\n \nare_all_desired_tasks_running\n\n  \nmodule\n:\n \nchaosaws.ecs.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\ndelete_cluster\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.actions\n\n\n\n\n\n\nName\n\n\ndelete_cluster\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDelete a given ECS cluster\n\n\nSignature:\n\n\ndef\n \ndelete_cluster\n(\n\n        \ncluster\n:\n \nstr\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_cluster\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"cluster\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-cluster\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-cluster\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \ncluster\n:\n \n''\n\n  \nfunc\n:\n \ndelete_cluster\n\n  \nmodule\n:\n \nchaosaws.ecs.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndelete_service\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.actions\n\n\n\n\n\n\nName\n\n\ndelete_service\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nUpdate a given ECS service by updating it to set the desired count of tasks\nto 0 then delete it. If not provided, a random one will be picked up\nregarding \nservice_pattern\n, if provided, so that only service names\nmatching the pattern would be be used. This should be a valid regex.\n\n\nYou can specify a cluster by its ARN identifier or, if not provided, the\ndefault cluster will be picked up.\n\n\nSignature:\n\n\ndef\n \ndelete_service\n(\n\n        \nservice\n:\n \nstr\n \n=\n \nNone\n,\n\n        \ncluster\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nservice_pattern\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nservice\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nservice_pattern\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_service\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-service\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-service\n\n\nprovider\n:\n\n  \nfunc\n:\n \ndelete_service\n\n  \nmodule\n:\n \nchaosaws.ecs.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nderegister_container_instance\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.actions\n\n\n\n\n\n\nName\n\n\nderegister_container_instance\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDeregister a given ECS container. Becareful that tasks handled by this\ninstance will remain orphan.\n\n\nSignature:\n\n\ndef\n \nderegister_container_instance\n(\n\n        \ncluster\n:\n \nstr\n,\n\n        \ninstance_id\n:\n \nstr\n,\n\n        \nforce\n:\n \nbool\n \n=\n \nFalse\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\ninstance_id\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nforce\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"deregister_container_instance\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"instance_id\"\n:\n \n\"\"\n,\n\n      \n\"cluster\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"deregister-container-instance\"\n\n\n}\n\n\n\n\n\nname\n:\n \nderegister-container-instance\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \ncluster\n:\n \n''\n\n    \ninstance_id\n:\n \n''\n\n  \nfunc\n:\n \nderegister_container_instance\n\n  \nmodule\n:\n \nchaosaws.ecs.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nservice_is_deploying\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.probes\n\n\n\n\n\n\nName\n\n\nservice_is_deploying\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nChecks to make sure there is not an in progress deployment\n\n\nSignature:\n\n\ndef\n \nservice_is_deploying\n(\ncluster\n:\n \nstr\n,\n\n                         \nservice\n:\n \nstr\n,\n\n                         \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                         \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nservice\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"service_is_deploying\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"service\"\n:\n \n\"\"\n,\n\n      \n\"cluster\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"service-is-deploying\"\n\n\n}\n\n\n\n\n\nname\n:\n \nservice-is-deploying\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \ncluster\n:\n \n''\n\n    \nservice\n:\n \n''\n\n  \nfunc\n:\n \nservice_is_deploying\n\n  \nmodule\n:\n \nchaosaws.ecs.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nstop_task\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.ecs.actions\n\n\n\n\n\n\nName\n\n\nstop_task\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nStop a given ECS task instance. If no task_id provided, a random task of\nthe given service is stopped.\n\n\nYou can specify a cluster by its ARN identifier or, if not provided, the\ndefault cluster will be picked up.\n\n\nSignature:\n\n\ndef\n \nstop_task\n(\ncluster\n:\n \nstr\n \n=\n \nNone\n,\n\n              \ntask_id\n:\n \nstr\n \n=\n \nNone\n,\n\n              \nservice\n:\n \nstr\n \n=\n \nNone\n,\n\n              \nreason\n:\n \nstr\n \n=\n \n'Chaos Testing'\n,\n\n              \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n              \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncluster\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ntask_id\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nservice\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nreason\n\n\nstring\n\n\n\u201cChaos Testing\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"stop_task\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.ecs.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"stop-task\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstop-task\n\n\nprovider\n:\n\n  \nfunc\n:\n \nstop_task\n\n  \nmodule\n:\n \nchaosaws.ecs.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\niam\n\u00b6\n\n\n\n\nattach_role_policy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.iam.actions\n\n\n\n\n\n\nName\n\n\nattach_role_policy\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nAttach a role to a policy.\n\n\nSignature:\n\n\ndef\n \nattach_role_policy\n(\n\n        \narn\n:\n \nstr\n,\n\n        \nrole_name\n:\n \nstr\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nrole_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"attach_role_policy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.iam.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"arn\"\n:\n \n\"\"\n,\n\n      \n\"role_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"attach-role-policy\"\n\n\n}\n\n\n\n\n\nname\n:\n \nattach-role-policy\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \narn\n:\n \n''\n\n    \nrole_name\n:\n \n''\n\n  \nfunc\n:\n \nattach_role_policy\n\n  \nmodule\n:\n \nchaosaws.iam.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ncreate_policy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.iam.actions\n\n\n\n\n\n\nName\n\n\ncreate_policy\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nCreate a new IAM policy\n\n\nSignature:\n\n\ndef\n \ncreate_policy\n(\nname\n:\n \nstr\n,\n\n                  \npolicy\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n\n                  \npath\n:\n \nstr\n \n=\n \n'/'\n,\n\n                  \ndescription\n:\n \nstr\n \n=\n \n''\n,\n\n                  \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\npolicy\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\npath\n\n\nstring\n\n\n\u201d/\u201d\n\n\nNo\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\n\u201d\u201c\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"create_policy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.iam.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"policy\"\n:\n \n{},\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"create-policy\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncreate-policy\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n    \npolicy\n:\n \n{}\n\n  \nfunc\n:\n \ncreate_policy\n\n  \nmodule\n:\n \nchaosaws.iam.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndetach_role_policy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosaws.iam.actions\n\n\n\n\n\n\nName\n\n\ndetach_role_policy\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDetach a role from a policy.\n\n\nSignature:\n\n\ndef\n \ndetach_role_policy\n(\n\n        \narn\n:\n \nstr\n,\n\n        \nrole_name\n:\n \nstr\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nrole_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"detach_role_policy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.iam.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"arn\"\n:\n \n\"\"\n,\n\n      \n\"role_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"detach-role-policy\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndetach-role-policy\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \narn\n:\n \n''\n\n    \nrole_name\n:\n \n''\n\n  \nfunc\n:\n \ndetach_role_policy\n\n  \nmodule\n:\n \nchaosaws.iam.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nget_policy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosaws.iam.probes\n\n\n\n\n\n\nName\n\n\nget_policy\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nGet a policy by its ARN\n\n\nSignature:\n\n\ndef\n \nget_policy\n(\narn\n:\n \nstr\n,\n\n               \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n               \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_policy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosaws.iam.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"arn\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-policy\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-policy\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \narn\n:\n \n''\n\n  \nfunc\n:\n \nget_policy\n\n  \nmodule\n:\n \nchaosaws.iam.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe",
            "title": "AWS"
        },
        {
            "location": "/drivers/aws/#extension-chaosaws",
            "text": "Version  0.5.1    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-aws       This project is a collection of  actions  and  probes , gathered as an\nextension to the  Chaos Toolkit .",
            "title": "Extension chaosaws"
        },
        {
            "location": "/drivers/aws/#install",
            "text": "This package requires Python 3.5+  To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install -U chaostoolkit-aws",
            "title": "Install"
        },
        {
            "location": "/drivers/aws/#usage",
            "text": "To use the probes and actions from this package, add the following to your\nexperiment file:  { \n     \"name\" :   \"stop-an-ec2-instance\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosaws.ec2.actions\" , \n         \"func\" :   \"stop_instance\" , \n         \"arguments\" :   { \n             \"instance_id\" :   \"i-123456\" \n         } \n     }  } ,  { \n     \"name\" :   \"create-a-new-policy\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosaws.iam.actions\" , \n         \"func\" :   \"create_policy\" , \n         \"arguments\" :   { \n             \"name\" :   \"mypolicy\" , \n             \"path\" :   \"user/Jane\" , \n             \"policy\" :   { \n                 \"Version\" :   \"2012-10-17\" , \n                 \"Statement\" :   [ \n                     { \n                         \"Effect\" :   \"Allow\" , \n                         \"Action\" :   [ \n                             \"s3:ListAllMyBuckets\" , \n                             \"s3:GetBucketLocation\" \n                         ], \n                         \"Resource\" :   \"arn:aws:s3:::*\" \n                     } \n                 ] \n             } \n         } \n     }  }   Or select one at random from an AZ:  { \n     \"name\" :   \"stop-an-ec2-instance-in-az-at-random\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosaws.ec2.actions\" , \n         \"func\" :   \"stop_instance\" , \n         \"arguments\" :   { \n             \"az\" :   \"us-west-1\" \n         } \n     }  }   That\u2019s it!  Please explore the code to see existing probes and actions.",
            "title": "Usage"
        },
        {
            "location": "/drivers/aws/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/drivers/aws/#credentials",
            "text": "This extension uses the  boto3  library under the hood. This library expects\nthat you have properly  configured  your environment to connect and\nauthenticate with the AWS services.  Generally speaking, there are two ways of doing this:    you have  configured  the environment where you will run the\n  experiment from (any of the  user-wide credential sources  would\n  do). You may also provide a profile name to  assume a role .  { \n     \"configuration\" :   { \n         \"aws_profile_name\" :   \"dev\" \n     }  }     you explicitely pass the correct environment variables to the experiment\n  definition as follows:  { \n     \"secrets\" :   { \n         \"aws\" :   { \n             \"aws_access_key_id\" :   \"your key\" , \n             \"aws_secret_access_key\" :   \"access key\" , \n             \"aws_session_token\" :   \"token\" , \n         } \n     }  }     Note that the token is optional.\n  Then, use it as follows:  ```json\n{\n    \"name\": \"stop-an-ec2-instance\",\n    \"provider\": {\n        \"type\": \"python\",\n        \"module\": \"chaosaws.ec2.actions\",\n        \"func\": \"stop_instance\",\n        \"secrets\": [\"aws\"],\n        \"arguments\": {\n            \"instance_id\": \"i-123456\"\n        }\n    }\n}\n```",
            "title": "Credentials"
        },
        {
            "location": "/drivers/aws/#other-aws-settings",
            "text": "In additon to the authentication credentials, you can configure the region\nagainst which you want to use. At the top level of the experiment, add:  { \n     \"configuration\" :   { \n         \"aws_region\" :   \"us-east-1\" \n     }  }",
            "title": "Other AWS settings"
        },
        {
            "location": "/drivers/aws/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.  The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/aws/#develop",
            "text": "If you wish to develop on this project, make sure to install the development\ndependencies. But first,  create a virtual environment  and then install\nthose dependencies.  $  pip install -r requirements-dev.txt -r requirements.txt   Then, point your environment to this directory:  $  python setup.py develop  Now, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the  chaos  command locally.",
            "title": "Develop"
        },
        {
            "location": "/drivers/aws/#test",
            "text": "To run the tests for the project execute the following:  $ pytest",
            "title": "Test"
        },
        {
            "location": "/drivers/aws/#add-new-aws-api-support",
            "text": "Once you have setup your environment, you can start adding new AWS API support  by adding new actions, probes and entire sub-packages\nfor those.",
            "title": "Add new AWS API Support"
        },
        {
            "location": "/drivers/aws/#services-supported-by-boto",
            "text": "This package relies on  boto3  to wrap the API calls into a fluent Python\nAPI. Some newer AWS services are not yet available in boto3, in that case,\nyou should read the next section.  Let\u2019s say you want to support a new action in the EC2 sub-package.  Start by creating a new function in  ec2/actions.py :  from   chaoslib.types   import   Configuration ,   Secrets  from   chaosaws   import   aws_client  from   chaosaws.types   import   AWSResponse  def   reboot_instance ( instance_id :   str ,   dry_run :   bool = False , \n                     configuration :   Configuration = None , \n                     secrets :   Secrets = None )   ->   AWSResponse : \n     \"\"\"      Reboot a given EC2 instance.      \"\"\" \n     client   =   aws_client ( 'ec2' ,   configuration ,   secrets ) \n     return   client . reboot_instances ( InstanceIds = [ instance_id ],   DryRun = dry_run )   As you can see, the actual code is straightforward. You first create a EC2 client  and simply call the appropriate method on that client\nwith the expected arguments. We return the action as-is so that it can be\nlogged by the chaostoolkit, or even be used as part of a steady-state\nhypothesis probe (if this was a probe, not action that is).  You could decide to make more than one AWS API call but, it is better to keep\nit simple so that composition is easier from the experiment. Nonetheless,\nyou may also compose those directly into a single action as well for specific\nuse-cases.  Please refer to the Chaos Toolkit documentation to learn more about the configuration  and  secrets  objects.  Once you have implemented that action, you must create at least one unit test\nfor it in the  tests/ec2/test_ec2_actions.py  test module. For example:  from   chaosaws.ec2.actions   import   reboot_instancex  @patch ( 'chaosaws.ec2.actions.aws_client' ,   autospec = True )  def   test_reboot_instance ( aws_client ): \n     client   =   MagicMock () \n     aws_client . return_value   =   client \n     inst_id   =   \"i-1234567890abcdef0\" \n     response   =   reboot_instance ( inst_id ) \n     client . reboot_instances . assert_called_with ( \n         InstanceIds = [ inst_id ],   DryRun = False )   By using the  built-in Python module to mock objects , we can mock the\nEC2 client and assert we edo indeed call the appropriate method with the right\narguments. You are encouraged to write more than a single test for various\nconditions.  Finally, should you choose to add support for a new AWS API resource altogether,\nyou should create the according sub-package.",
            "title": "Services supported by boto"
        },
        {
            "location": "/drivers/aws/#services-not-supported-by-boto-new-aws-features",
            "text": "If the support you want to provide is for a new AWS service that  boto  does\nnot support yet, this requires direct call to the API endpoint via the requests  package. Say we have a new service, not yet supported by boto3  from   chaoslib.types   import   Configuration ,   Secrets  from   chaosaws   import   signed_api_call  from   chaosaws.types   import   AWSResponse  def   terminate_worker_node ( worker_node_id :   str , \n                           configuration :   Configuration = None , \n                           secrets :   Secrets = None )   ->   AWSResponse : \n     \"\"\"      Terminate a worker node.      \"\"\" \n     params   =   { \n         \"DryRun\" :   True , \n         \"WorkerNodeId.1\" :   worker_node_id \n     } \n     response   =   signed_api_call ( \n         'some-new-service-name' ,   path = '/2018-01-01/worker/terminate' , \n         method = 'POST' ,   params = params , \n         configuration = configuration ,   secrets = secrets ) \n     return   response . json ()   Here is an example on existing API call (as a more concrete snippet):  from   chaoslib.types   import   Configuration ,   Secrets  from   chaosaws   import   signed_api_call  def   stop_instance ( instance_id :   str ,   configuration :   Configuration = None , \n                   secrets :   Secrets = None )   ->   str : \n     response   =   signed_api_call ( \n         'ec2' , \n         configuration = configuration , \n         secrets = secrets , \n         params = { \n             \"Action\" :   \"StopInstances\" , \n             \"InstanceId.1\" :   instance_id , \n             \"Version\" :   \"2013-06-15\" \n         } \n     ) \n\n     # this API returns XML, not JSON \n     return   response . text   When using the  signed_api_call , you are responsible for the right way of\npassing the parameters. Basically, look at the AWS documentation for each\nAPI call.  WARNING:  It should be noted that, whenever boto3 implements an API, this\npackage should be updated accordingly, as boto3 is much more versatile and\nsolid.",
            "title": "Services not supported by boto (new AWS features)"
        },
        {
            "location": "/drivers/aws/#make-your-new-sub-package-discoverable",
            "text": "Finally, if you have created a new sub-package entirely, you need to make its\ncapability discoverable by the chaos toolkit. Simply amend the  discover \nfunction in the  chaosaws/__init__.py . For example, assuming a new  eks \nsub-package, with actions and probes:       activities . extend ( discover_actions ( \"chaosaws.eks.actions\" )) \n     activities . extend ( discover_probes ( \"chaosaws.eks.probes\" ))",
            "title": "Make your new sub-package discoverable"
        },
        {
            "location": "/drivers/aws/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/aws/#eks",
            "text": "",
            "title": "eks"
        },
        {
            "location": "/drivers/aws/#create_cluster",
            "text": "Type  action    Module  chaosaws.eks.actions    Name  create_cluster    Return  mapping     Create a new EKS cluster.  Signature:  def   create_cluster ( \n         name :   str , \n         role_arn :   str , \n         vpc_config :   Dict [ str ,   Any ], \n         version :   str   =   None , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    role_arn  string   Yes    vpc_config  mapping   Yes    version  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"create_cluster\" , \n     \"module\" :   \"chaosaws.eks.actions\" , \n     \"arguments\" :   { \n       \"vpc_config\" :   {}, \n       \"role_arn\" :   \"\" , \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"create-cluster\"  }   name :   create-cluster  provider : \n   arguments : \n     name :   '' \n     role_arn :   '' \n     vpc_config :   {} \n   func :   create_cluster \n   module :   chaosaws.eks.actions \n   type :   python  type :   action",
            "title": "create_cluster"
        },
        {
            "location": "/drivers/aws/#delete_cluster",
            "text": "Type  action    Module  chaosaws.eks.actions    Name  delete_cluster    Return  mapping     Delete the given EKS cluster.  Signature:  def   delete_cluster ( \n         name :   str   =   None , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_cluster\" , \n     \"module\" :   \"chaosaws.eks.actions\" \n   }, \n   \"name\" :   \"delete-cluster\"  }   name :   delete-cluster  provider : \n   func :   delete_cluster \n   module :   chaosaws.eks.actions \n   type :   python  type :   action",
            "title": "delete_cluster"
        },
        {
            "location": "/drivers/aws/#describe_cluster",
            "text": "Type  probe    Module  chaosaws.eks.probes    Name  describe_cluster    Return  mapping     Describe an EKS cluster.  Signature:  def   describe_cluster ( \n         name :   str , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"describe_cluster\" , \n     \"module\" :   \"chaosaws.eks.probes\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"describe-cluster\"  }   name :   describe-cluster  provider : \n   arguments : \n     name :   '' \n   func :   describe_cluster \n   module :   chaosaws.eks.probes \n   type :   python  type :   probe",
            "title": "describe_cluster"
        },
        {
            "location": "/drivers/aws/#list_clusters",
            "text": "Type  probe    Module  chaosaws.eks.probes    Name  list_clusters    Return  mapping     List EKS clusters available to the authenticated account.  Signature:  def   list_clusters ( configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required             Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"list_clusters\" , \n     \"module\" :   \"chaosaws.eks.probes\" \n   }, \n   \"name\" :   \"list-clusters\"  }   name :   list-clusters  provider : \n   func :   list_clusters \n   module :   chaosaws.eks.probes \n   type :   python  type :   probe",
            "title": "list_clusters"
        },
        {
            "location": "/drivers/aws/#ec2",
            "text": "",
            "title": "ec2"
        },
        {
            "location": "/drivers/aws/#describe_instances",
            "text": "Type  probe    Module  chaosaws.ec2.probes    Name  describe_instances    Return  mapping     Describe instances following the specified filters.  Please refer to  http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.Client.describe_instances \nfor details on said filters.  Signature:  def   describe_instances ( \n         filters :   List [ Dict [ str ,   Any ]], \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      filters  list   Yes     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"describe_instances\" , \n     \"module\" :   \"chaosaws.ec2.probes\" , \n     \"arguments\" :   { \n       \"filters\" :   [] \n     } \n   }, \n   \"name\" :   \"describe-instances\"  }   name :   describe-instances  provider : \n   arguments : \n     filters :   [] \n   func :   describe_instances \n   module :   chaosaws.ec2.probes \n   type :   python  type :   probe",
            "title": "describe_instances"
        },
        {
            "location": "/drivers/aws/#stop_instance",
            "text": "Type  action    Module  chaosaws.ec2.actions    Name  stop_instance    Return  mapping     Stop a single EC2 instance.  You may provide an instance id explicitely or, if you only specify the AZ,\na random instance will be selected.  Signature:  def   stop_instance ( instance_id :   str   =   None , \n                   az :   str   =   None , \n                   force :   bool   =   False , \n                   configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      instance_id  string  null  No    az  string  null  No    force  boolean  false  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"stop_instance\" , \n     \"module\" :   \"chaosaws.ec2.actions\" \n   }, \n   \"name\" :   \"stop-instance\"  }   name :   stop-instance  provider : \n   func :   stop_instance \n   module :   chaosaws.ec2.actions \n   type :   python  type :   action",
            "title": "stop_instance"
        },
        {
            "location": "/drivers/aws/#stop_instances",
            "text": "Type  action    Module  chaosaws.ec2.actions    Name  stop_instances    Return  mapping     Stop the given EC2 instances or, if none is provided, all instances\nof the given availability zone.  Signature:  def   stop_instances ( \n         instance_ids :   List [ str ]   =   None , \n         az :   str   =   None , \n         force :   bool   =   False , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      instance_ids  list  null  No    az  string  null  No    force  boolean  false  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"stop_instances\" , \n     \"module\" :   \"chaosaws.ec2.actions\" \n   }, \n   \"name\" :   \"stop-instances\"  }   name :   stop-instances  provider : \n   func :   stop_instances \n   module :   chaosaws.ec2.actions \n   type :   python  type :   action",
            "title": "stop_instances"
        },
        {
            "location": "/drivers/aws/#ecs",
            "text": "",
            "title": "ecs"
        },
        {
            "location": "/drivers/aws/#are_all_desired_tasks_running",
            "text": "Type  probe    Module  chaosaws.ecs.probes    Name  are_all_desired_tasks_running    Return  boolean     Checks to make sure desired and running tasks counts are equal  Signature:  def   are_all_desired_tasks_running ( \n         cluster :   str , \n         service :   str , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      cluster  string   Yes    service  string   Yes     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"are_all_desired_tasks_running\" , \n     \"module\" :   \"chaosaws.ecs.probes\" , \n     \"arguments\" :   { \n       \"service\" :   \"\" , \n       \"cluster\" :   \"\" \n     } \n   }, \n   \"name\" :   \"are-all-desired-tasks-running\"  }   name :   are-all-desired-tasks-running  provider : \n   arguments : \n     cluster :   '' \n     service :   '' \n   func :   are_all_desired_tasks_running \n   module :   chaosaws.ecs.probes \n   type :   python  type :   probe",
            "title": "are_all_desired_tasks_running"
        },
        {
            "location": "/drivers/aws/#delete_cluster_1",
            "text": "Type  action    Module  chaosaws.ecs.actions    Name  delete_cluster    Return  mapping     Delete a given ECS cluster  Signature:  def   delete_cluster ( \n         cluster :   str , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      cluster  string   Yes     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_cluster\" , \n     \"module\" :   \"chaosaws.ecs.actions\" , \n     \"arguments\" :   { \n       \"cluster\" :   \"\" \n     } \n   }, \n   \"name\" :   \"delete-cluster\"  }   name :   delete-cluster  provider : \n   arguments : \n     cluster :   '' \n   func :   delete_cluster \n   module :   chaosaws.ecs.actions \n   type :   python  type :   action",
            "title": "delete_cluster"
        },
        {
            "location": "/drivers/aws/#delete_service",
            "text": "Type  action    Module  chaosaws.ecs.actions    Name  delete_service    Return  mapping     Update a given ECS service by updating it to set the desired count of tasks\nto 0 then delete it. If not provided, a random one will be picked up\nregarding  service_pattern , if provided, so that only service names\nmatching the pattern would be be used. This should be a valid regex.  You can specify a cluster by its ARN identifier or, if not provided, the\ndefault cluster will be picked up.  Signature:  def   delete_service ( \n         service :   str   =   None , \n         cluster :   str   =   None , \n         service_pattern :   str   =   None , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      service  string  null  No    cluster  string  null  No    service_pattern  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_service\" , \n     \"module\" :   \"chaosaws.ecs.actions\" \n   }, \n   \"name\" :   \"delete-service\"  }   name :   delete-service  provider : \n   func :   delete_service \n   module :   chaosaws.ecs.actions \n   type :   python  type :   action",
            "title": "delete_service"
        },
        {
            "location": "/drivers/aws/#deregister_container_instance",
            "text": "Type  action    Module  chaosaws.ecs.actions    Name  deregister_container_instance    Return  mapping     Deregister a given ECS container. Becareful that tasks handled by this\ninstance will remain orphan.  Signature:  def   deregister_container_instance ( \n         cluster :   str , \n         instance_id :   str , \n         force :   bool   =   False , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      cluster  string   Yes    instance_id  string   Yes    force  boolean  false  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"deregister_container_instance\" , \n     \"module\" :   \"chaosaws.ecs.actions\" , \n     \"arguments\" :   { \n       \"instance_id\" :   \"\" , \n       \"cluster\" :   \"\" \n     } \n   }, \n   \"name\" :   \"deregister-container-instance\"  }   name :   deregister-container-instance  provider : \n   arguments : \n     cluster :   '' \n     instance_id :   '' \n   func :   deregister_container_instance \n   module :   chaosaws.ecs.actions \n   type :   python  type :   action",
            "title": "deregister_container_instance"
        },
        {
            "location": "/drivers/aws/#service_is_deploying",
            "text": "Type  probe    Module  chaosaws.ecs.probes    Name  service_is_deploying    Return  boolean     Checks to make sure there is not an in progress deployment  Signature:  def   service_is_deploying ( cluster :   str , \n                          service :   str , \n                          configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                          secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      cluster  string   Yes    service  string   Yes     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"service_is_deploying\" , \n     \"module\" :   \"chaosaws.ecs.probes\" , \n     \"arguments\" :   { \n       \"service\" :   \"\" , \n       \"cluster\" :   \"\" \n     } \n   }, \n   \"name\" :   \"service-is-deploying\"  }   name :   service-is-deploying  provider : \n   arguments : \n     cluster :   '' \n     service :   '' \n   func :   service_is_deploying \n   module :   chaosaws.ecs.probes \n   type :   python  type :   probe",
            "title": "service_is_deploying"
        },
        {
            "location": "/drivers/aws/#stop_task",
            "text": "Type  action    Module  chaosaws.ecs.actions    Name  stop_task    Return  mapping     Stop a given ECS task instance. If no task_id provided, a random task of\nthe given service is stopped.  You can specify a cluster by its ARN identifier or, if not provided, the\ndefault cluster will be picked up.  Signature:  def   stop_task ( cluster :   str   =   None , \n               task_id :   str   =   None , \n               service :   str   =   None , \n               reason :   str   =   'Chaos Testing' , \n               configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n               secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      cluster  string  null  No    task_id  string  null  No    service  string  null  No    reason  string  \u201cChaos Testing\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"stop_task\" , \n     \"module\" :   \"chaosaws.ecs.actions\" \n   }, \n   \"name\" :   \"stop-task\"  }   name :   stop-task  provider : \n   func :   stop_task \n   module :   chaosaws.ecs.actions \n   type :   python  type :   action",
            "title": "stop_task"
        },
        {
            "location": "/drivers/aws/#iam",
            "text": "",
            "title": "iam"
        },
        {
            "location": "/drivers/aws/#attach_role_policy",
            "text": "Type  action    Module  chaosaws.iam.actions    Name  attach_role_policy    Return  mapping     Attach a role to a policy.  Signature:  def   attach_role_policy ( \n         arn :   str , \n         role_name :   str , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      arn  string   Yes    role_name  string   Yes     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"attach_role_policy\" , \n     \"module\" :   \"chaosaws.iam.actions\" , \n     \"arguments\" :   { \n       \"arn\" :   \"\" , \n       \"role_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"attach-role-policy\"  }   name :   attach-role-policy  provider : \n   arguments : \n     arn :   '' \n     role_name :   '' \n   func :   attach_role_policy \n   module :   chaosaws.iam.actions \n   type :   python  type :   action",
            "title": "attach_role_policy"
        },
        {
            "location": "/drivers/aws/#create_policy",
            "text": "Type  action    Module  chaosaws.iam.actions    Name  create_policy    Return  mapping     Create a new IAM policy  Signature:  def   create_policy ( name :   str , \n                   policy :   Dict [ str ,   Any ], \n                   path :   str   =   '/' , \n                   description :   str   =   '' , \n                   configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    policy  mapping   Yes    path  string  \u201d/\u201d  No    description  string  \u201d\u201c  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"create_policy\" , \n     \"module\" :   \"chaosaws.iam.actions\" , \n     \"arguments\" :   { \n       \"policy\" :   {}, \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"create-policy\"  }   name :   create-policy  provider : \n   arguments : \n     name :   '' \n     policy :   {} \n   func :   create_policy \n   module :   chaosaws.iam.actions \n   type :   python  type :   action",
            "title": "create_policy"
        },
        {
            "location": "/drivers/aws/#detach_role_policy",
            "text": "Type  action    Module  chaosaws.iam.actions    Name  detach_role_policy    Return  mapping     Detach a role from a policy.  Signature:  def   detach_role_policy ( \n         arn :   str , \n         role_name :   str , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      arn  string   Yes    role_name  string   Yes     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"detach_role_policy\" , \n     \"module\" :   \"chaosaws.iam.actions\" , \n     \"arguments\" :   { \n       \"arn\" :   \"\" , \n       \"role_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"detach-role-policy\"  }   name :   detach-role-policy  provider : \n   arguments : \n     arn :   '' \n     role_name :   '' \n   func :   detach_role_policy \n   module :   chaosaws.iam.actions \n   type :   python  type :   action",
            "title": "detach_role_policy"
        },
        {
            "location": "/drivers/aws/#get_policy",
            "text": "Type  probe    Module  chaosaws.iam.probes    Name  get_policy    Return  boolean     Get a policy by its ARN  Signature:  def   get_policy ( arn :   str , \n                configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      arn  string   Yes     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_policy\" , \n     \"module\" :   \"chaosaws.iam.probes\" , \n     \"arguments\" :   { \n       \"arn\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-policy\"  }   name :   get-policy  provider : \n   arguments : \n     arn :   '' \n   func :   get_policy \n   module :   chaosaws.iam.probes \n   type :   python  type :   probe",
            "title": "get_policy"
        },
        {
            "location": "/drivers/azure/",
            "text": "Extension \nchaosazure\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.1.3\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-azure\n\n\n\n\n\n\n\n\n\n\n\n\nThis project is a collection of \nactions\n and \nprobes\n, gathered as an\nextension to the \nChaos Toolkit\n. It targets the\n\nMicrosoft Azure\n platform.\n\n\nInstall\n\u00b6\n\n\nThis package requires Python 3.5+\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install -U chaostoolkit-azure\n\n\n\n\nUsage\n\u00b6\n\n\nTo use the probes and actions from this package, add the following to your\nexperiment file:\n\n\n{\n\n    \n\"type\"\n:\n \n\"action\"\n,\n\n    \n\"name\"\n:\n \n\"start-service-factory-chaos\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosazure.factory.actions\"\n,\n\n        \n\"func\"\n:\n \n\"start_chaos\"\n,\n\n        \n\"secrets\"\n:\n \n[\n\"azure\"\n],\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"parameters\"\n:\n \n{\n\n                \n\"TimeToRunInSeconds\"\n:\n \n45\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n,\n\n\n{\n\n    \n\"type\"\n:\n \n\"action\"\n,\n\n    \n\"name\"\n:\n \n\"stop-service-factory-chaos\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosazure.factory.actions\"\n,\n\n        \n\"func\"\n:\n \n\"stop_chaos\"\n,\n\n        \n\"secrets\"\n:\n \n[\n\"azure\"\n]\n\n    \n}\n\n\n}\n\n\n\n\n\nThat\u2019s it!\n\n\nPlease explore the code to see existing probes and actions.\n\n\nConfiguration\n\u00b6\n\n\nCredentials\n\u00b6\n\n\nThis extension uses the [requests][] library under the hood. This library\nexpects that you have a PFX certificate, converted as to the PEM format, that\nallows you to authenticate with the \nService Factory\n endpoint.\n\n\nGenerally speaking, there are two ways of doing this:\n\n\n\n\nyou have \ncreated\n a configuration file where you will run the\n  experiment from (so with a \n~/.sfctl/config\n file)\n\n\n\n\nyou explicitely pass the correct environment variables to the experiment\n  definition as follows:\n\n\nConfiguration section:\n\n\n{\n\n    \n\"endpoint\"\n:\n \n\"https://XYZ.westus.cloudapp.azure.com:19080\"\n,\n\n    \n\"verify_tls\"\n:\n \nfalse\n,\n\n    \n\"use_ca\"\n:\n \nfalse\n\n\n}\n\n\n\n\n\nSecrets section:\n\n\n{\n\n    \n\"azure\"\n:\n \n{\n\n        \n\"security\"\n:\n \n\"pem\"\n,\n\n        \n\"pem_path\"\n:\n \n\"./cluster-client-cert.pem\"\n\n    \n}\n\n\n}\n\n\n\n\n\nThe PEM can also be passed as an environment variable:\n\n\n{\n\n    \n\"azure\"\n:\n \n{\n\n        \n\"security\"\n:\n \n\"pem\"\n,\n\n        \n\"pem_content\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"env\"\n,\n\n            \n\"key\"\n:\n \n\"AZURE_PEM\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThe environment variable name can be anything.\n\n\n\n\n\n\nPutting it all together\n\u00b6\n\n\nHere is a full example:\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"...\"\n,\n\n    \n\"description\"\n:\n \n\"...\"\n,\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"endpoint\"\n:\n \n\"https://XYZ.westus.cloudapp.azure.com:19080\"\n,\n\n        \n\"verify_tls\"\n:\n \nfalse\n,\n\n        \n\"use_ca\"\n:\n \nfalse\n\n    \n},\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"azure\"\n:\n \n{\n\n            \n\"security\"\n:\n \n\"pem\"\n,\n\n            \n\"pem_path\"\n:\n \n\"./cluster-client-cert.pem\"\n\n        \n}\n\n    \n},\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"Services is healthy\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"application-must-respond\"\n,\n\n                \n\"tolerance\"\n:\n \n200\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"http\"\n,\n\n                    \n\"verify_tls\"\n:\n \nfalse\n,\n\n                    \n\"url\"\n:\n \n\"https://some-url-in-cluster/\"\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"start-service-factory-chaos\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosazure.factory.actions\"\n,\n\n                \n\"func\"\n:\n \n\"start_chaos\"\n,\n\n                \n\"secrets\"\n:\n \n[\n\"azure\"\n],\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"parameters\"\n:\n \n{\n\n                        \n\"TimeToRunInSeconds\"\n:\n \n45\n\n                    \n}\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n30\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"ref\"\n:\n \n\"application-must-respond\"\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"stop-service-factory-chaos\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosazure.factory.actions\"\n,\n\n                \n\"func\"\n:\n \n\"stop_chaos\"\n,\n\n                \n\"secrets\"\n:\n \n[\n\"azure\"\n]\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n5\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"get-service-factory-chaos-report\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosazure.factory.probes\"\n,\n\n                \n\"func\"\n:\n \n\"chaos_report\"\n,\n\n                \n\"secrets\"\n:\n \n[\n\"azure\"\n],\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"start_time_utc\"\n:\n \n\"1 minute ago\"\n,\n\n                    \n\"end_time_utc\"\n:\n \n\"now\"\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit projects require all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nDevelop\n\u00b6\n\n\nIf you wish to develop on this project, make sure to install the development\ndependencies. But first, \ncreate a virtual environment\n and then install\nthose dependencies.\n\n\n$\n pip install -r requirements-dev.txt -r requirements.txt \n\n\n\n\nThen, point your environment to this directory:\n\n\n$\n python setup.py develop\n\n\n\n\nNow, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the \nchaos\n command locally.\n\n\nTest\n\u00b6\n\n\nTo run the tests for the project execute the following:\n\n\n$ pytest\n\n\n\n\nExported Activities\n\u00b6\n\n\nfabric\n\u00b6\n\n\n\n\nchaos_report\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosazure.fabric.probes\n\n\n\n\n\n\nName\n\n\nchaos_report\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet Chaos report using following the Service Fabric API:\n\n\nhttps://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-v60-model-chaosparameters\n\n\nPlease see the :func:\nchaosazure.fabric.auth\n help for more information\non authenticating with the service.\n\n\nSignature:\n\n\ndef\n \nchaos_report\n(\ntimeout\n:\n \nint\n \n=\n \n60\n,\n\n                 \nstart_time_utc\n:\n \nstr\n \n=\n \nNone\n,\n\n                 \nend_time_utc\n:\n \nstr\n \n=\n \nNone\n,\n\n                 \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                 \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\ninteger\n\n\n60\n\n\nNo\n\n\n\n\n\n\nstart_time_utc\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nend_time_utc\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"chaos_report\"\n,\n\n    \n\"module\"\n:\n \n\"chaosazure.fabric.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"chaos-report\"\n\n\n}\n\n\n\n\n\nname\n:\n \nchaos-report\n\n\nprovider\n:\n\n  \nfunc\n:\n \nchaos_report\n\n  \nmodule\n:\n \nchaosazure.fabric.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nstart_chaos\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosazure.fabric.actions\n\n\n\n\n\n\nName\n\n\nstart_chaos\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nStart Chaos in your cluster using the given \nparameters\n. This is a mapping\nof keys as declared in the Service Fabric API:\n\n\nhttps://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-v60-model-chaosparameters\n\n\nPlease see the :func:\nchaosazure.fabric.auth\n help for more information\non authenticating with the service.\n\n\nSignature:\n\n\ndef\n \nstart_chaos\n(\nparameters\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n\n                \ntimeout\n:\n \nint\n \n=\n \n60\n,\n\n                \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nparameters\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\ntimeout\n\n\ninteger\n\n\n60\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"start_chaos\"\n,\n\n    \n\"module\"\n:\n \n\"chaosazure.fabric.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"parameters\"\n:\n \n{}\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"start-chaos\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstart-chaos\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nparameters\n:\n \n{}\n\n  \nfunc\n:\n \nstart_chaos\n\n  \nmodule\n:\n \nchaosazure.fabric.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nstop_chaos\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosazure.fabric.actions\n\n\n\n\n\n\nName\n\n\nstop_chaos\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nStop Chaos in your cluster.\n\n\nPlease see the :func:\nchaosazure.fabric.auth\n help for more information\non authenticating with the service.\n\n\nSignature:\n\n\ndef\n \nstop_chaos\n(\ntimeout\n:\n \nint\n \n=\n \n60\n,\n\n               \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n               \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\ninteger\n\n\n60\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"stop_chaos\"\n,\n\n    \n\"module\"\n:\n \n\"chaosazure.fabric.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"stop-chaos\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstop-chaos\n\n\nprovider\n:\n\n  \nfunc\n:\n \nstop_chaos\n\n  \nmodule\n:\n \nchaosazure.fabric.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction",
            "title": "Azure"
        },
        {
            "location": "/drivers/azure/#extension-chaosazure",
            "text": "Version  0.1.3    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-azure       This project is a collection of  actions  and  probes , gathered as an\nextension to the  Chaos Toolkit . It targets the Microsoft Azure  platform.",
            "title": "Extension chaosazure"
        },
        {
            "location": "/drivers/azure/#install",
            "text": "This package requires Python 3.5+  To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install -U chaostoolkit-azure",
            "title": "Install"
        },
        {
            "location": "/drivers/azure/#usage",
            "text": "To use the probes and actions from this package, add the following to your\nexperiment file:  { \n     \"type\" :   \"action\" , \n     \"name\" :   \"start-service-factory-chaos\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosazure.factory.actions\" , \n         \"func\" :   \"start_chaos\" , \n         \"secrets\" :   [ \"azure\" ], \n         \"arguments\" :   { \n             \"parameters\" :   { \n                 \"TimeToRunInSeconds\" :   45 \n             } \n         } \n     }  } ,  { \n     \"type\" :   \"action\" , \n     \"name\" :   \"stop-service-factory-chaos\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosazure.factory.actions\" , \n         \"func\" :   \"stop_chaos\" , \n         \"secrets\" :   [ \"azure\" ] \n     }  }   That\u2019s it!  Please explore the code to see existing probes and actions.",
            "title": "Usage"
        },
        {
            "location": "/drivers/azure/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/drivers/azure/#credentials",
            "text": "This extension uses the [requests][] library under the hood. This library\nexpects that you have a PFX certificate, converted as to the PEM format, that\nallows you to authenticate with the  Service Factory  endpoint.  Generally speaking, there are two ways of doing this:   you have  created  a configuration file where you will run the\n  experiment from (so with a  ~/.sfctl/config  file)   you explicitely pass the correct environment variables to the experiment\n  definition as follows:  Configuration section:  { \n     \"endpoint\" :   \"https://XYZ.westus.cloudapp.azure.com:19080\" , \n     \"verify_tls\" :   false , \n     \"use_ca\" :   false  }   Secrets section:  { \n     \"azure\" :   { \n         \"security\" :   \"pem\" , \n         \"pem_path\" :   \"./cluster-client-cert.pem\" \n     }  }   The PEM can also be passed as an environment variable:  { \n     \"azure\" :   { \n         \"security\" :   \"pem\" , \n         \"pem_content\" :   { \n             \"type\" :   \"env\" , \n             \"key\" :   \"AZURE_PEM\" \n         } \n     }  }   The environment variable name can be anything.",
            "title": "Credentials"
        },
        {
            "location": "/drivers/azure/#putting-it-all-together",
            "text": "Here is a full example:  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"...\" , \n     \"description\" :   \"...\" , \n     \"configuration\" :   { \n         \"endpoint\" :   \"https://XYZ.westus.cloudapp.azure.com:19080\" , \n         \"verify_tls\" :   false , \n         \"use_ca\" :   false \n     }, \n     \"secrets\" :   { \n         \"azure\" :   { \n             \"security\" :   \"pem\" , \n             \"pem_path\" :   \"./cluster-client-cert.pem\" \n         } \n     }, \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"Services is healthy\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"application-must-respond\" , \n                 \"tolerance\" :   200 , \n                 \"provider\" :   { \n                     \"type\" :   \"http\" , \n                     \"verify_tls\" :   false , \n                     \"url\" :   \"https://some-url-in-cluster/\" \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"start-service-factory-chaos\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosazure.factory.actions\" , \n                 \"func\" :   \"start_chaos\" , \n                 \"secrets\" :   [ \"azure\" ], \n                 \"arguments\" :   { \n                     \"parameters\" :   { \n                         \"TimeToRunInSeconds\" :   45 \n                     } \n                 } \n             }, \n             \"pauses\" :   { \n                 \"after\" :   30 \n             } \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"ref\" :   \"application-must-respond\" \n         }, \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"stop-service-factory-chaos\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosazure.factory.actions\" , \n                 \"func\" :   \"stop_chaos\" , \n                 \"secrets\" :   [ \"azure\" ] \n             }, \n             \"pauses\" :   { \n                 \"after\" :   5 \n             } \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"get-service-factory-chaos-report\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosazure.factory.probes\" , \n                 \"func\" :   \"chaos_report\" , \n                 \"secrets\" :   [ \"azure\" ], \n                 \"arguments\" :   { \n                     \"start_time_utc\" :   \"1 minute ago\" , \n                     \"end_time_utc\" :   \"now\" \n                 } \n             } \n         } \n     ]  }",
            "title": "Putting it all together"
        },
        {
            "location": "/drivers/azure/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.  The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/azure/#develop",
            "text": "If you wish to develop on this project, make sure to install the development\ndependencies. But first,  create a virtual environment  and then install\nthose dependencies.  $  pip install -r requirements-dev.txt -r requirements.txt   Then, point your environment to this directory:  $  python setup.py develop  Now, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the  chaos  command locally.",
            "title": "Develop"
        },
        {
            "location": "/drivers/azure/#test",
            "text": "To run the tests for the project execute the following:  $ pytest",
            "title": "Test"
        },
        {
            "location": "/drivers/azure/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/azure/#fabric",
            "text": "",
            "title": "fabric"
        },
        {
            "location": "/drivers/azure/#chaos_report",
            "text": "Type  probe    Module  chaosazure.fabric.probes    Name  chaos_report    Return  mapping     Get Chaos report using following the Service Fabric API:  https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-v60-model-chaosparameters  Please see the :func: chaosazure.fabric.auth  help for more information\non authenticating with the service.  Signature:  def   chaos_report ( timeout :   int   =   60 , \n                  start_time_utc :   str   =   None , \n                  end_time_utc :   str   =   None , \n                  configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                  secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      timeout  integer  60  No    start_time_utc  string  null  No    end_time_utc  string  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"chaos_report\" , \n     \"module\" :   \"chaosazure.fabric.probes\" \n   }, \n   \"name\" :   \"chaos-report\"  }   name :   chaos-report  provider : \n   func :   chaos_report \n   module :   chaosazure.fabric.probes \n   type :   python  type :   probe",
            "title": "chaos_report"
        },
        {
            "location": "/drivers/azure/#start_chaos",
            "text": "Type  action    Module  chaosazure.fabric.actions    Name  start_chaos    Return  mapping     Start Chaos in your cluster using the given  parameters . This is a mapping\nof keys as declared in the Service Fabric API:  https://docs.microsoft.com/en-us/rest/api/servicefabric/sfclient-v60-model-chaosparameters  Please see the :func: chaosazure.fabric.auth  help for more information\non authenticating with the service.  Signature:  def   start_chaos ( parameters :   Dict [ str ,   Any ], \n                 timeout :   int   =   60 , \n                 configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                 secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      parameters  mapping   Yes    timeout  integer  60  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"start_chaos\" , \n     \"module\" :   \"chaosazure.fabric.actions\" , \n     \"arguments\" :   { \n       \"parameters\" :   {} \n     } \n   }, \n   \"name\" :   \"start-chaos\"  }   name :   start-chaos  provider : \n   arguments : \n     parameters :   {} \n   func :   start_chaos \n   module :   chaosazure.fabric.actions \n   type :   python  type :   action",
            "title": "start_chaos"
        },
        {
            "location": "/drivers/azure/#stop_chaos",
            "text": "Type  action    Module  chaosazure.fabric.actions    Name  stop_chaos    Return  mapping     Stop Chaos in your cluster.  Please see the :func: chaosazure.fabric.auth  help for more information\non authenticating with the service.  Signature:  def   stop_chaos ( timeout :   int   =   60 , \n                configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      timeout  integer  60  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"stop_chaos\" , \n     \"module\" :   \"chaosazure.fabric.actions\" \n   }, \n   \"name\" :   \"stop-chaos\"  }   name :   stop-chaos  provider : \n   func :   stop_chaos \n   module :   chaosazure.fabric.actions \n   type :   python  type :   action",
            "title": "stop_chaos"
        },
        {
            "location": "/drivers/cloudfoundry/",
            "text": "Extension \nchaoscf\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.5.1\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-cloud-foundry\n\n\n\n\n\n\n\n\n\n\nThis extension package provides probes and actions for Chaos Engineering\nexperiments against a Cloud Foundry instance using the\n\nChaos Toolkit\n.\n\n\nInstall\n\u00b6\n\n\nThis package requires Python 3.5+\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install -U chaostoolkit-cloud-foundry\n\n\n\n\nUsage\n\u00b6\n\n\nTo use the probes and actions from this package, add a similar payload to your\nexperiment file:\n\n\n{\n\n    \n\"type\"\n:\n \n\"action\"\n,\n\n    \n\"name\"\n:\n \n\"terminate-random-instance\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaoscf.probes\"\n,\n\n        \n\"func\"\n:\n \n\"terminate_some_random_instance\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"my-app\"\n,\n\n            \n\"org_name\"\n:\n \n\"my-org\"\n,\n\n            \n\"space_name\"\n:\n \n\"my-space\"\n\n        \n}\n\n    \n}\n\n\n}\n,\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"fetch-app-statistics\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaoscf.probes\"\n,\n\n        \n\"func\"\n:\n \n\"get_app_stats\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"my-app\"\n,\n\n            \n\"org_name\"\n:\n \n\"my-org\"\n,\n\n            \n\"space_name\"\n:\n \n\"my-space\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThat\u2019s it!\n\n\nPlease explore the code to see existing probes and actions.\n\n\nDiscovery\n\u00b6\n\n\nYou may use the Chaos Toolkit to discover the capabilities of this extension:\n\n\n$ chaos discover chaostoolkit-cloud-foundry --no-install\n\n\n\n\nIf you have logged in against a Cloud Foundry environment, this will discover\ninformation about it along the way.\n\n\nConfiguration\n\u00b6\n\n\nThis extension to the Chaos Toolkit need credentials to a Cloud Foundry account\nwith appropriate scopes. Please add the following sections to your experiment\nfile:\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"cf_api_url\"\n:\n \n\"https://api.local.pcfdev.io\"\n,\n\n        \n\"cf_verify_ssl\"\n:\n \nfalse\n\n    \n},\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"cloudfoundry\"\n:\n \n{\n\n            \n\"cf_username\"\n:\n \n\"user\"\n,\n\n            \n\"cf_password\"\n:\n \n\"pass\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nYou may leave \n\"cf_verifiy_ssl\"\n out of the configuration when you want to\nverify TLS certificates. Usually, local environments are self-signed so it\nmay be useful to disable that check in that case.\n\n\nYou may also specify the \n\"cf_client_id\"\n and \n\"cf_client_secret\"\n secrets\nwhen you need. Their default values are \n\"cf\"\n and \n\"\"\n respectively. These\nwork well against a local \nPCF dev\n install.\n\n\nThen in your probe or action:\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"fetch-app-statistics\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"secrets\"\n:\n \n[\n\"cloudfoundry\"\n],\n\n        \n\"module\"\n:\n \n\"chaoscf.probes\"\n,\n\n        \n\"func\"\n:\n \n\"get_app_stats\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"my-app\"\n,\n\n            \n\"org_name\"\n:\n \n\"my-org\"\n,\n\n            \n\"space_name\"\n:\n \n\"my-space\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nTest\n\u00b6\n\n\nTo run the tests for the project execute the following:\n\n\n$ pip install -r requirements-dev.txt\n$ pytest\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit project requires all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nExported Activities\n\u00b6\n\n\napi\n\u00b6\n\n\n\n\ncall_api\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\ncall_api\n\n\n\n\n\n\nReturn\n\n\nrequests.models.Response\n\n\n\n\n\n\n\n\nPerform a Cloud Foundry API call and return the full response to the\ncaller.\n\n\nSignature:\n\n\ndef\n \ncall_api\n(\npath\n:\n \nstr\n,\n\n             \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n             \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n             \nquery\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n\n             \ndata\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n\n             \nmethod\n:\n \nstr\n \n=\n \n'GET'\n,\n\n             \nheaders\n:\n \nDict\n[\nstr\n,\n \nstr\n]\n \n=\n \nNone\n)\n \n->\n \nrequests\n.\nmodels\n.\nResponse\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nquery\n\n\nmapping\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ndata\n\n\nmapping\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\n\u201cGET\u201d\n\n\nNo\n\n\n\n\n\n\nheaders\n\n\nmapping\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"call_api\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"path\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"call-api\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncall-api\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \npath\n:\n \n''\n\n  \nfunc\n:\n \ncall_api\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_app_by_name\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_app_by_name\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet the application with the given name.\n\n\nYou may restrict the search by organization and/or space by providing the\nvarious according parameters. When passing the names, the function performs\na lookup for each of them to fetch their GUID.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/list_all_apps.html\n\n\nSignature:\n\n\ndef\n \nget_app_by_name\n(\napp_name\n:\n \nstr\n,\n\n                    \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                    \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                    \nspace_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                    \nspace_guid\n:\n \nstr\n \n=\n \nNone\n,\n\n                    \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                    \norg_guid\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_app_by_name\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-app-by-name\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-app-by-name\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n  \nfunc\n:\n \nget_app_by_name\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_app_instances\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_app_instances\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet all the instances of a started application.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/get_the_instance_information_for_a_started_app.html\n\n\nSignature:\n\n\ndef\n \nget_app_instances\n(\napp_name\n:\n \nstr\n,\n\n                      \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                      \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                      \nspace_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                      \nspace_guid\n:\n \nstr\n \n=\n \nNone\n,\n\n                      \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                      \norg_guid\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nAny\n]]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_app_instances\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-app-instances\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-app-instances\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n  \nfunc\n:\n \nget_app_instances\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_app_routes_by_host\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_app_routes_by_host\n\n\n\n\n\n\nReturn\n\n\nlist\n\n\n\n\n\n\n\n\nGet all routes associated with the provided app and the given host.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/routes/list_all_routes.html\n\n\nSignature:\n\n\ndef\n \nget_app_routes_by_host\n(\napp_name\n:\n \nstr\n,\n\n                           \nroute_host\n:\n \nstr\n,\n\n                           \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \nspace_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                           \nspace_guid\n:\n \nstr\n \n=\n \nNone\n,\n\n                           \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                           \norg_guid\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nList\n[\nDict\n[\nstr\n,\n \nAny\n]]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nroute_host\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_app_routes_by_host\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"route_host\"\n:\n \n\"\"\n,\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-app-routes-by-host\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-app-routes-by-host\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \nroute_host\n:\n \n''\n\n  \nfunc\n:\n \nget_app_routes_by_host\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_bind_by_name\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_bind_by_name\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet the service bind with the given name.\n\n\nYou may restrict the search by organization and/or space by providing the\nvarious according parameters. When passing the names, the function performs\na lookup for each of them to fetch their GUID.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/list_all_apps.html\n\n\nSignature:\n\n\ndef\n \nget_bind_by_name\n(\nbind_name\n:\n \nstr\n,\n\n                     \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                     \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                     \nspace_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                     \nspace_guid\n:\n \nstr\n \n=\n \nNone\n,\n\n                     \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                     \norg_guid\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbind_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_bind_by_name\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"bind_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-bind-by-name\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-bind-by-name\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nbind_name\n:\n \n''\n\n  \nfunc\n:\n \nget_bind_by_name\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_org_by_name\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_org_by_name\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet the organization with the given name.\n\n\nSignature:\n\n\ndef\n \nget_org_by_name\n(\norg_name\n:\n \nstr\n,\n \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                    \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_org_by_name\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"org_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-org-by-name\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-org-by-name\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \norg_name\n:\n \n''\n\n  \nfunc\n:\n \nget_org_by_name\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_routes_by_host\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_routes_by_host\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet all routes with given host.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/routes/list_all_routes.html\n\n\nSignature:\n\n\ndef\n \nget_routes_by_host\n(\nroute_host\n:\n \nstr\n,\n\n                       \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                       \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                       \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                       \norg_guid\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nroute_host\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_routes_by_host\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"route_host\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-routes-by-host\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-routes-by-host\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nroute_host\n:\n \n''\n\n  \nfunc\n:\n \nget_routes_by_host\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\n\n\nget_space_by_name\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoscf.api\n\n\n\n\n\n\nName\n\n\nget_space_by_name\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nGet the space with the given name.\n\n\nYou may restrict the search by organization by providing the\nvarious according parameters. When passing the name, the function performs\na lookup for the org to fetch its GUID.\n\n\nSignature:\n\n\ndef\n \nget_space_by_name\n(\nspace_name\n:\n \nstr\n,\n\n                      \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                      \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                      \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                      \norg_guid\n=\nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\norg_guid\n\n\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_space_by_name\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.api\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"space_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-space-by-name\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-space-by-name\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nspace_name\n:\n \n''\n\n  \nfunc\n:\n \nget_space_by_name\n\n  \nmodule\n:\n \nchaoscf.api\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''\n\n\n\n\n\nactions\n\u00b6\n\n\n\n\ndelete_app\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\ndelete_app\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nDelete application.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/delete_a_particular_app.html\n\n\nSignature:\n\n\ndef\n \ndelete_app\n(\napp_name\n:\n \nstr\n,\n\n               \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n               \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n               \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n               \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_app\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-app\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-app\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n  \nfunc\n:\n \ndelete_app\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nmap_route_to_app\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nmap_route_to_app\n\n\n\n\n\n\nReturn\n\n\nlist\n\n\n\n\n\n\n\n\nMap a specific route to a given application.\n\n\nAs Domains are deprecated in the Cloud Foundry API, they are not\nspecified here.\nSee\n\nhttps://apidocs.cloudfoundry.org/280/#domains--deprecated-\n\nSee\n\nhttps://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html\n\n\nSignature:\n\n\ndef\n \nmap_route_to_app\n(\napp_name\n:\n \nstr\n,\n\n                     \nhost_name\n:\n \nstr\n,\n\n                     \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                     \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                     \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                     \nspace_name\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nList\n[\nDict\n[\nstr\n,\n \nAny\n]]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nhost_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"map_route_to_app\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n,\n\n      \n\"host_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"map-route-to-app\"\n\n\n}\n\n\n\n\n\nname\n:\n \nmap-route-to-app\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \nhost_name\n:\n \n''\n\n  \nfunc\n:\n \nmap_route_to_app\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nremove_routes_from_app\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nremove_routes_from_app\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nRemove routes from a given application.\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html\n\n\nSignature:\n\n\ndef\n \nremove_routes_from_app\n(\napp_name\n:\n \nstr\n,\n\n                           \nroute_host\n:\n \nstr\n,\n\n                           \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                           \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nroute_host\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"remove_routes_from_app\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"route_host\"\n:\n \n\"\"\n,\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"remove-routes-from-app\"\n\n\n}\n\n\n\n\n\nname\n:\n \nremove-routes-from-app\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \nroute_host\n:\n \n''\n\n  \nfunc\n:\n \nremove_routes_from_app\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nterminate_app_instance\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nterminate_app_instance\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nTerminate the application\u2019s instance at the given index.\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html\n\n\nSignature:\n\n\ndef\n \nterminate_app_instance\n(\napp_name\n:\n \nstr\n,\n\n                           \ninstance_index\n:\n \nint\n,\n\n                           \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                           \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                           \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\ninstance_index\n\n\ninteger\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"terminate_app_instance\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"instance_index\"\n:\n \n0\n,\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"terminate-app-instance\"\n\n\n}\n\n\n\n\n\nname\n:\n \nterminate-app-instance\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \ninstance_index\n:\n \n0\n\n  \nfunc\n:\n \nterminate_app_instance\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nterminate_some_random_instance\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nterminate_some_random_instance\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nTerminate a random application\u2019s instance.\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html\n\n\nSignature:\n\n\ndef\n \nterminate_some_random_instance\n(\napp_name\n:\n \nstr\n,\n\n                                   \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                                   \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                                   \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                                   \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"terminate_some_random_instance\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"terminate-some-random-instance\"\n\n\n}\n\n\n\n\n\nname\n:\n \nterminate-some-random-instance\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n  \nfunc\n:\n \nterminate_some_random_instance\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nunbind_service_from_app\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nunbind_service_from_app\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nUnbind the service from the given application.\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/service_bindings/delete_a_particular_service_binding.html\n\n\nSignature:\n\n\ndef\n \nunbind_service_from_app\n(\napp_name\n:\n \nstr\n,\n\n                            \nbind_name\n:\n \nstr\n,\n\n                            \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                            \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                            \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                            \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nbind_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"unbind_service_from_app\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n,\n\n      \n\"bind_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"unbind-service-from-app\"\n\n\n}\n\n\n\n\n\nname\n:\n \nunbind-service-from-app\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \nbind_name\n:\n \n''\n\n  \nfunc\n:\n \nunbind_service_from_app\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nunmap_route_from_app\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaoscf.actions\n\n\n\n\n\n\nName\n\n\nunmap_route_from_app\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nUnmap a specific route from a given application.\n\n\nAs Domains are deprecated in the Cloud Foundry API, they are not\nspecified here.\nSee\n\nhttps://apidocs.cloudfoundry.org/280/#domains--deprecated-\n\nSee\n\nhttps://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/\n\n\nSee\n\nhttps://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html\n\n\nSignature:\n\n\ndef\n \nunmap_route_from_app\n(\napp_name\n:\n \nstr\n,\n\n                         \nhost_name\n:\n \nstr\n,\n\n                         \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                         \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                         \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                         \nspace_name\n:\n \nstr\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nhost_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"unmap_route_from_app\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n,\n\n      \n\"host_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"unmap-route-from-app\"\n\n\n}\n\n\n\n\n\nname\n:\n \nunmap-route-from-app\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n    \nhost_name\n:\n \n''\n\n  \nfunc\n:\n \nunmap_route_from_app\n\n  \nmodule\n:\n \nchaoscf.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\nprobes\n\u00b6\n\n\n\n\nget_app_stats\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaoscf.probes\n\n\n\n\n\n\nName\n\n\nget_app_stats\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nFetch the metrics of the given application.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/get_detailed_stats_for_a_started_app.html\n\nfor more information.\n\n\nSignature:\n\n\ndef\n \nget_app_stats\n(\napp_name\n:\n \nstr\n,\n\n                  \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n                  \norg_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nspace_name\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\norg_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspace_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"get_app_stats\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"app_name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"get-app-stats\"\n\n\n}\n\n\n\n\n\nname\n:\n \nget-app-stats\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \napp_name\n:\n \n''\n\n  \nfunc\n:\n \nget_app_stats\n\n  \nmodule\n:\n \nchaoscf.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nlist_apps\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaoscf.probes\n\n\n\n\n\n\nName\n\n\nlist_apps\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nList all applications available to the authorized user.\n\n\nSee \nhttps://apidocs.cloudfoundry.org/280/apps/list_all_apps.html\n to\nunderstand the content of the response.\n\n\nSignature:\n\n\ndef\n \nlist_apps\n(\nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]],\n\n              \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"list_apps\"\n,\n\n    \n\"module\"\n:\n \n\"chaoscf.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"list-apps\"\n\n\n}\n\n\n\n\n\nname\n:\n \nlist-apps\n\n\nprovider\n:\n\n  \nfunc\n:\n \nlist_apps\n\n  \nmodule\n:\n \nchaoscf.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe",
            "title": "Cloud Foundry"
        },
        {
            "location": "/drivers/cloudfoundry/#extension-chaoscf",
            "text": "Version  0.5.1    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-cloud-foundry      This extension package provides probes and actions for Chaos Engineering\nexperiments against a Cloud Foundry instance using the Chaos Toolkit .",
            "title": "Extension chaoscf"
        },
        {
            "location": "/drivers/cloudfoundry/#install",
            "text": "This package requires Python 3.5+  To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install -U chaostoolkit-cloud-foundry",
            "title": "Install"
        },
        {
            "location": "/drivers/cloudfoundry/#usage",
            "text": "To use the probes and actions from this package, add a similar payload to your\nexperiment file:  { \n     \"type\" :   \"action\" , \n     \"name\" :   \"terminate-random-instance\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaoscf.probes\" , \n         \"func\" :   \"terminate_some_random_instance\" , \n         \"arguments\" :   { \n             \"name\" :   \"my-app\" , \n             \"org_name\" :   \"my-org\" , \n             \"space_name\" :   \"my-space\" \n         } \n     }  } ,  { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"fetch-app-statistics\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaoscf.probes\" , \n         \"func\" :   \"get_app_stats\" , \n         \"arguments\" :   { \n             \"name\" :   \"my-app\" , \n             \"org_name\" :   \"my-org\" , \n             \"space_name\" :   \"my-space\" \n         } \n     }  }   That\u2019s it!  Please explore the code to see existing probes and actions.",
            "title": "Usage"
        },
        {
            "location": "/drivers/cloudfoundry/#discovery",
            "text": "You may use the Chaos Toolkit to discover the capabilities of this extension:  $ chaos discover chaostoolkit-cloud-foundry --no-install  If you have logged in against a Cloud Foundry environment, this will discover\ninformation about it along the way.",
            "title": "Discovery"
        },
        {
            "location": "/drivers/cloudfoundry/#configuration",
            "text": "This extension to the Chaos Toolkit need credentials to a Cloud Foundry account\nwith appropriate scopes. Please add the following sections to your experiment\nfile:  { \n     \"configuration\" :   { \n         \"cf_api_url\" :   \"https://api.local.pcfdev.io\" , \n         \"cf_verify_ssl\" :   false \n     }, \n     \"secrets\" :   { \n         \"cloudfoundry\" :   { \n             \"cf_username\" :   \"user\" , \n             \"cf_password\" :   \"pass\" \n         } \n     }  }   You may leave  \"cf_verifiy_ssl\"  out of the configuration when you want to\nverify TLS certificates. Usually, local environments are self-signed so it\nmay be useful to disable that check in that case.  You may also specify the  \"cf_client_id\"  and  \"cf_client_secret\"  secrets\nwhen you need. Their default values are  \"cf\"  and  \"\"  respectively. These\nwork well against a local  PCF dev  install.  Then in your probe or action:  { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"fetch-app-statistics\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"secrets\" :   [ \"cloudfoundry\" ], \n         \"module\" :   \"chaoscf.probes\" , \n         \"func\" :   \"get_app_stats\" , \n         \"arguments\" :   { \n             \"name\" :   \"my-app\" , \n             \"org_name\" :   \"my-org\" , \n             \"space_name\" :   \"my-space\" \n         } \n     }  }",
            "title": "Configuration"
        },
        {
            "location": "/drivers/cloudfoundry/#test",
            "text": "To run the tests for the project execute the following:  $ pip install -r requirements-dev.txt\n$ pytest",
            "title": "Test"
        },
        {
            "location": "/drivers/cloudfoundry/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.  The Chaos Toolkit project requires all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/cloudfoundry/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/cloudfoundry/#api",
            "text": "",
            "title": "api"
        },
        {
            "location": "/drivers/cloudfoundry/#call_api",
            "text": "Type     Module  chaoscf.api    Name  call_api    Return  requests.models.Response     Perform a Cloud Foundry API call and return the full response to the\ncaller.  Signature:  def   call_api ( path :   str , \n              configuration :   Dict [ str ,   Dict [ str ,   str ]], \n              secrets :   Dict [ str ,   Dict [ str ,   str ]], \n              query :   Dict [ str ,   Any ]   =   None , \n              data :   Dict [ str ,   Any ]   =   None , \n              method :   str   =   'GET' , \n              headers :   Dict [ str ,   str ]   =   None )   ->   requests . models . Response : \n     pass   Arguments:     Name  Type  Default  Required      path  string   Yes    query  mapping  null  No    data  mapping  null  No    method  string  \u201cGET\u201d  No    headers  mapping  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"call_api\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"path\" :   \"\" \n     } \n   }, \n   \"name\" :   \"call-api\"  }   name :   call-api  provider : \n   arguments : \n     path :   '' \n   func :   call_api \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "call_api"
        },
        {
            "location": "/drivers/cloudfoundry/#get_app_by_name",
            "text": "Type     Module  chaoscf.api    Name  get_app_by_name    Return  mapping     Get the application with the given name.  You may restrict the search by organization and/or space by providing the\nvarious according parameters. When passing the names, the function performs\na lookup for each of them to fetch their GUID.  See  https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html  Signature:  def   get_app_by_name ( app_name :   str , \n                     configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                     secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                     space_name :   str   =   None , \n                     space_guid :   str   =   None , \n                     org_name :   str   =   None , \n                     org_guid :   str   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    space_name  string  null  No    space_guid  string  null  No    org_name  string  null  No    org_guid  string  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_app_by_name\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-app-by-name\"  }   name :   get-app-by-name  provider : \n   arguments : \n     app_name :   '' \n   func :   get_app_by_name \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_app_by_name"
        },
        {
            "location": "/drivers/cloudfoundry/#get_app_instances",
            "text": "Type     Module  chaoscf.api    Name  get_app_instances    Return  mapping     Get all the instances of a started application.  See  https://apidocs.cloudfoundry.org/280/apps/get_the_instance_information_for_a_started_app.html  Signature:  def   get_app_instances ( app_name :   str , \n                       configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                       secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                       space_name :   str   =   None , \n                       space_guid :   str   =   None , \n                       org_name :   str   =   None , \n                       org_guid :   str   =   None )   ->   Dict [ str ,   Dict [ str ,   Any ]]: \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    space_name  string  null  No    space_guid  string  null  No    org_name  string  null  No    org_guid  string  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_app_instances\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-app-instances\"  }   name :   get-app-instances  provider : \n   arguments : \n     app_name :   '' \n   func :   get_app_instances \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_app_instances"
        },
        {
            "location": "/drivers/cloudfoundry/#get_app_routes_by_host",
            "text": "Type     Module  chaoscf.api    Name  get_app_routes_by_host    Return  list     Get all routes associated with the provided app and the given host.  See  https://apidocs.cloudfoundry.org/280/routes/list_all_routes.html  Signature:  def   get_app_routes_by_host ( app_name :   str , \n                            route_host :   str , \n                            configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                            secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                            space_name :   str   =   None , \n                            space_guid :   str   =   None , \n                            org_name :   str   =   None , \n                            org_guid :   str   =   None )   ->   List [ Dict [ str ,   Any ]]: \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    route_host  string   Yes    space_name  string  null  No    space_guid  string  null  No    org_name  string  null  No    org_guid  string  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_app_routes_by_host\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"route_host\" :   \"\" , \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-app-routes-by-host\"  }   name :   get-app-routes-by-host  provider : \n   arguments : \n     app_name :   '' \n     route_host :   '' \n   func :   get_app_routes_by_host \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_app_routes_by_host"
        },
        {
            "location": "/drivers/cloudfoundry/#get_bind_by_name",
            "text": "Type     Module  chaoscf.api    Name  get_bind_by_name    Return  mapping     Get the service bind with the given name.  You may restrict the search by organization and/or space by providing the\nvarious according parameters. When passing the names, the function performs\na lookup for each of them to fetch their GUID.  See  https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html  Signature:  def   get_bind_by_name ( bind_name :   str , \n                      configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                      secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                      space_name :   str   =   None , \n                      space_guid :   str   =   None , \n                      org_name :   str   =   None , \n                      org_guid :   str   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      bind_name  string   Yes    space_name  string  null  No    space_guid  string  null  No    org_name  string  null  No    org_guid  string  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_bind_by_name\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"bind_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-bind-by-name\"  }   name :   get-bind-by-name  provider : \n   arguments : \n     bind_name :   '' \n   func :   get_bind_by_name \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_bind_by_name"
        },
        {
            "location": "/drivers/cloudfoundry/#get_org_by_name",
            "text": "Type     Module  chaoscf.api    Name  get_org_by_name    Return  mapping     Get the organization with the given name.  Signature:  def   get_org_by_name ( org_name :   str ,   configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                     secrets :   Dict [ str ,   Dict [ str ,   str ]])   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      org_name  string   Yes     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_org_by_name\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"org_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-org-by-name\"  }   name :   get-org-by-name  provider : \n   arguments : \n     org_name :   '' \n   func :   get_org_by_name \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_org_by_name"
        },
        {
            "location": "/drivers/cloudfoundry/#get_routes_by_host",
            "text": "Type     Module  chaoscf.api    Name  get_routes_by_host    Return  mapping     Get all routes with given host.  See  https://apidocs.cloudfoundry.org/280/routes/list_all_routes.html  Signature:  def   get_routes_by_host ( route_host :   str , \n                        configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                        secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                        org_name :   str   =   None , \n                        org_guid :   str   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      route_host  string   Yes    org_name  string  null  No    org_guid  string  null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_routes_by_host\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"route_host\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-routes-by-host\"  }   name :   get-routes-by-host  provider : \n   arguments : \n     route_host :   '' \n   func :   get_routes_by_host \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_routes_by_host"
        },
        {
            "location": "/drivers/cloudfoundry/#get_space_by_name",
            "text": "Type     Module  chaoscf.api    Name  get_space_by_name    Return  mapping     Get the space with the given name.  You may restrict the search by organization by providing the\nvarious according parameters. When passing the name, the function performs\na lookup for the org to fetch its GUID.  Signature:  def   get_space_by_name ( space_name :   str , \n                       configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                       secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                       org_name :   str   =   None , \n                       org_guid = None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      space_name  string   Yes    org_name  string  null  No    org_guid   null  No     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_space_by_name\" , \n     \"module\" :   \"chaoscf.api\" , \n     \"arguments\" :   { \n       \"space_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-space-by-name\"  }   name :   get-space-by-name  provider : \n   arguments : \n     space_name :   '' \n   func :   get_space_by_name \n   module :   chaoscf.api \n   type :   python  type :   ''",
            "title": "get_space_by_name"
        },
        {
            "location": "/drivers/cloudfoundry/#actions",
            "text": "",
            "title": "actions"
        },
        {
            "location": "/drivers/cloudfoundry/#delete_app",
            "text": "Type  action    Module  chaoscf.actions    Name  delete_app    Return  None     Delete application.  See  https://apidocs.cloudfoundry.org/280/apps/delete_a_particular_app.html  Signature:  def   delete_app ( app_name :   str , \n                configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                org_name :   str   =   None , \n                space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_app\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"delete-app\"  }   name :   delete-app  provider : \n   arguments : \n     app_name :   '' \n   func :   delete_app \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "delete_app"
        },
        {
            "location": "/drivers/cloudfoundry/#map_route_to_app",
            "text": "Type  action    Module  chaoscf.actions    Name  map_route_to_app    Return  list     Map a specific route to a given application.  As Domains are deprecated in the Cloud Foundry API, they are not\nspecified here.\nSee https://apidocs.cloudfoundry.org/280/#domains--deprecated- \nSee https://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/  See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html  Signature:  def   map_route_to_app ( app_name :   str , \n                      host_name :   str , \n                      configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                      secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                      org_name :   str   =   None , \n                      space_name :   str   =   None )   ->   List [ Dict [ str ,   Any ]]: \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    host_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"map_route_to_app\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" , \n       \"host_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"map-route-to-app\"  }   name :   map-route-to-app  provider : \n   arguments : \n     app_name :   '' \n     host_name :   '' \n   func :   map_route_to_app \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "map_route_to_app"
        },
        {
            "location": "/drivers/cloudfoundry/#remove_routes_from_app",
            "text": "Type  action    Module  chaoscf.actions    Name  remove_routes_from_app    Return  None     Remove routes from a given application.  See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html  Signature:  def   remove_routes_from_app ( app_name :   str , \n                            route_host :   str , \n                            configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                            secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                            org_name :   str   =   None , \n                            space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    route_host  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"remove_routes_from_app\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"route_host\" :   \"\" , \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"remove-routes-from-app\"  }   name :   remove-routes-from-app  provider : \n   arguments : \n     app_name :   '' \n     route_host :   '' \n   func :   remove_routes_from_app \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "remove_routes_from_app"
        },
        {
            "location": "/drivers/cloudfoundry/#terminate_app_instance",
            "text": "Type  action    Module  chaoscf.actions    Name  terminate_app_instance    Return  None     Terminate the application\u2019s instance at the given index.  See https://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html  Signature:  def   terminate_app_instance ( app_name :   str , \n                            instance_index :   int , \n                            configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                            secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                            org_name :   str   =   None , \n                            space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    instance_index  integer   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"terminate_app_instance\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"instance_index\" :   0 , \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"terminate-app-instance\"  }   name :   terminate-app-instance  provider : \n   arguments : \n     app_name :   '' \n     instance_index :   0 \n   func :   terminate_app_instance \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "terminate_app_instance"
        },
        {
            "location": "/drivers/cloudfoundry/#terminate_some_random_instance",
            "text": "Type  action    Module  chaoscf.actions    Name  terminate_some_random_instance    Return  None     Terminate a random application\u2019s instance.  See https://apidocs.cloudfoundry.org/280/apps/terminate_the_running_app_instance_at_the_given_index.html  Signature:  def   terminate_some_random_instance ( app_name :   str , \n                                    configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                                    secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                                    org_name :   str   =   None , \n                                    space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"terminate_some_random_instance\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"terminate-some-random-instance\"  }   name :   terminate-some-random-instance  provider : \n   arguments : \n     app_name :   '' \n   func :   terminate_some_random_instance \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "terminate_some_random_instance"
        },
        {
            "location": "/drivers/cloudfoundry/#unbind_service_from_app",
            "text": "Type  action    Module  chaoscf.actions    Name  unbind_service_from_app    Return  None     Unbind the service from the given application.  See https://apidocs.cloudfoundry.org/280/service_bindings/delete_a_particular_service_binding.html  Signature:  def   unbind_service_from_app ( app_name :   str , \n                             bind_name :   str , \n                             configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                             secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                             org_name :   str   =   None , \n                             space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    bind_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"unbind_service_from_app\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" , \n       \"bind_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"unbind-service-from-app\"  }   name :   unbind-service-from-app  provider : \n   arguments : \n     app_name :   '' \n     bind_name :   '' \n   func :   unbind_service_from_app \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "unbind_service_from_app"
        },
        {
            "location": "/drivers/cloudfoundry/#unmap_route_from_app",
            "text": "Type  action    Module  chaoscf.actions    Name  unmap_route_from_app    Return  None     Unmap a specific route from a given application.  As Domains are deprecated in the Cloud Foundry API, they are not\nspecified here.\nSee https://apidocs.cloudfoundry.org/280/#domains--deprecated- \nSee https://www.cloudfoundry.org/blog/coming-changes-app-manifest-simplification/  See https://apidocs.cloudfoundry.org/280/apps/remove_route_from_the_app.html  Signature:  def   unmap_route_from_app ( app_name :   str , \n                          host_name :   str , \n                          configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                          secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                          org_name :   str   =   None , \n                          space_name :   str   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    host_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"unmap_route_from_app\" , \n     \"module\" :   \"chaoscf.actions\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" , \n       \"host_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"unmap-route-from-app\"  }   name :   unmap-route-from-app  provider : \n   arguments : \n     app_name :   '' \n     host_name :   '' \n   func :   unmap_route_from_app \n   module :   chaoscf.actions \n   type :   python  type :   action",
            "title": "unmap_route_from_app"
        },
        {
            "location": "/drivers/cloudfoundry/#probes",
            "text": "",
            "title": "probes"
        },
        {
            "location": "/drivers/cloudfoundry/#get_app_stats",
            "text": "Type  probe    Module  chaoscf.probes    Name  get_app_stats    Return  mapping     Fetch the metrics of the given application.  See  https://apidocs.cloudfoundry.org/280/apps/get_detailed_stats_for_a_started_app.html \nfor more information.  Signature:  def   get_app_stats ( app_name :   str , \n                   configuration :   Dict [ str ,   Dict [ str ,   str ]], \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]], \n                   org_name :   str   =   None , \n                   space_name :   str   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      app_name  string   Yes    org_name  string  null  No    space_name  string  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"get_app_stats\" , \n     \"module\" :   \"chaoscf.probes\" , \n     \"arguments\" :   { \n       \"app_name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"get-app-stats\"  }   name :   get-app-stats  provider : \n   arguments : \n     app_name :   '' \n   func :   get_app_stats \n   module :   chaoscf.probes \n   type :   python  type :   probe",
            "title": "get_app_stats"
        },
        {
            "location": "/drivers/cloudfoundry/#list_apps",
            "text": "Type  probe    Module  chaoscf.probes    Name  list_apps    Return  mapping     List all applications available to the authorized user.  See  https://apidocs.cloudfoundry.org/280/apps/list_all_apps.html  to\nunderstand the content of the response.  Signature:  def   list_apps ( configuration :   Dict [ str ,   Dict [ str ,   str ]], \n               secrets :   Dict [ str ,   Dict [ str ,   str ]])   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required             Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"list_apps\" , \n     \"module\" :   \"chaoscf.probes\" \n   }, \n   \"name\" :   \"list-apps\"  }   name :   list-apps  provider : \n   func :   list_apps \n   module :   chaoscf.probes \n   type :   python  type :   probe",
            "title": "list_apps"
        },
        {
            "location": "/drivers/gce/",
            "text": "Extension \nchaosgce\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.2.2\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-google-cloud\n\n\n\n\n\n\n\n\n\n\n\n\nThis project is a collection of \nactions\n and \nprobes\n, gathered as an\nextension to the \nChaos Toolkit\n. It targets the\n\nGoogle Cloud Engine\n platform.\n\n\nInstall\n\u00b6\n\n\nThis package requires Python 3.5+\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install -U chaostoolkit-google-cloud\n\n\n\n\nUsage\n\u00b6\n\n\nTo use the probes and actions from this package, add the following to your\nexperiment file:\n\n\n{\n\n    \n\"type\"\n:\n \n\"action\"\n,\n\n    \n\"name\"\n:\n \n\"swap-nodepool-for-a-new-one\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosgce.nodepool.actions\"\n,\n\n        \n\"func\"\n:\n \n\"swap_nodepool\"\n,\n\n        \n\"secrets\"\n:\n \n[\n\"gce\"\n],\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"body\"\n:\n \n{\n\n                \n\"nodePool\"\n:\n \n{\n\n                    \n\"config\"\n:\n \n{\n \n                        \n\"oauthScopes\"\n:\n \n[\n\n                            \n\"gke-version-default\"\n,\n\n                            \n\"https://www.googleapis.com/auth/devstorage.read_only\"\n,\n\n                            \n\"https://www.googleapis.com/auth/logging.write\"\n,\n\n                            \n\"https://www.googleapis.com/auth/monitoring\"\n,\n\n                            \n\"https://www.googleapis.com/auth/service.management.readonly\"\n,\n\n                            \n\"https://www.googleapis.com/auth/servicecontrol\"\n,\n\n                            \n\"https://www.googleapis.com/auth/trace.append\"\n\n                        \n]\n\n                    \n},\n\n                    \n\"initialNodeCount\"\n:\n \n3\n,\n\n                    \n\"name\"\n:\n \n\"new-default-pool\"\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThat\u2019s it!\n\n\nPlease explore the code to see existing probes and actions.\n\n\nConfiguration\n\u00b6\n\n\nProject and Cluster Information\n\u00b6\n\n\nYou can pass the context via the \nconfiguration\n section of your experiment:\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"gce_project_id\"\n:\n \n\"...\"\n,\n\n        \n\"gce_cluster_name\"\n:\n \n\"...\"\n,\n\n        \n\"gce_region\"\n:\n \n\"...\"\n,\n\n        \n\"gce_zone\"\n:\n \n\"...\"\n\n    \n}\n\n\n}\n\n\n\n\n\nNote that most functions exposed in this package also take those values\ndirectly when you want specific values for them.\n\n\nCredentials\n\u00b6\n\n\nThis extension expects a \nservice account\n with enough permissions to\nperform its operations. Please create such a service account manually (do not\nuse the default one for your cluster if you can, so you\u2019ll be able to delete\nthat service account if need be).\n\n\nOnce you have created your service account, either keep the file on the same\nmachine where you will be running the experiment from. Or, pass its content\nas part of the \nsecrets\n section, although this is not recommended because your\nsensitive data will be quite visible.\n\n\nHere is the first way:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"gce\"\n:\n \n{\n\n            \n\"service_account_file\"\n:\n \n\"/path/to/sa.json\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nWhile the embedded way looks like this:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"gce\"\n:\n \n{\n\n            \n\"service_account_info\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"service_account\"\n,\n\n                \n\"project_id\"\n:\n \n\"...\"\n,\n\n                \n\"private_key_id\"\n:\n \n\"...\"\n,\n\n                \n\"private_key\"\n:\n \n\"...\"\n,\n\n                \n\"client_email\"\n:\n \n\"...\"\n,\n\n                \n\"client_id\"\n:\n \n\"...\"\n,\n\n                \n\"auth_uri\"\n:\n \n\"https://accounts.google.com/o/oauth2/auth\"\n,\n\n                \n\"token_uri\"\n:\n \n\"https://accounts.google.com/o/oauth2/token\"\n,\n\n                \n\"auth_provider_x509_cert_url\"\n:\n \n\"https://www.googleapis.com/oauth2/v1/certs\"\n,\n\n                \n\"client_x509_cert_url\"\n:\n \n\"https://www.googleapis.com/robot/v1/metadata/x509/....\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nPutting it all together\n\u00b6\n\n\nHere is a full example:\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"...\"\n,\n\n    \n\"description\"\n:\n \n\"...\"\n,\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"gce_project_id\"\n:\n \n\"...\"\n,\n\n        \n\"gce_cluster_name\"\n:\n \n\"...\"\n,\n\n        \n\"gce_region\"\n:\n \n\"...\"\n,\n\n        \n\"gce_zone\"\n:\n \n\"...\"\n\n    \n},\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"gce\"\n:\n \n{\n\n            \n\"service_account_file\"\n:\n \n\"/path/to/sa.json\"\n\n        \n}\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"swap-nodepool-for-a-new-one\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosgce.nodepool.actions\"\n,\n\n                \n\"func\"\n:\n \n\"swap_nodepool\"\n,\n\n                \n\"secrets\"\n:\n \n[\n\"gce\"\n],\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"body\"\n:\n \n{\n\n                        \n\"nodePool\"\n:\n \n{\n\n                            \n\"config\"\n:\n \n{\n \n                                \n\"oauthScopes\"\n:\n \n[\n\n                                    \n\"gke-version-default\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/devstorage.read_only\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/logging.write\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/monitoring\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/service.management.readonly\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/servicecontrol\"\n,\n\n                                    \n\"https://www.googleapis.com/auth/trace.append\"\n\n                                \n]\n\n                            \n},\n\n                            \n\"initialNodeCount\"\n:\n \n3\n,\n\n                            \n\"name\"\n:\n \n\"new-default-pool\"\n\n                        \n}\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit projects require all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nDevelop\n\u00b6\n\n\nIf you wish to develop on this project, make sure to install the development\ndependencies. But first, \ncreate a virtual environment\n and then install\nthose dependencies.\n\n\n$\n pip install -r requirements-dev.txt -r requirements.txt \n\n\n\n\nThen, point your environment to this directory:\n\n\n$\n python setup.py develop\n\n\n\n\nNow, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the \nchaos\n command locally.\n\n\nTest\n\u00b6\n\n\nTo run the tests for the project execute the following:\n\n\n$ pytest\n\n\n\n\nExported Activities\n\u00b6\n\n\nnodepool\n\u00b6\n\n\n\n\ncreate_new_nodepool\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosgce.nodepool.actions\n\n\n\n\n\n\nName\n\n\ncreate_new_nodepool\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nCreate a new node pool in the given cluster/zone of the provided project.\n\n\nThe node pool config must be passed a mapping to the \nbody\n parameter and\nrespect the REST API.\n\n\nIf \nwait_until_complete\n is set to \nTrue\n (the default), the function\nwill block until the node pool is ready. Otherwise, will return immediatly\nwith the operation information.\n\n\nSee: \nhttps://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create\n\n\nSignature:\n\n\ndef\n \ncreate_new_nodepool\n(\n\n        \nbody\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n\n        \nwait_until_complete\n:\n \nbool\n \n=\n \nTrue\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\nwait_until_complete\n\n\nboolean\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"create_new_nodepool\"\n,\n\n    \n\"module\"\n:\n \n\"chaosgce.nodepool.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"body\"\n:\n \n{}\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"create-new-nodepool\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncreate-new-nodepool\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nbody\n:\n \n{}\n\n  \nfunc\n:\n \ncreate_new_nodepool\n\n  \nmodule\n:\n \nchaosgce.nodepool.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndelete_nodepool\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosgce.nodepool.actions\n\n\n\n\n\n\nName\n\n\ndelete_nodepool\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nDelete node pool from the given cluster/zone of the provided project.\n\n\nIf \nwait_until_complete\n is set to \nTrue\n (the default), the function\nwill block until the node pool is deleted. Otherwise, will return\nimmediatly with the operation information.\n\n\nSee: \nhttps://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create\n\n\nSignature:\n\n\ndef\n \ndelete_nodepool\n(\n\n        \nnode_pool_id\n:\n \nstr\n,\n\n        \nwait_until_complete\n:\n \nbool\n \n=\n \nTrue\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nnode_pool_id\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nwait_until_complete\n\n\nboolean\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_nodepool\"\n,\n\n    \n\"module\"\n:\n \n\"chaosgce.nodepool.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"node_pool_id\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-nodepool\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-nodepool\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nnode_pool_id\n:\n \n''\n\n  \nfunc\n:\n \ndelete_nodepool\n\n  \nmodule\n:\n \nchaosgce.nodepool.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nswap_nodepool\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosgce.nodepool.actions\n\n\n\n\n\n\nName\n\n\nswap_nodepool\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nCreate a new nodepool, drain the old one so pods can be rescheduled on the\nnew pool. Delete the old nodepool only \ndelete_old_node_pool\n is set to\n\nTrue\n, which is not the default. Otherwise, leave the old node pool\ncordonned so it cannot be scheduled any longer.\n\n\nSignature:\n\n\ndef\n \nswap_nodepool\n(\nold_node_pool_id\n:\n \nstr\n,\n\n                  \nnew_nodepool_body\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n\n                  \nwait_until_complete\n:\n \nbool\n \n=\n \nTrue\n,\n\n                  \ndelete_old_node_pool\n:\n \nbool\n \n=\n \nFalse\n,\n\n                  \ndrain_timeout\n:\n \nint\n \n=\n \n120\n,\n\n                  \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nold_node_pool_id\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nnew_nodepool_body\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\nwait_until_complete\n\n\nboolean\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\ndelete_old_node_pool\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ndrain_timeout\n\n\ninteger\n\n\n120\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"swap_nodepool\"\n,\n\n    \n\"module\"\n:\n \n\"chaosgce.nodepool.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"new_nodepool_body\"\n:\n \n{},\n\n      \n\"old_node_pool_id\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"swap-nodepool\"\n\n\n}\n\n\n\n\n\nname\n:\n \nswap-nodepool\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nnew_nodepool_body\n:\n \n{}\n\n    \nold_node_pool_id\n:\n \n''\n\n  \nfunc\n:\n \nswap_nodepool\n\n  \nmodule\n:\n \nchaosgce.nodepool.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction",
            "title": "GCE"
        },
        {
            "location": "/drivers/gce/#extension-chaosgce",
            "text": "Version  0.2.2    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-google-cloud       This project is a collection of  actions  and  probes , gathered as an\nextension to the  Chaos Toolkit . It targets the Google Cloud Engine  platform.",
            "title": "Extension chaosgce"
        },
        {
            "location": "/drivers/gce/#install",
            "text": "This package requires Python 3.5+  To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install -U chaostoolkit-google-cloud",
            "title": "Install"
        },
        {
            "location": "/drivers/gce/#usage",
            "text": "To use the probes and actions from this package, add the following to your\nexperiment file:  { \n     \"type\" :   \"action\" , \n     \"name\" :   \"swap-nodepool-for-a-new-one\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosgce.nodepool.actions\" , \n         \"func\" :   \"swap_nodepool\" , \n         \"secrets\" :   [ \"gce\" ], \n         \"arguments\" :   { \n             \"body\" :   { \n                 \"nodePool\" :   { \n                     \"config\" :   {  \n                         \"oauthScopes\" :   [ \n                             \"gke-version-default\" , \n                             \"https://www.googleapis.com/auth/devstorage.read_only\" , \n                             \"https://www.googleapis.com/auth/logging.write\" , \n                             \"https://www.googleapis.com/auth/monitoring\" , \n                             \"https://www.googleapis.com/auth/service.management.readonly\" , \n                             \"https://www.googleapis.com/auth/servicecontrol\" , \n                             \"https://www.googleapis.com/auth/trace.append\" \n                         ] \n                     }, \n                     \"initialNodeCount\" :   3 , \n                     \"name\" :   \"new-default-pool\" \n                 } \n             } \n         } \n     }  }   That\u2019s it!  Please explore the code to see existing probes and actions.",
            "title": "Usage"
        },
        {
            "location": "/drivers/gce/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/drivers/gce/#project-and-cluster-information",
            "text": "You can pass the context via the  configuration  section of your experiment:  { \n     \"configuration\" :   { \n         \"gce_project_id\" :   \"...\" , \n         \"gce_cluster_name\" :   \"...\" , \n         \"gce_region\" :   \"...\" , \n         \"gce_zone\" :   \"...\" \n     }  }   Note that most functions exposed in this package also take those values\ndirectly when you want specific values for them.",
            "title": "Project and Cluster Information"
        },
        {
            "location": "/drivers/gce/#credentials",
            "text": "This extension expects a  service account  with enough permissions to\nperform its operations. Please create such a service account manually (do not\nuse the default one for your cluster if you can, so you\u2019ll be able to delete\nthat service account if need be).  Once you have created your service account, either keep the file on the same\nmachine where you will be running the experiment from. Or, pass its content\nas part of the  secrets  section, although this is not recommended because your\nsensitive data will be quite visible.  Here is the first way:  { \n     \"secrets\" :   { \n         \"gce\" :   { \n             \"service_account_file\" :   \"/path/to/sa.json\" \n         } \n     }  }   While the embedded way looks like this:  { \n     \"secrets\" :   { \n         \"gce\" :   { \n             \"service_account_info\" :   { \n                 \"type\" :   \"service_account\" , \n                 \"project_id\" :   \"...\" , \n                 \"private_key_id\" :   \"...\" , \n                 \"private_key\" :   \"...\" , \n                 \"client_email\" :   \"...\" , \n                 \"client_id\" :   \"...\" , \n                 \"auth_uri\" :   \"https://accounts.google.com/o/oauth2/auth\" , \n                 \"token_uri\" :   \"https://accounts.google.com/o/oauth2/token\" , \n                 \"auth_provider_x509_cert_url\" :   \"https://www.googleapis.com/oauth2/v1/certs\" , \n                 \"client_x509_cert_url\" :   \"https://www.googleapis.com/robot/v1/metadata/x509/....\" \n             } \n         } \n     }  }",
            "title": "Credentials"
        },
        {
            "location": "/drivers/gce/#putting-it-all-together",
            "text": "Here is a full example:  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"...\" , \n     \"description\" :   \"...\" , \n     \"configuration\" :   { \n         \"gce_project_id\" :   \"...\" , \n         \"gce_cluster_name\" :   \"...\" , \n         \"gce_region\" :   \"...\" , \n         \"gce_zone\" :   \"...\" \n     }, \n     \"secrets\" :   { \n         \"gce\" :   { \n             \"service_account_file\" :   \"/path/to/sa.json\" \n         } \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"swap-nodepool-for-a-new-one\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosgce.nodepool.actions\" , \n                 \"func\" :   \"swap_nodepool\" , \n                 \"secrets\" :   [ \"gce\" ], \n                 \"arguments\" :   { \n                     \"body\" :   { \n                         \"nodePool\" :   { \n                             \"config\" :   {  \n                                 \"oauthScopes\" :   [ \n                                     \"gke-version-default\" , \n                                     \"https://www.googleapis.com/auth/devstorage.read_only\" , \n                                     \"https://www.googleapis.com/auth/logging.write\" , \n                                     \"https://www.googleapis.com/auth/monitoring\" , \n                                     \"https://www.googleapis.com/auth/service.management.readonly\" , \n                                     \"https://www.googleapis.com/auth/servicecontrol\" , \n                                     \"https://www.googleapis.com/auth/trace.append\" \n                                 ] \n                             }, \n                             \"initialNodeCount\" :   3 , \n                             \"name\" :   \"new-default-pool\" \n                         } \n                     } \n                 } \n             } \n         } \n     ]  }",
            "title": "Putting it all together"
        },
        {
            "location": "/drivers/gce/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.  The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/gce/#develop",
            "text": "If you wish to develop on this project, make sure to install the development\ndependencies. But first,  create a virtual environment  and then install\nthose dependencies.  $  pip install -r requirements-dev.txt -r requirements.txt   Then, point your environment to this directory:  $  python setup.py develop  Now, you can edit the files and they will be automatically be seen by your\nenvironment, even when running from the  chaos  command locally.",
            "title": "Develop"
        },
        {
            "location": "/drivers/gce/#test",
            "text": "To run the tests for the project execute the following:  $ pytest",
            "title": "Test"
        },
        {
            "location": "/drivers/gce/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/gce/#nodepool",
            "text": "",
            "title": "nodepool"
        },
        {
            "location": "/drivers/gce/#create_new_nodepool",
            "text": "Type  action    Module  chaosgce.nodepool.actions    Name  create_new_nodepool    Return  mapping     Create a new node pool in the given cluster/zone of the provided project.  The node pool config must be passed a mapping to the  body  parameter and\nrespect the REST API.  If  wait_until_complete  is set to  True  (the default), the function\nwill block until the node pool is ready. Otherwise, will return immediatly\nwith the operation information.  See:  https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create  Signature:  def   create_new_nodepool ( \n         body :   Dict [ str ,   Any ], \n         wait_until_complete :   bool   =   True , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      body  mapping   Yes    wait_until_complete  boolean  true  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"create_new_nodepool\" , \n     \"module\" :   \"chaosgce.nodepool.actions\" , \n     \"arguments\" :   { \n       \"body\" :   {} \n     } \n   }, \n   \"name\" :   \"create-new-nodepool\"  }   name :   create-new-nodepool  provider : \n   arguments : \n     body :   {} \n   func :   create_new_nodepool \n   module :   chaosgce.nodepool.actions \n   type :   python  type :   action",
            "title": "create_new_nodepool"
        },
        {
            "location": "/drivers/gce/#delete_nodepool",
            "text": "Type  action    Module  chaosgce.nodepool.actions    Name  delete_nodepool    Return  mapping     Delete node pool from the given cluster/zone of the provided project.  If  wait_until_complete  is set to  True  (the default), the function\nwill block until the node pool is deleted. Otherwise, will return\nimmediatly with the operation information.  See:  https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create  Signature:  def   delete_nodepool ( \n         node_pool_id :   str , \n         wait_until_complete :   bool   =   True , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      node_pool_id  string   Yes    wait_until_complete  boolean  true  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_nodepool\" , \n     \"module\" :   \"chaosgce.nodepool.actions\" , \n     \"arguments\" :   { \n       \"node_pool_id\" :   \"\" \n     } \n   }, \n   \"name\" :   \"delete-nodepool\"  }   name :   delete-nodepool  provider : \n   arguments : \n     node_pool_id :   '' \n   func :   delete_nodepool \n   module :   chaosgce.nodepool.actions \n   type :   python  type :   action",
            "title": "delete_nodepool"
        },
        {
            "location": "/drivers/gce/#swap_nodepool",
            "text": "Type  action    Module  chaosgce.nodepool.actions    Name  swap_nodepool    Return  mapping     Create a new nodepool, drain the old one so pods can be rescheduled on the\nnew pool. Delete the old nodepool only  delete_old_node_pool  is set to True , which is not the default. Otherwise, leave the old node pool\ncordonned so it cannot be scheduled any longer.  Signature:  def   swap_nodepool ( old_node_pool_id :   str , \n                   new_nodepool_body :   Dict [ str ,   Any ], \n                   wait_until_complete :   bool   =   True , \n                   delete_old_node_pool :   bool   =   False , \n                   drain_timeout :   int   =   120 , \n                   configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      old_node_pool_id  string   Yes    new_nodepool_body  mapping   Yes    wait_until_complete  boolean  true  No    delete_old_node_pool  boolean  false  No    drain_timeout  integer  120  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"swap_nodepool\" , \n     \"module\" :   \"chaosgce.nodepool.actions\" , \n     \"arguments\" :   { \n       \"new_nodepool_body\" :   {}, \n       \"old_node_pool_id\" :   \"\" \n     } \n   }, \n   \"name\" :   \"swap-nodepool\"  }   name :   swap-nodepool  provider : \n   arguments : \n     new_nodepool_body :   {} \n     old_node_pool_id :   '' \n   func :   swap_nodepool \n   module :   chaosgce.nodepool.actions \n   type :   python  type :   action",
            "title": "swap_nodepool"
        },
        {
            "location": "/drivers/humio/",
            "text": "Extension \nchaoshumio\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.1.1\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-humio\n\n\n\n\n\n\n\n\n\n\nThis project is an extension for the Chaos Toolkit to target \nHumio\n.\n\n\nInstall\n\u00b6\n\n\nThis package requires Python 3.5+\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install -U chaostoolkit-humio\n\n\n\n\nHumio Dataspace & Token\n\u00b6\n\n\nTo use this extension, you will need two pieces of information from Humio.\nFirst, the dataspace which you want to send logs to. Second a \nAPI token\n\nfor an user with permissions to that space.\n\n\nUsage\n\u00b6\n\n\nTo use this extension, edit your \nchaostoolkit settings\n by adding the\nfollowing payload:\n\n\nnotifications\n:\n\n  \n-\n\n    \ntype\n:\n \nplugin\n\n    \nmodule\n:\n \nchaoshumio.notification\n\n    \ndataspace\n:\n \nmy-space\n\n    \ntoken\n:\n \nmy-token\n\n\n\n\n\nBy default all events will be forwarded to that channel. You may filter only\nthose events you care for:\n\n\nnotifications\n:\n\n  \n-\n\n    \ntype\n:\n \nplugin\n\n    \nmodule\n:\n \nchaoshumio.notification\n\n    \ndataspace\n:\n \nmy-space\n\n    \ntoken\n:\n \nmy-token\n\n    \nevents\n:\n\n      \n-\n \nrun-failed\n\n      \n-\n \nrun-started\n\n\n\n\n\nOnly sends those two events.\n\n\nTest\n\u00b6\n\n\nTo run the tests for the project execute the following:\n\n\n$ pytest\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit projects require all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nExported Activities\n\u00b6\n\n\nnotification\n\u00b6\n\n\n\n\nnotify\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\nModule\n\n\nchaoshumio.notification\n\n\n\n\n\n\nName\n\n\nnotify\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nSend a log message to the Humio ingest endpoint.\n\n\nThe settings must contain:\n\n\n\n\n\"token\"\n: a slack API token\n\n\n\"url\"\n: the channel where to send this event notification\n\n\n\n\nIf one of these two attributes is missing, no notification is sent.\n\n\nSignature:\n\n\ndef\n \nnotify\n(\nsettings\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n \nevent\n:\n \nDict\n[\nstr\n,\n \nAny\n]):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsettings\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\nevent\n\n\nmapping\n\n\n\n\nYes\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"notify\"\n,\n\n    \n\"module\"\n:\n \n\"chaoshumio.notification\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"event\"\n:\n \n{},\n\n      \n\"settings\"\n:\n \n{}\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"notify\"\n\n\n}\n\n\n\n\n\nname\n:\n \nnotify\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nevent\n:\n \n{}\n\n    \nsettings\n:\n \n{}\n\n  \nfunc\n:\n \nnotify\n\n  \nmodule\n:\n \nchaoshumio.notification\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \n''",
            "title": "Humio"
        },
        {
            "location": "/drivers/humio/#extension-chaoshumio",
            "text": "Version  0.1.1    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-humio      This project is an extension for the Chaos Toolkit to target  Humio .",
            "title": "Extension chaoshumio"
        },
        {
            "location": "/drivers/humio/#install",
            "text": "This package requires Python 3.5+  To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install -U chaostoolkit-humio",
            "title": "Install"
        },
        {
            "location": "/drivers/humio/#humio-dataspace-token",
            "text": "To use this extension, you will need two pieces of information from Humio.\nFirst, the dataspace which you want to send logs to. Second a  API token \nfor an user with permissions to that space.",
            "title": "Humio Dataspace &amp; Token"
        },
        {
            "location": "/drivers/humio/#usage",
            "text": "To use this extension, edit your  chaostoolkit settings  by adding the\nfollowing payload:  notifications : \n   - \n     type :   plugin \n     module :   chaoshumio.notification \n     dataspace :   my-space \n     token :   my-token   By default all events will be forwarded to that channel. You may filter only\nthose events you care for:  notifications : \n   - \n     type :   plugin \n     module :   chaoshumio.notification \n     dataspace :   my-space \n     token :   my-token \n     events : \n       -   run-failed \n       -   run-started   Only sends those two events.",
            "title": "Usage"
        },
        {
            "location": "/drivers/humio/#test",
            "text": "To run the tests for the project execute the following:  $ pytest",
            "title": "Test"
        },
        {
            "location": "/drivers/humio/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.  The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/humio/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/humio/#notification",
            "text": "",
            "title": "notification"
        },
        {
            "location": "/drivers/humio/#notify",
            "text": "Type     Module  chaoshumio.notification    Name  notify    Return  None     Send a log message to the Humio ingest endpoint.  The settings must contain:   \"token\" : a slack API token  \"url\" : the channel where to send this event notification   If one of these two attributes is missing, no notification is sent.  Signature:  def   notify ( settings :   Dict [ str ,   Any ],   event :   Dict [ str ,   Any ]): \n     pass   Arguments:     Name  Type  Default  Required      settings  mapping   Yes    event  mapping   Yes     Usage:  { \n   \"type\" :   \"\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"notify\" , \n     \"module\" :   \"chaoshumio.notification\" , \n     \"arguments\" :   { \n       \"event\" :   {}, \n       \"settings\" :   {} \n     } \n   }, \n   \"name\" :   \"notify\"  }   name :   notify  provider : \n   arguments : \n     event :   {} \n     settings :   {} \n   func :   notify \n   module :   chaoshumio.notification \n   type :   python  type :   ''",
            "title": "notify"
        },
        {
            "location": "/drivers/kubernetes/",
            "text": "Extension \nchaosk8s\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.16.2\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit/chaostoolkit-kubernetes\n\n\n\n\n\n\n\n\n\n\n\n\nThis project contains activities, such as probes and actions, you can call from\nyour experiment through the Chaos Toolkit.\n\n\nInstall\n\u00b6\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install chaostoolkit-kubernetes\n\n\n\n\nUsage\n\u00b6\n\n\nTo use the probes and actions from this package, add the following to your\nexperiment file:\n\n\n{\n\n    \n\"name\"\n:\n \n\"all-our-microservices-should-be-healthy\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n        \n\"func\"\n:\n \n\"microservice_available_and_healthy\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"myapp\"\n,\n\n            \n\"ns\"\n:\n \n\"myns\"\n\n        \n}\n\n    \n}\n\n\n}\n,\n\n\n{\n\n    \n\"type\"\n:\n \n\"action\"\n,\n\n    \n\"name\"\n:\n \n\"terminate-db-pod\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosk8s.pod.actions\"\n,\n\n        \n\"func\"\n:\n \n\"terminate_pods\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"label_selector\"\n:\n \n\"app=my-app\"\n,\n\n            \n\"name_pattern\"\n:\n \n\"my-app-[0-9]$\"\n,\n\n            \n\"rand\"\n:\n \ntrue\n,\n\n            \n\"ns\"\n:\n \n\"default\"\n\n        \n}\n\n    \n},\n\n    \n\"pauses\"\n:\n \n{\n\n        \n\"after\"\n:\n \n5\n\n    \n}\n\n\n}\n\n\n\n\n\nThat\u2019s it! Notice how the action gives you the way to kill one pod randomly.\n\n\nPlease explore the code to see existing probes and actions.\n\n\nDiscovery\n\u00b6\n\n\nYou may use the Chaos Toolkit to discover the capabilities of this extension:\n\n\n$ chaos discover chaostoolkit-kubernetes --no-install\n\n\n\n\nConfiguration\n\u00b6\n\n\nThis extension to the Chaos Toolkit can use the Kubernetes configuration \nfound at the usual place in your HOME directory under \n~/.kube/\n, or, when\nrun from a Pod in a Kubernetes cluster, it will use the local service account.\nIn that case, make sure to set the \nCHAOSTOOLKIT_IN_POD\n environment variable\nto \n\"true\"\n.\n\n\nYou can also pass the credentials via secrets as follows:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"KUBERNETES_HOST\"\n:\n \n\"http://somehost\"\n,\n\n            \n\"KUBERNETES_API_KEY\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"env\"\n,\n\n                \n\"key\"\n:\n \n\"SOME_ENV_VAR\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThen in your probe or action:\n\n\n{\n\n    \n\"name\"\n:\n \n\"all-our-microservices-should-be-healthy\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n        \n\"func\"\n:\n \n\"microservice_available_and_healthy\"\n,\n\n        \n\"secrets\"\n:\n \n[\n\"kubernetes\"\n],\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"myapp\"\n,\n\n            \n\"ns\"\n:\n \n\"myns\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nYou may specify the Kubernetes context you want to use as follows:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"KUBERNETES_CONTEXT\"\n:\n \n\"minikube\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nOr via the environment:\n\n\n$ export KUBERNETES_CONTEXT=minikube\n\n\n\n\nIn the same spirit, you can specify where to find your Kubernetes configuration\nwith:\n\n\n$ export KUBECONFIG=some/path/config\n\n\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please fork this project, make your changes following the\nusual \nPEP 8\n code style, add appropriate tests and submit a PR for\nreview.\n\n\nThe Chaos Toolkit projects require all contributors must sign a\n\nDeveloper Certificate of Origin\n on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.\n\n\nExported Activities\n\u00b6\n\n\npod\n\u00b6\n\n\n\n\ncount_pods\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.pod.probes\n\n\n\n\n\n\nName\n\n\ncount_pods\n\n\n\n\n\n\nReturn\n\n\ninteger\n\n\n\n\n\n\n\n\nCount the number of pods matching the given selector in a given \nphase\n, if\none is given.\n\n\nSignature:\n\n\ndef\n \ncount_pods\n(\nlabel_selector\n:\n \nstr\n,\n\n               \nphase\n:\n \nstr\n \n=\n \nNone\n,\n\n               \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n               \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nint\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nphase\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"count_pods\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.pod.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"label_selector\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"count-pods\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncount-pods\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nlabel_selector\n:\n \n''\n\n  \nfunc\n:\n \ncount_pods\n\n  \nmodule\n:\n \nchaosk8s.pod.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\npods_in_phase\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.pod.probes\n\n\n\n\n\n\nName\n\n\npods_in_phase\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nLookup a pod by \nlabel_selector\n in the namespace \nns\n.\n\n\nRaises :exc:\nchaoslib.exceptions.FailedActivity\n when the state is not\nas expected.\n\n\nSignature:\n\n\ndef\n \npods_in_phase\n(\nlabel_selector\n:\n \nstr\n,\n\n                  \nphase\n:\n \nstr\n \n=\n \n'Running'\n,\n\n                  \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nphase\n\n\nstring\n\n\n\u201cRunning\u201d\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"pods_in_phase\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.pod.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"label_selector\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"pods-in-phase\"\n\n\n}\n\n\n\n\n\nname\n:\n \npods-in-phase\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nlabel_selector\n:\n \n''\n\n  \nfunc\n:\n \npods_in_phase\n\n  \nmodule\n:\n \nchaosk8s.pod.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\npods_not_in_phase\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.pod.probes\n\n\n\n\n\n\nName\n\n\npods_not_in_phase\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nLookup a pod by \nlabel_selector\n in the namespace \nns\n.\n\n\nRaises :exc:\nchaoslib.exceptions.FailedActivity\n when the pod is in the\ngiven phase and should not have.\n\n\nSignature:\n\n\ndef\n \npods_not_in_phase\n(\nlabel_selector\n:\n \nstr\n,\n\n                      \nphase\n:\n \nstr\n \n=\n \n'Running'\n,\n\n                      \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                      \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nphase\n\n\nstring\n\n\n\u201cRunning\u201d\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"pods_not_in_phase\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.pod.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"label_selector\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"pods-not-in-phase\"\n\n\n}\n\n\n\n\n\nname\n:\n \npods-not-in-phase\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nlabel_selector\n:\n \n''\n\n  \nfunc\n:\n \npods_not_in_phase\n\n  \nmodule\n:\n \nchaosk8s.pod.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nread_pod_logs\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.pod.probes\n\n\n\n\n\n\nName\n\n\nread_pod_logs\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nFetch logs for all the pods with the label \n\"name\"\n set to \nname\n and\nreturn a dictionary with the keys being the pod\u2019s name and the values\nthe logs of said pod. If \nname\n is not provided, use only the\n\nlabel_selector\n instead.\n\n\nWhen your pod has several containers, you should also set \ncontainer_name\n\nto clarify which container you want to read logs from.\n\n\nIf you provide \nlast\n, this returns the logs of the last N seconds\nuntil now. This can set to a fluent delta such as \n10 minutes\n.\n\n\nYou may also set \nfrom_previous\n to \nTrue\n to capture the logs of a\nprevious pod\u2019s incarnation, if any.\n\n\nSignature:\n\n\ndef\n \nread_pod_logs\n(\nname\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nlast\n:\n \nUnion\n[\nstr\n,\n \nNoneType\n]\n \n=\n \nNone\n,\n\n                  \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                  \nfrom_previous\n:\n \nbool\n \n=\n \nFalse\n,\n\n                  \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n                  \ncontainer_name\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nstr\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nlast\n\n\nobject\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nfrom_previous\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\ncontainer_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"read_pod_logs\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.pod.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"read-pod-logs\"\n\n\n}\n\n\n\n\n\nname\n:\n \nread-pod-logs\n\n\nprovider\n:\n\n  \nfunc\n:\n \nread_pod_logs\n\n  \nmodule\n:\n \nchaosk8s.pod.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nterminate_pods\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.pod.actions\n\n\n\n\n\n\nName\n\n\nterminate_pods\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nTerminate a pod gracefully. Select the appropriate pods by label and/or\nname patterns. Whenever a pattern is provided for the name, all pods\nretrieved will be filtered out if their name do not match the given\npattern.\n\n\nIf neither \nlabel_selector\n nor \nname_pattern\n are provided, all pods\nin the namespace will be terminated.\n\n\nIf \nall\n is set to \nTrue\n, all matching pods will be terminated.\nIf \nrand\n is set to \nTrue\n, one random pod will be terminated.\nOtherwise, the first retrieved pod will be terminated.\n\n\nSignature:\n\n\ndef\n \nterminate_pods\n(\nlabel_selector\n:\n \nstr\n \n=\n \nNone\n,\n\n                   \nname_pattern\n:\n \nstr\n \n=\n \nNone\n,\n\n                   \nall\n:\n \nbool\n \n=\n \nFalse\n,\n\n                   \nrand\n:\n \nbool\n \n=\n \nFalse\n,\n\n                   \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                   \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nname_pattern\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nall\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nrand\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"terminate_pods\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.pod.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"terminate-pods\"\n\n\n}\n\n\n\n\n\nname\n:\n \nterminate-pods\n\n\nprovider\n:\n\n  \nfunc\n:\n \nterminate_pods\n\n  \nmodule\n:\n \nchaosk8s.pod.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\nactions\n\u00b6\n\n\n\n\nkill_microservice\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.actions\n\n\n\n\n\n\nName\n\n\nkill_microservice\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nKill a microservice by \nname\n in the namespace \nns\n.\n\n\nThe microservice is killed by deleting the deployment for it without\na graceful period to trigger an abrupt termination.\n\n\nThe selected resources are matched by the given \nlabel_selector\n.\n\n\nSignature:\n\n\ndef\n \nkill_microservice\n(\nname\n:\n \nstr\n,\n\n                      \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                      \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n                      \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"kill_microservice\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"kill-microservice\"\n\n\n}\n\n\n\n\n\nname\n:\n \nkill-microservice\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \nkill_microservice\n\n  \nmodule\n:\n \nchaosk8s.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nremove_service_endpoint\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.actions\n\n\n\n\n\n\nName\n\n\nremove_service_endpoint\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nRemove the service endpoint that sits in front of microservices (pods).\n\n\nSignature:\n\n\ndef\n \nremove_service_endpoint\n(\nname\n:\n \nstr\n,\n\n                            \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                            \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"remove_service_endpoint\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"remove-service-endpoint\"\n\n\n}\n\n\n\n\n\nname\n:\n \nremove-service-endpoint\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \nremove_service_endpoint\n\n  \nmodule\n:\n \nchaosk8s.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nscale_microservice\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.actions\n\n\n\n\n\n\nName\n\n\nscale_microservice\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nScale a deployment up or down. The \nname\n is the name of the deployment.\n\n\nSignature:\n\n\ndef\n \nscale_microservice\n(\nname\n:\n \nstr\n,\n\n                       \nreplicas\n:\n \nint\n,\n\n                       \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                       \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nreplicas\n\n\ninteger\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"scale_microservice\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"replicas\"\n:\n \n0\n,\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"scale-microservice\"\n\n\n}\n\n\n\n\n\nname\n:\n \nscale-microservice\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n    \nreplicas\n:\n \n0\n\n  \nfunc\n:\n \nscale_microservice\n\n  \nmodule\n:\n \nchaosk8s.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nstart_microservice\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.actions\n\n\n\n\n\n\nName\n\n\nstart_microservice\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nStart a microservice described by the deployment config, which must be the\npath to the JSON or YAML representation of the deployment.\n\n\nSignature:\n\n\ndef\n \nstart_microservice\n(\nspec_path\n:\n \nstr\n,\n\n                       \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                       \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nspec_path\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"start_microservice\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"spec_path\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"start-microservice\"\n\n\n}\n\n\n\n\n\nname\n:\n \nstart-microservice\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nspec_path\n:\n \n''\n\n  \nfunc\n:\n \nstart_microservice\n\n  \nmodule\n:\n \nchaosk8s.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\nprobes\n\u00b6\n\n\n\n\nall_microservices_healthy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\nall_microservices_healthy\n\n\n\n\n\n\nReturn\n\n\nTuple[Dict[str, Any], Dict[str, Any]]\n\n\n\n\n\n\n\n\nCheck all microservices in the system are running and available.\n\n\nRaises :exc:\nchaoslib.exceptions.FailedActivity\n when the state is not\nas expected.\n\n\nSignature:\n\n\ndef\n \nall_microservices_healthy\n(\nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                              \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n\n                              \n)\n \n->\n \nTuple\n[\nDict\n[\nstr\n,\n \nAny\n],\n \nDict\n[\nstr\n,\n \nAny\n]]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"all_microservices_healthy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"all-microservices-healthy\"\n\n\n}\n\n\n\n\n\nname\n:\n \nall-microservices-healthy\n\n\nprovider\n:\n\n  \nfunc\n:\n \nall_microservices_healthy\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\ndeployment_is_not_fully_available\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\ndeployment_is_not_fully_available\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nWait until the deployment gets into an intermediate state where not all\nexpected replicas are available. Once this state is reached, return \nTrue\n.\nIf the state is not reached after \ntimeout\n seconds, a\n:exc:\nchaoslib.exceptions.FailedActivity\n exception is raised.\n\n\nSignature:\n\n\ndef\n \ndeployment_is_not_fully_available\n(\n\n        \nname\n:\n \nstr\n,\n\n        \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n        \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n        \ntimeout\n:\n \nint\n \n=\n \n30\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\ntimeout\n\n\ninteger\n\n\n30\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"deployment_is_not_fully_available\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"deployment-is-not-fully-available\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndeployment-is-not-fully-available\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \ndeployment_is_not_fully_available\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nmicroservice_available_and_healthy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\nmicroservice_available_and_healthy\n\n\n\n\n\n\nReturn\n\n\nUnion[bool, NoneType]\n\n\n\n\n\n\n\n\nLookup a deployment by \nname\n in the namespace \nns\n.\n\n\nThe selected resources are matched by the given \nlabel_selector\n.\n\n\nRaises :exc:\nchaoslib.exceptions.FailedActivity\n when the state is not\nas expected.\n\n\nSignature:\n\n\ndef\n \nmicroservice_available_and_healthy\n(\n\n        \nname\n:\n \nstr\n,\n\n        \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n        \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nUnion\n[\nbool\n,\n \nNoneType\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"microservice_available_and_healthy\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"microservice-available-and-healthy\"\n\n\n}\n\n\n\n\n\nname\n:\n \nmicroservice-available-and-healthy\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \nmicroservice_available_and_healthy\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nmicroservice_is_not_available\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\nmicroservice_is_not_available\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nLookup pods with a \nname\n label set to the given \nname\n in the specified\n\nns\n.\n\n\nRaises :exc:\nchaoslib.exceptions.FailedActivity\n when one of the pods\nwith the specified \nname\n is in the \n\"Running\"\n phase.\n\n\nSignature:\n\n\ndef\n \nmicroservice_is_not_available\n(\n\n        \nname\n:\n \nstr\n,\n\n        \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n        \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"microservice_is_not_available\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"microservice-is-not-available\"\n\n\n}\n\n\n\n\n\nname\n:\n \nmicroservice-is-not-available\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \nmicroservice_is_not_available\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nread_microservices_logs\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\nread_microservices_logs\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nFetch logs for all the pods with the label \n\"name\"\n set to \nname\n and\nreturn a dictionary with the keys being the pod\u2019s name and the values\nthe logs of said pod. If \nname\n is not provided, use only the\n\nlabel_selector\n instead.\n\n\nWhen your pod has several containers, you should also set \ncontainer_name\n\nto clarify which container you want to read logs from.\n\n\nIf you provide \nlast\n, this returns the logs of the last N seconds\nuntil now. This can set to a fluent delta such as \n10 minutes\n.\n\n\nYou may also set \nfrom_previous\n to \nTrue\n to capture the logs of a\nprevious pod\u2019s incarnation, if any.\n\n\nSignature:\n\n\ndef\n \nread_microservices_logs\n(\n\n        \nname\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nlast\n:\n \nUnion\n[\nstr\n,\n \nNoneType\n]\n \n=\n \nNone\n,\n\n        \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n        \nfrom_previous\n:\n \nbool\n \n=\n \nFalse\n,\n\n        \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n        \ncontainer_name\n:\n \nstr\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nstr\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nlast\n\n\nobject\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nfrom_previous\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\ncontainer_name\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"read_microservices_logs\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"read-microservices-logs\"\n\n\n}\n\n\n\n\n\nname\n:\n \nread-microservices-logs\n\n\nprovider\n:\n\n  \nfunc\n:\n \nread_microservices_logs\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nservice_endpoint_is_initialized\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosk8s.probes\n\n\n\n\n\n\nName\n\n\nservice_endpoint_is_initialized\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nLookup a service endpoint by its name and raises :exc:\nFailedProbe\n when\nthe service was not found or not initialized.\n\n\nSignature:\n\n\ndef\n \nservice_endpoint_is_initialized\n(\nname\n:\n \nstr\n,\n\n                                    \nns\n:\n \nstr\n \n=\n \n'default'\n,\n\n                                    \nlabel_selector\n:\n \nstr\n \n=\n \n'name in ({name})'\n,\n\n                                    \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nns\n\n\nstring\n\n\n\u201cdefault\u201d\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\n\u201cname in ({name})\u201d\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"service_endpoint_is_initialized\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"name\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"service-endpoint-is-initialized\"\n\n\n}\n\n\n\n\n\nname\n:\n \nservice-endpoint-is-initialized\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nname\n:\n \n''\n\n  \nfunc\n:\n \nservice_endpoint_is_initialized\n\n  \nmodule\n:\n \nchaosk8s.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\nnode\n\u00b6\n\n\n\n\ncordon_node\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.node.actions\n\n\n\n\n\n\nName\n\n\ncordon_node\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nCordon nodes matching the given label or name, so that no pods\nare scheduled on them any longer.\n\n\nSignature:\n\n\ndef\n \ncordon_node\n(\nname\n:\n \nstr\n \n=\n \nNone\n,\n\n                \nlabel_selector\n:\n \nstr\n \n=\n \nNone\n,\n\n                \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"cordon_node\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.node.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"cordon-node\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncordon-node\n\n\nprovider\n:\n\n  \nfunc\n:\n \ncordon_node\n\n  \nmodule\n:\n \nchaosk8s.node.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ncreate_node\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.node.actions\n\n\n\n\n\n\nName\n\n\ncreate_node\n\n\n\n\n\n\nReturn\n\n\nkubernetes.client.models.v1_node.V1Node\n\n\n\n\n\n\n\n\nCreate one new node in the cluster.\n\n\nDue to the way things work on certain cloud providers, you won\u2019t be able\nto use this meaningfully on them. For instance on GCE, this will likely\nfail.\n\n\nSee also: \nhttps://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency\n\n\nSignature:\n\n\ndef\n \ncreate_node\n(\nmeta\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n\n                \nspec\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n\n                \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n\n                \n)\n \n->\n \nkubernetes\n.\nclient\n.\nmodels\n.\nv1_node\n.\nV1Node\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmeta\n\n\nmapping\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nspec\n\n\nmapping\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"create_node\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.node.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"create-node\"\n\n\n}\n\n\n\n\n\nname\n:\n \ncreate-node\n\n\nprovider\n:\n\n  \nfunc\n:\n \ncreate_node\n\n  \nmodule\n:\n \nchaosk8s.node.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndelete_nodes\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.node.actions\n\n\n\n\n\n\nName\n\n\ndelete_nodes\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nDelete nodes gracefully. Select the appropriate nodes by label.\n\n\nNodes are not drained beforehand so we can see how cluster behaves. Nodes\ncannot be restarted, they are really deleted. Please be careful when using\nthis action.\n\n\nOn certain cloud providers, you also need to delete the underneath VM\ninstance as well afterwards. This is the case on GCE for instance.\n\n\nIf \nall\n is set to \nTrue\n, all nodes will be terminated.\nIf \nrand\n is set to \nTrue\n, one random node will be terminated.\nIf \u0300\ncount\n is set to a positive number, only a upto \ncount\n nodes\n(randomly picked) will be terminated. Otherwise, the first retrieved node\nwill be terminated.\n\n\nSignature:\n\n\ndef\n \ndelete_nodes\n(\nlabel_selector\n:\n \nstr\n \n=\n \nNone\n,\n\n                 \nall\n:\n \nbool\n \n=\n \nFalse\n,\n\n                 \nrand\n:\n \nbool\n \n=\n \nFalse\n,\n\n                 \ncount\n:\n \nint\n \n=\n \nNone\n,\n\n                 \ngrace_period_seconds\n:\n \nint\n \n=\n \nNone\n,\n\n                 \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nall\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nrand\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ncount\n\n\ninteger\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ngrace_period_seconds\n\n\ninteger\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"delete_nodes\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.node.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"delete-nodes\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndelete-nodes\n\n\nprovider\n:\n\n  \nfunc\n:\n \ndelete_nodes\n\n  \nmodule\n:\n \nchaosk8s.node.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\ndrain_nodes\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.node.actions\n\n\n\n\n\n\nName\n\n\ndrain_nodes\n\n\n\n\n\n\nReturn\n\n\nboolean\n\n\n\n\n\n\n\n\nDrain nodes matching the given label or name, so that no pods are scheduled\non them any longer and running pods are evicted.\n\n\nIt does a similar job to \nkubectl drain --ignore-daemonsets\n or\n\nkubectl drain --delete-local-data --ignore-daemonsets\n if\n\ndelete_pods_with_local_storage\n is set to \nTrue\n. There is no\nequivalent to the \nkubectl drain --force\n flag.\n\n\nYou probably want to call \nuncordon\n from in your experiment\u2019s rollbacks.\n\n\nSignature:\n\n\ndef\n \ndrain_nodes\n(\nname\n:\n \nstr\n \n=\n \nNone\n,\n\n                \nlabel_selector\n:\n \nstr\n \n=\n \nNone\n,\n\n                \ndelete_pods_with_local_storage\n:\n \nbool\n \n=\n \nFalse\n,\n\n                \ntimeout\n:\n \nint\n \n=\n \n120\n,\n\n                \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nbool\n:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ndelete_pods_with_local_storage\n\n\nboolean\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ntimeout\n\n\ninteger\n\n\n120\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"drain_nodes\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.node.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"drain-nodes\"\n\n\n}\n\n\n\n\n\nname\n:\n \ndrain-nodes\n\n\nprovider\n:\n\n  \nfunc\n:\n \ndrain_nodes\n\n  \nmodule\n:\n \nchaosk8s.node.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction\n\n\n\n\n\n\n\nuncordon_node\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\naction\n\n\n\n\n\n\nModule\n\n\nchaosk8s.node.actions\n\n\n\n\n\n\nName\n\n\nuncordon_node\n\n\n\n\n\n\nReturn\n\n\nNone\n\n\n\n\n\n\n\n\nUncordon nodes matching the given label name, so that pods can be\nscheduled on them again.\n\n\nSignature:\n\n\ndef\n \nuncordon_node\n(\nname\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nlabel_selector\n:\n \nstr\n \n=\n \nNone\n,\n\n                  \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n):\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nlabel_selector\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"action\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"uncordon_node\"\n,\n\n    \n\"module\"\n:\n \n\"chaosk8s.node.actions\"\n\n  \n},\n\n  \n\"name\"\n:\n \n\"uncordon-node\"\n\n\n}\n\n\n\n\n\nname\n:\n \nuncordon-node\n\n\nprovider\n:\n\n  \nfunc\n:\n \nuncordon_node\n\n  \nmodule\n:\n \nchaosk8s.node.actions\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \naction",
            "title": "Kubernetes"
        },
        {
            "location": "/drivers/kubernetes/#extension-chaosk8s",
            "text": "Version  0.16.2    Repository  https://github.com/chaostoolkit/chaostoolkit-kubernetes       This project contains activities, such as probes and actions, you can call from\nyour experiment through the Chaos Toolkit.",
            "title": "Extension chaosk8s"
        },
        {
            "location": "/drivers/kubernetes/#install",
            "text": "To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install chaostoolkit-kubernetes",
            "title": "Install"
        },
        {
            "location": "/drivers/kubernetes/#usage",
            "text": "To use the probes and actions from this package, add the following to your\nexperiment file:  { \n     \"name\" :   \"all-our-microservices-should-be-healthy\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosk8s.probes\" , \n         \"func\" :   \"microservice_available_and_healthy\" , \n         \"arguments\" :   { \n             \"name\" :   \"myapp\" , \n             \"ns\" :   \"myns\" \n         } \n     }  } ,  { \n     \"type\" :   \"action\" , \n     \"name\" :   \"terminate-db-pod\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosk8s.pod.actions\" , \n         \"func\" :   \"terminate_pods\" , \n         \"arguments\" :   { \n             \"label_selector\" :   \"app=my-app\" , \n             \"name_pattern\" :   \"my-app-[0-9]$\" , \n             \"rand\" :   true , \n             \"ns\" :   \"default\" \n         } \n     }, \n     \"pauses\" :   { \n         \"after\" :   5 \n     }  }   That\u2019s it! Notice how the action gives you the way to kill one pod randomly.  Please explore the code to see existing probes and actions.",
            "title": "Usage"
        },
        {
            "location": "/drivers/kubernetes/#discovery",
            "text": "You may use the Chaos Toolkit to discover the capabilities of this extension:  $ chaos discover chaostoolkit-kubernetes --no-install",
            "title": "Discovery"
        },
        {
            "location": "/drivers/kubernetes/#configuration",
            "text": "This extension to the Chaos Toolkit can use the Kubernetes configuration \nfound at the usual place in your HOME directory under  ~/.kube/ , or, when\nrun from a Pod in a Kubernetes cluster, it will use the local service account.\nIn that case, make sure to set the  CHAOSTOOLKIT_IN_POD  environment variable\nto  \"true\" .  You can also pass the credentials via secrets as follows:  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"KUBERNETES_HOST\" :   \"http://somehost\" , \n             \"KUBERNETES_API_KEY\" :   { \n                 \"type\" :   \"env\" , \n                 \"key\" :   \"SOME_ENV_VAR\" \n             } \n         } \n     }  }   Then in your probe or action:  { \n     \"name\" :   \"all-our-microservices-should-be-healthy\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosk8s.probes\" , \n         \"func\" :   \"microservice_available_and_healthy\" , \n         \"secrets\" :   [ \"kubernetes\" ], \n         \"arguments\" :   { \n             \"name\" :   \"myapp\" , \n             \"ns\" :   \"myns\" \n         } \n     }  }   You may specify the Kubernetes context you want to use as follows:  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"KUBERNETES_CONTEXT\" :   \"minikube\" \n         } \n     }  }   Or via the environment:  $ export KUBERNETES_CONTEXT=minikube  In the same spirit, you can specify where to find your Kubernetes configuration\nwith:  $ export KUBECONFIG=some/path/config",
            "title": "Configuration"
        },
        {
            "location": "/drivers/kubernetes/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please fork this project, make your changes following the\nusual  PEP 8  code style, add appropriate tests and submit a PR for\nreview.  The Chaos Toolkit projects require all contributors must sign a Developer Certificate of Origin  on each commit they would like to merge\ninto the master branch of the repository. Please, make sure you can abide by\nthe rules of the DCO before submitting a PR.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/kubernetes/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/kubernetes/#pod",
            "text": "",
            "title": "pod"
        },
        {
            "location": "/drivers/kubernetes/#count_pods",
            "text": "Type  probe    Module  chaosk8s.pod.probes    Name  count_pods    Return  integer     Count the number of pods matching the given selector in a given  phase , if\none is given.  Signature:  def   count_pods ( label_selector :   str , \n                phase :   str   =   None , \n                ns :   str   =   'default' , \n                secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   int : \n     pass   Arguments:     Name  Type  Default  Required      label_selector  string   Yes    phase  string  null  No    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"count_pods\" , \n     \"module\" :   \"chaosk8s.pod.probes\" , \n     \"arguments\" :   { \n       \"label_selector\" :   \"\" \n     } \n   }, \n   \"name\" :   \"count-pods\"  }   name :   count-pods  provider : \n   arguments : \n     label_selector :   '' \n   func :   count_pods \n   module :   chaosk8s.pod.probes \n   type :   python  type :   probe",
            "title": "count_pods"
        },
        {
            "location": "/drivers/kubernetes/#pods_in_phase",
            "text": "Type  probe    Module  chaosk8s.pod.probes    Name  pods_in_phase    Return  boolean     Lookup a pod by  label_selector  in the namespace  ns .  Raises :exc: chaoslib.exceptions.FailedActivity  when the state is not\nas expected.  Signature:  def   pods_in_phase ( label_selector :   str , \n                   phase :   str   =   'Running' , \n                   ns :   str   =   'default' , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      label_selector  string   Yes    phase  string  \u201cRunning\u201d  No    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"pods_in_phase\" , \n     \"module\" :   \"chaosk8s.pod.probes\" , \n     \"arguments\" :   { \n       \"label_selector\" :   \"\" \n     } \n   }, \n   \"name\" :   \"pods-in-phase\"  }   name :   pods-in-phase  provider : \n   arguments : \n     label_selector :   '' \n   func :   pods_in_phase \n   module :   chaosk8s.pod.probes \n   type :   python  type :   probe",
            "title": "pods_in_phase"
        },
        {
            "location": "/drivers/kubernetes/#pods_not_in_phase",
            "text": "Type  probe    Module  chaosk8s.pod.probes    Name  pods_not_in_phase    Return  boolean     Lookup a pod by  label_selector  in the namespace  ns .  Raises :exc: chaoslib.exceptions.FailedActivity  when the pod is in the\ngiven phase and should not have.  Signature:  def   pods_not_in_phase ( label_selector :   str , \n                       phase :   str   =   'Running' , \n                       ns :   str   =   'default' , \n                       secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      label_selector  string   Yes    phase  string  \u201cRunning\u201d  No    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"pods_not_in_phase\" , \n     \"module\" :   \"chaosk8s.pod.probes\" , \n     \"arguments\" :   { \n       \"label_selector\" :   \"\" \n     } \n   }, \n   \"name\" :   \"pods-not-in-phase\"  }   name :   pods-not-in-phase  provider : \n   arguments : \n     label_selector :   '' \n   func :   pods_not_in_phase \n   module :   chaosk8s.pod.probes \n   type :   python  type :   probe",
            "title": "pods_not_in_phase"
        },
        {
            "location": "/drivers/kubernetes/#read_pod_logs",
            "text": "Type  probe    Module  chaosk8s.pod.probes    Name  read_pod_logs    Return  mapping     Fetch logs for all the pods with the label  \"name\"  set to  name  and\nreturn a dictionary with the keys being the pod\u2019s name and the values\nthe logs of said pod. If  name  is not provided, use only the label_selector  instead.  When your pod has several containers, you should also set  container_name \nto clarify which container you want to read logs from.  If you provide  last , this returns the logs of the last N seconds\nuntil now. This can set to a fluent delta such as  10 minutes .  You may also set  from_previous  to  True  to capture the logs of a\nprevious pod\u2019s incarnation, if any.  Signature:  def   read_pod_logs ( name :   str   =   None , \n                   last :   Union [ str ,   NoneType ]   =   None , \n                   ns :   str   =   'default' , \n                   from_previous :   bool   =   False , \n                   label_selector :   str   =   'name in ({name})' , \n                   container_name :   str   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   str ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No    last  object  null  No    ns  string  \u201cdefault\u201d  No    from_previous  boolean  false  No    label_selector  string  \u201cname in ({name})\u201d  No    container_name  string  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"read_pod_logs\" , \n     \"module\" :   \"chaosk8s.pod.probes\" \n   }, \n   \"name\" :   \"read-pod-logs\"  }   name :   read-pod-logs  provider : \n   func :   read_pod_logs \n   module :   chaosk8s.pod.probes \n   type :   python  type :   probe",
            "title": "read_pod_logs"
        },
        {
            "location": "/drivers/kubernetes/#terminate_pods",
            "text": "Type  action    Module  chaosk8s.pod.actions    Name  terminate_pods    Return  None     Terminate a pod gracefully. Select the appropriate pods by label and/or\nname patterns. Whenever a pattern is provided for the name, all pods\nretrieved will be filtered out if their name do not match the given\npattern.  If neither  label_selector  nor  name_pattern  are provided, all pods\nin the namespace will be terminated.  If  all  is set to  True , all matching pods will be terminated.\nIf  rand  is set to  True , one random pod will be terminated.\nOtherwise, the first retrieved pod will be terminated.  Signature:  def   terminate_pods ( label_selector :   str   =   None , \n                    name_pattern :   str   =   None , \n                    all :   bool   =   False , \n                    rand :   bool   =   False , \n                    ns :   str   =   'default' , \n                    secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      label_selector  string  null  No    name_pattern  string  null  No    all  boolean  false  No    rand  boolean  false  No    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"terminate_pods\" , \n     \"module\" :   \"chaosk8s.pod.actions\" \n   }, \n   \"name\" :   \"terminate-pods\"  }   name :   terminate-pods  provider : \n   func :   terminate_pods \n   module :   chaosk8s.pod.actions \n   type :   python  type :   action",
            "title": "terminate_pods"
        },
        {
            "location": "/drivers/kubernetes/#actions",
            "text": "",
            "title": "actions"
        },
        {
            "location": "/drivers/kubernetes/#kill_microservice",
            "text": "Type  action    Module  chaosk8s.actions    Name  kill_microservice    Return  None     Kill a microservice by  name  in the namespace  ns .  The microservice is killed by deleting the deployment for it without\na graceful period to trigger an abrupt termination.  The selected resources are matched by the given  label_selector .  Signature:  def   kill_microservice ( name :   str , \n                       ns :   str   =   'default' , \n                       label_selector :   str   =   'name in ({name})' , \n                       secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No    label_selector  string  \u201cname in ({name})\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"kill_microservice\" , \n     \"module\" :   \"chaosk8s.actions\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"kill-microservice\"  }   name :   kill-microservice  provider : \n   arguments : \n     name :   '' \n   func :   kill_microservice \n   module :   chaosk8s.actions \n   type :   python  type :   action",
            "title": "kill_microservice"
        },
        {
            "location": "/drivers/kubernetes/#remove_service_endpoint",
            "text": "Type  action    Module  chaosk8s.actions    Name  remove_service_endpoint    Return  None     Remove the service endpoint that sits in front of microservices (pods).  Signature:  def   remove_service_endpoint ( name :   str , \n                             ns :   str   =   'default' , \n                             secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"remove_service_endpoint\" , \n     \"module\" :   \"chaosk8s.actions\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"remove-service-endpoint\"  }   name :   remove-service-endpoint  provider : \n   arguments : \n     name :   '' \n   func :   remove_service_endpoint \n   module :   chaosk8s.actions \n   type :   python  type :   action",
            "title": "remove_service_endpoint"
        },
        {
            "location": "/drivers/kubernetes/#scale_microservice",
            "text": "Type  action    Module  chaosk8s.actions    Name  scale_microservice    Return  None     Scale a deployment up or down. The  name  is the name of the deployment.  Signature:  def   scale_microservice ( name :   str , \n                        replicas :   int , \n                        ns :   str   =   'default' , \n                        secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    replicas  integer   Yes    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"scale_microservice\" , \n     \"module\" :   \"chaosk8s.actions\" , \n     \"arguments\" :   { \n       \"replicas\" :   0 , \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"scale-microservice\"  }   name :   scale-microservice  provider : \n   arguments : \n     name :   '' \n     replicas :   0 \n   func :   scale_microservice \n   module :   chaosk8s.actions \n   type :   python  type :   action",
            "title": "scale_microservice"
        },
        {
            "location": "/drivers/kubernetes/#start_microservice",
            "text": "Type  action    Module  chaosk8s.actions    Name  start_microservice    Return  None     Start a microservice described by the deployment config, which must be the\npath to the JSON or YAML representation of the deployment.  Signature:  def   start_microservice ( spec_path :   str , \n                        ns :   str   =   'default' , \n                        secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      spec_path  string   Yes    ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"start_microservice\" , \n     \"module\" :   \"chaosk8s.actions\" , \n     \"arguments\" :   { \n       \"spec_path\" :   \"\" \n     } \n   }, \n   \"name\" :   \"start-microservice\"  }   name :   start-microservice  provider : \n   arguments : \n     spec_path :   '' \n   func :   start_microservice \n   module :   chaosk8s.actions \n   type :   python  type :   action",
            "title": "start_microservice"
        },
        {
            "location": "/drivers/kubernetes/#probes",
            "text": "",
            "title": "probes"
        },
        {
            "location": "/drivers/kubernetes/#all_microservices_healthy",
            "text": "Type  probe    Module  chaosk8s.probes    Name  all_microservices_healthy    Return  Tuple[Dict[str, Any], Dict[str, Any]]     Check all microservices in the system are running and available.  Raises :exc: chaoslib.exceptions.FailedActivity  when the state is not\nas expected.  Signature:  def   all_microservices_healthy ( ns :   str   =   'default' , \n                               secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None \n                               )   ->   Tuple [ Dict [ str ,   Any ],   Dict [ str ,   Any ]]: \n     pass   Arguments:     Name  Type  Default  Required      ns  string  \u201cdefault\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"all_microservices_healthy\" , \n     \"module\" :   \"chaosk8s.probes\" \n   }, \n   \"name\" :   \"all-microservices-healthy\"  }   name :   all-microservices-healthy  provider : \n   func :   all_microservices_healthy \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "all_microservices_healthy"
        },
        {
            "location": "/drivers/kubernetes/#deployment_is_not_fully_available",
            "text": "Type  probe    Module  chaosk8s.probes    Name  deployment_is_not_fully_available    Return  None     Wait until the deployment gets into an intermediate state where not all\nexpected replicas are available. Once this state is reached, return  True .\nIf the state is not reached after  timeout  seconds, a\n:exc: chaoslib.exceptions.FailedActivity  exception is raised.  Signature:  def   deployment_is_not_fully_available ( \n         name :   str , \n         ns :   str   =   'default' , \n         label_selector :   str   =   'name in ({name})' , \n         timeout :   int   =   30 , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No    label_selector  string  \u201cname in ({name})\u201d  No    timeout  integer  30  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"deployment_is_not_fully_available\" , \n     \"module\" :   \"chaosk8s.probes\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"deployment-is-not-fully-available\"  }   name :   deployment-is-not-fully-available  provider : \n   arguments : \n     name :   '' \n   func :   deployment_is_not_fully_available \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "deployment_is_not_fully_available"
        },
        {
            "location": "/drivers/kubernetes/#microservice_available_and_healthy",
            "text": "Type  probe    Module  chaosk8s.probes    Name  microservice_available_and_healthy    Return  Union[bool, NoneType]     Lookup a deployment by  name  in the namespace  ns .  The selected resources are matched by the given  label_selector .  Raises :exc: chaoslib.exceptions.FailedActivity  when the state is not\nas expected.  Signature:  def   microservice_available_and_healthy ( \n         name :   str , \n         ns :   str   =   'default' , \n         label_selector :   str   =   'name in ({name})' , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Union [ bool ,   NoneType ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No    label_selector  string  \u201cname in ({name})\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"microservice_available_and_healthy\" , \n     \"module\" :   \"chaosk8s.probes\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"microservice-available-and-healthy\"  }   name :   microservice-available-and-healthy  provider : \n   arguments : \n     name :   '' \n   func :   microservice_available_and_healthy \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "microservice_available_and_healthy"
        },
        {
            "location": "/drivers/kubernetes/#microservice_is_not_available",
            "text": "Type  probe    Module  chaosk8s.probes    Name  microservice_is_not_available    Return  boolean     Lookup pods with a  name  label set to the given  name  in the specified ns .  Raises :exc: chaoslib.exceptions.FailedActivity  when one of the pods\nwith the specified  name  is in the  \"Running\"  phase.  Signature:  def   microservice_is_not_available ( \n         name :   str , \n         ns :   str   =   'default' , \n         label_selector :   str   =   'name in ({name})' , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No    label_selector  string  \u201cname in ({name})\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"microservice_is_not_available\" , \n     \"module\" :   \"chaosk8s.probes\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"microservice-is-not-available\"  }   name :   microservice-is-not-available  provider : \n   arguments : \n     name :   '' \n   func :   microservice_is_not_available \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "microservice_is_not_available"
        },
        {
            "location": "/drivers/kubernetes/#read_microservices_logs",
            "text": "Type  probe    Module  chaosk8s.probes    Name  read_microservices_logs    Return  mapping     Fetch logs for all the pods with the label  \"name\"  set to  name  and\nreturn a dictionary with the keys being the pod\u2019s name and the values\nthe logs of said pod. If  name  is not provided, use only the label_selector  instead.  When your pod has several containers, you should also set  container_name \nto clarify which container you want to read logs from.  If you provide  last , this returns the logs of the last N seconds\nuntil now. This can set to a fluent delta such as  10 minutes .  You may also set  from_previous  to  True  to capture the logs of a\nprevious pod\u2019s incarnation, if any.  Signature:  def   read_microservices_logs ( \n         name :   str   =   None , \n         last :   Union [ str ,   NoneType ]   =   None , \n         ns :   str   =   'default' , \n         from_previous :   bool   =   False , \n         label_selector :   str   =   'name in ({name})' , \n         container_name :   str   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   str ]: \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No    last  object  null  No    ns  string  \u201cdefault\u201d  No    from_previous  boolean  false  No    label_selector  string  \u201cname in ({name})\u201d  No    container_name  string  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"read_microservices_logs\" , \n     \"module\" :   \"chaosk8s.probes\" \n   }, \n   \"name\" :   \"read-microservices-logs\"  }   name :   read-microservices-logs  provider : \n   func :   read_microservices_logs \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "read_microservices_logs"
        },
        {
            "location": "/drivers/kubernetes/#service_endpoint_is_initialized",
            "text": "Type  probe    Module  chaosk8s.probes    Name  service_endpoint_is_initialized    Return  None     Lookup a service endpoint by its name and raises :exc: FailedProbe  when\nthe service was not found or not initialized.  Signature:  def   service_endpoint_is_initialized ( name :   str , \n                                     ns :   str   =   'default' , \n                                     label_selector :   str   =   'name in ({name})' , \n                                     secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string   Yes    ns  string  \u201cdefault\u201d  No    label_selector  string  \u201cname in ({name})\u201d  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"service_endpoint_is_initialized\" , \n     \"module\" :   \"chaosk8s.probes\" , \n     \"arguments\" :   { \n       \"name\" :   \"\" \n     } \n   }, \n   \"name\" :   \"service-endpoint-is-initialized\"  }   name :   service-endpoint-is-initialized  provider : \n   arguments : \n     name :   '' \n   func :   service_endpoint_is_initialized \n   module :   chaosk8s.probes \n   type :   python  type :   probe",
            "title": "service_endpoint_is_initialized"
        },
        {
            "location": "/drivers/kubernetes/#node",
            "text": "",
            "title": "node"
        },
        {
            "location": "/drivers/kubernetes/#cordon_node",
            "text": "Type  action    Module  chaosk8s.node.actions    Name  cordon_node    Return  None     Cordon nodes matching the given label or name, so that no pods\nare scheduled on them any longer.  Signature:  def   cordon_node ( name :   str   =   None , \n                 label_selector :   str   =   None , \n                 secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No    label_selector  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"cordon_node\" , \n     \"module\" :   \"chaosk8s.node.actions\" \n   }, \n   \"name\" :   \"cordon-node\"  }   name :   cordon-node  provider : \n   func :   cordon_node \n   module :   chaosk8s.node.actions \n   type :   python  type :   action",
            "title": "cordon_node"
        },
        {
            "location": "/drivers/kubernetes/#create_node",
            "text": "Type  action    Module  chaosk8s.node.actions    Name  create_node    Return  kubernetes.client.models.v1_node.V1Node     Create one new node in the cluster.  Due to the way things work on certain cloud providers, you won\u2019t be able\nto use this meaningfully on them. For instance on GCE, this will likely\nfail.  See also:  https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency  Signature:  def   create_node ( meta :   Dict [ str ,   Any ]   =   None , \n                 spec :   Dict [ str ,   Any ]   =   None , \n                 secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None \n                 )   ->   kubernetes . client . models . v1_node . V1Node : \n     pass   Arguments:     Name  Type  Default  Required      meta  mapping  null  No    spec  mapping  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"create_node\" , \n     \"module\" :   \"chaosk8s.node.actions\" \n   }, \n   \"name\" :   \"create-node\"  }   name :   create-node  provider : \n   func :   create_node \n   module :   chaosk8s.node.actions \n   type :   python  type :   action",
            "title": "create_node"
        },
        {
            "location": "/drivers/kubernetes/#delete_nodes",
            "text": "Type  action    Module  chaosk8s.node.actions    Name  delete_nodes    Return  None     Delete nodes gracefully. Select the appropriate nodes by label.  Nodes are not drained beforehand so we can see how cluster behaves. Nodes\ncannot be restarted, they are really deleted. Please be careful when using\nthis action.  On certain cloud providers, you also need to delete the underneath VM\ninstance as well afterwards. This is the case on GCE for instance.  If  all  is set to  True , all nodes will be terminated.\nIf  rand  is set to  True , one random node will be terminated.\nIf \u0300 count  is set to a positive number, only a upto  count  nodes\n(randomly picked) will be terminated. Otherwise, the first retrieved node\nwill be terminated.  Signature:  def   delete_nodes ( label_selector :   str   =   None , \n                  all :   bool   =   False , \n                  rand :   bool   =   False , \n                  count :   int   =   None , \n                  grace_period_seconds :   int   =   None , \n                  secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      label_selector  string  null  No    all  boolean  false  No    rand  boolean  false  No    count  integer  null  No    grace_period_seconds  integer  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"delete_nodes\" , \n     \"module\" :   \"chaosk8s.node.actions\" \n   }, \n   \"name\" :   \"delete-nodes\"  }   name :   delete-nodes  provider : \n   func :   delete_nodes \n   module :   chaosk8s.node.actions \n   type :   python  type :   action",
            "title": "delete_nodes"
        },
        {
            "location": "/drivers/kubernetes/#drain_nodes",
            "text": "Type  action    Module  chaosk8s.node.actions    Name  drain_nodes    Return  boolean     Drain nodes matching the given label or name, so that no pods are scheduled\non them any longer and running pods are evicted.  It does a similar job to  kubectl drain --ignore-daemonsets  or kubectl drain --delete-local-data --ignore-daemonsets  if delete_pods_with_local_storage  is set to  True . There is no\nequivalent to the  kubectl drain --force  flag.  You probably want to call  uncordon  from in your experiment\u2019s rollbacks.  Signature:  def   drain_nodes ( name :   str   =   None , \n                 label_selector :   str   =   None , \n                 delete_pods_with_local_storage :   bool   =   False , \n                 timeout :   int   =   120 , \n                 secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   bool : \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No    label_selector  string  null  No    delete_pods_with_local_storage  boolean  false  No    timeout  integer  120  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"drain_nodes\" , \n     \"module\" :   \"chaosk8s.node.actions\" \n   }, \n   \"name\" :   \"drain-nodes\"  }   name :   drain-nodes  provider : \n   func :   drain_nodes \n   module :   chaosk8s.node.actions \n   type :   python  type :   action",
            "title": "drain_nodes"
        },
        {
            "location": "/drivers/kubernetes/#uncordon_node",
            "text": "Type  action    Module  chaosk8s.node.actions    Name  uncordon_node    Return  None     Uncordon nodes matching the given label name, so that pods can be\nscheduled on them again.  Signature:  def   uncordon_node ( name :   str   =   None , \n                   label_selector :   str   =   None , \n                   secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None ): \n     pass   Arguments:     Name  Type  Default  Required      name  string  null  No    label_selector  string  null  No     Usage:  { \n   \"type\" :   \"action\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"uncordon_node\" , \n     \"module\" :   \"chaosk8s.node.actions\" \n   }, \n   \"name\" :   \"uncordon-node\"  }   name :   uncordon-node  provider : \n   func :   uncordon_node \n   module :   chaosk8s.node.actions \n   type :   python  type :   action",
            "title": "uncordon_node"
        },
        {
            "location": "/drivers/prometheus/",
            "text": "Extension \nchaosprometheus\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\n0.3.0\n\n\n\n\n\n\nRepository\n\n\nhttps://github.com/chaostoolkit-incubator/chaostoolkit-prometheus\n\n\n\n\n\n\n\n\n\n\nPrometheus\n support for the \nChaos Toolkit\n.\n\n\nInstall\n\u00b6\n\n\nTo be used from your experiment, this package must be installed in the Python\nenvironment where \nchaostoolkit\n already lives.\n\n\n$ pip install chaostoolkit-prometheus\n\n\n\n\nUsage\n\u00b6\n\n\nTo use this package, you must create have access to a Prometheus instance via\nHTTP and be allowed to connect to it.\n\n\nThis package only exports probes to query for some aspects of your system as\nmonitored by Prometheus.\n\n\nHere is an example of querying Prometheus at a given moment\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"fetch-cpu-just-2mn-ago\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosprometheus.probes\"\n,\n\n        \n\"func\"\n:\n \n\"query\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"query\"\n:\n \n\"process_cpu_seconds_total{job='websvc'}\"\n,\n\n            \n\"when\"\n:\n \n\"2 minutes ago\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nYou can also ask for an interval as follows:\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"fetch-cpu-over-interval\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"chaosprometheus.probes\"\n,\n\n        \n\"func\"\n:\n \n\"query_interval\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"query\"\n:\n \n\"process_cpu_seconds_total{job='websvc'}\"\n,\n\n            \n\"start\"\n:\n \n\"2 minutes ago\"\n,\n\n            \n\"end\"\n:\n \n\"now\"\n,\n\n            \n\"step\"\n:\n \n5\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nIn both cases, the probe returns the \nJSON payload as-is\n from Prometheus\nor raises an exception when an error is met.\n\n\nThe result is not further process and should be found in the generated report\nof the experiment run.\n\n\nContribute\n\u00b6\n\n\nIf you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual \nPEP 8\n code style, sprinkling with tests and submit a PR for\nreview.\n\n\nExported Activities\n\u00b6\n\n\nprobes\n\u00b6\n\n\n\n\nquery\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosprometheus.probes\n\n\n\n\n\n\nName\n\n\nquery\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nRun an instant query against a Prometheus server and returns its result\nas-is.\n\n\nSignature:\n\n\ndef\n \nquery\n(\nquery\n:\n \nstr\n,\n\n          \nwhen\n:\n \nstr\n \n=\n \nNone\n,\n\n          \ntimeout\n:\n \nfloat\n \n=\n \nNone\n,\n\n          \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n          \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nwhen\n\n\nstring\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"query\"\n,\n\n    \n\"module\"\n:\n \n\"chaosprometheus.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"query\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"query\"\n\n\n}\n\n\n\n\n\nname\n:\n \nquery\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nquery\n:\n \n''\n\n  \nfunc\n:\n \nquery\n\n  \nmodule\n:\n \nchaosprometheus.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe\n\n\n\n\n\n\n\nquery_interval\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nprobe\n\n\n\n\n\n\nModule\n\n\nchaosprometheus.probes\n\n\n\n\n\n\nName\n\n\nquery_interval\n\n\n\n\n\n\nReturn\n\n\nmapping\n\n\n\n\n\n\n\n\nRun a range query against a Prometheus server and returns its result as-is.\n\n\nThe \nstart\n and \nend\n arguments can be a RFC 3339 date or expressed more\ncolloquially such as \n\"5 minutes ago\"\n.\n\n\nSignature:\n\n\ndef\n \nquery_interval\n(\n\n        \nquery\n:\n \nstr\n,\n\n        \nstart\n:\n \nstr\n,\n\n        \nend\n:\n \nstr\n,\n\n        \nstep\n:\n \nint\n \n=\n \n1\n,\n\n        \ntimeout\n:\n \nfloat\n \n=\n \nNone\n,\n\n        \nconfiguration\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n,\n\n        \nsecrets\n:\n \nDict\n[\nstr\n,\n \nDict\n[\nstr\n,\n \nstr\n]]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n    \npass\n\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nstart\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nend\n\n\nstring\n\n\n\n\nYes\n\n\n\n\n\n\nstep\n\n\ninteger\n\n\n1\n\n\nNo\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\nnull\n\n\nNo\n\n\n\n\n\n\n\n\nUsage:\n\n\n{\n\n  \n\"type\"\n:\n \n\"probe\"\n,\n\n  \n\"provider\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"python\"\n,\n\n    \n\"func\"\n:\n \n\"query_interval\"\n,\n\n    \n\"module\"\n:\n \n\"chaosprometheus.probes\"\n,\n\n    \n\"arguments\"\n:\n \n{\n\n      \n\"end\"\n:\n \n\"\"\n,\n\n      \n\"query\"\n:\n \n\"\"\n,\n\n      \n\"start\"\n:\n \n\"\"\n\n    \n}\n\n  \n},\n\n  \n\"name\"\n:\n \n\"query-interval\"\n\n\n}\n\n\n\n\n\nname\n:\n \nquery-interval\n\n\nprovider\n:\n\n  \narguments\n:\n\n    \nend\n:\n \n''\n\n    \nquery\n:\n \n''\n\n    \nstart\n:\n \n''\n\n  \nfunc\n:\n \nquery_interval\n\n  \nmodule\n:\n \nchaosprometheus.probes\n\n  \ntype\n:\n \npython\n\n\ntype\n:\n \nprobe",
            "title": "Prometheus"
        },
        {
            "location": "/drivers/prometheus/#extension-chaosprometheus",
            "text": "Version  0.3.0    Repository  https://github.com/chaostoolkit-incubator/chaostoolkit-prometheus      Prometheus  support for the  Chaos Toolkit .",
            "title": "Extension chaosprometheus"
        },
        {
            "location": "/drivers/prometheus/#install",
            "text": "To be used from your experiment, this package must be installed in the Python\nenvironment where  chaostoolkit  already lives.  $ pip install chaostoolkit-prometheus",
            "title": "Install"
        },
        {
            "location": "/drivers/prometheus/#usage",
            "text": "To use this package, you must create have access to a Prometheus instance via\nHTTP and be allowed to connect to it.  This package only exports probes to query for some aspects of your system as\nmonitored by Prometheus.  Here is an example of querying Prometheus at a given moment  { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"fetch-cpu-just-2mn-ago\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosprometheus.probes\" , \n         \"func\" :   \"query\" , \n         \"arguments\" :   { \n             \"query\" :   \"process_cpu_seconds_total{job='websvc'}\" , \n             \"when\" :   \"2 minutes ago\" \n         } \n     }  }   You can also ask for an interval as follows:  { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"fetch-cpu-over-interval\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"chaosprometheus.probes\" , \n         \"func\" :   \"query_interval\" , \n         \"arguments\" :   { \n             \"query\" :   \"process_cpu_seconds_total{job='websvc'}\" , \n             \"start\" :   \"2 minutes ago\" , \n             \"end\" :   \"now\" , \n             \"step\" :   5 \n         } \n     }  }   In both cases, the probe returns the  JSON payload as-is  from Prometheus\nor raises an exception when an error is met.  The result is not further process and should be found in the generated report\nof the experiment run.",
            "title": "Usage"
        },
        {
            "location": "/drivers/prometheus/#contribute",
            "text": "If you wish to contribute more functions to this package, you are more than\nwelcome to do so. Please, fork this project, make your changes following the\nusual  PEP 8  code style, sprinkling with tests and submit a PR for\nreview.",
            "title": "Contribute"
        },
        {
            "location": "/drivers/prometheus/#exported-activities",
            "text": "",
            "title": "Exported Activities"
        },
        {
            "location": "/drivers/prometheus/#probes",
            "text": "",
            "title": "probes"
        },
        {
            "location": "/drivers/prometheus/#query",
            "text": "Type  probe    Module  chaosprometheus.probes    Name  query    Return  mapping     Run an instant query against a Prometheus server and returns its result\nas-is.  Signature:  def   query ( query :   str , \n           when :   str   =   None , \n           timeout :   float   =   None , \n           configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n           secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      query  string   Yes    when  string  null  No    timeout  number  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"query\" , \n     \"module\" :   \"chaosprometheus.probes\" , \n     \"arguments\" :   { \n       \"query\" :   \"\" \n     } \n   }, \n   \"name\" :   \"query\"  }   name :   query  provider : \n   arguments : \n     query :   '' \n   func :   query \n   module :   chaosprometheus.probes \n   type :   python  type :   probe",
            "title": "query"
        },
        {
            "location": "/drivers/prometheus/#query_interval",
            "text": "Type  probe    Module  chaosprometheus.probes    Name  query_interval    Return  mapping     Run a range query against a Prometheus server and returns its result as-is.  The  start  and  end  arguments can be a RFC 3339 date or expressed more\ncolloquially such as  \"5 minutes ago\" .  Signature:  def   query_interval ( \n         query :   str , \n         start :   str , \n         end :   str , \n         step :   int   =   1 , \n         timeout :   float   =   None , \n         configuration :   Dict [ str ,   Dict [ str ,   str ]]   =   None , \n         secrets :   Dict [ str ,   Dict [ str ,   str ]]   =   None )   ->   Dict [ str ,   Any ]: \n     pass   Arguments:     Name  Type  Default  Required      query  string   Yes    start  string   Yes    end  string   Yes    step  integer  1  No    timeout  number  null  No     Usage:  { \n   \"type\" :   \"probe\" , \n   \"provider\" :   { \n     \"type\" :   \"python\" , \n     \"func\" :   \"query_interval\" , \n     \"module\" :   \"chaosprometheus.probes\" , \n     \"arguments\" :   { \n       \"end\" :   \"\" , \n       \"query\" :   \"\" , \n       \"start\" :   \"\" \n     } \n   }, \n   \"name\" :   \"query-interval\"  }   name :   query-interval  provider : \n   arguments : \n     end :   '' \n     query :   '' \n     start :   '' \n   func :   query_interval \n   module :   chaosprometheus.probes \n   type :   python  type :   probe",
            "title": "query_interval"
        },
        {
            "location": "/drivers/spring/",
            "text": "",
            "title": "Spring"
        },
        {
            "location": "/reference/concepts/",
            "text": "Chaos Engeering Concepts in the Chaos Toolkit\n\u00b6\n\n\nIf you haven\u2019t already, we strongly recommend reading the fantastic\n\nChaos Engineering\n book from O\u2019Reilly Media. This\nbook will give you some fantastic background on the whole Chaos Engineering\ndiscipline, and it\u2019s free!\n\n\nChaos Engineering is a discipline that allows you to surface weaknesses, and\neventually build confidence, in complex and often distributed systems. \n\n\nThe Chaos Toolkit aims to give you the simplest experience for writing and\nrunning your own Chaos Engineering experiments. The main concepts are all\nexpressed in an experiment definition, of which the following is an example\nfrom the\n\nChaos Toolkit Samples\n\nproject:\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"System is resilient to provider's failures\"\n,\n\n    \n\"description\"\n:\n \n\"Can our consumer survive gracefully a provider's failure?\"\n,\n\n    \n\"tags\"\n:\n \n[\n\n        \n\"service\"\n,\n\n        \n\"kubernetes\"\n,\n\n        \n\"spring\"\n\n    \n],\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"Services are all available and healthy\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"all-services-are-healthy\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"python\"\n,\n\n                    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n                    \n\"func\"\n:\n \n\"all_microservices_healthy\"\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"stop-provider-service\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n                \n\"func\"\n:\n \n\"kill_microservice\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"name\"\n:\n \n\"my-provider-service\"\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n10\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"all-services-are-healthy\"\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"consumer-service-must-still-respond\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"http\"\n,\n\n                \n\"url\"\n:\n \n\"http://192.168.42.58:31018/invokeConsumedService\"\n\n            \n}\n\n        \n}\n\n    \n],\n\n    \n\"rollbacks\"\n:\n \n[]\n\n\n}\n\n\n\n\n\nThe key concepts of the Chaos Toolkit are \nExperiments\n,\n\nSteady State Hypothesis\n and the experiment\u2019s \nMethod\n. The \nMethod\n\ncontains a combination of \nProbes\n and \nActions\n.\n\n\nExperiments\n\u00b6\n\n\nA Chaos Toolkit experiment is provided in a single file and is currently\nexpressed in JSON.\n\n\nSteady State Hypothesis\n\u00b6\n\n\nA Steady State Hypothesis describes \u201cwhat normal looks like\u201d for your system\nin order for the experiment to surface information about weaknesses when compared against the declared \u201cnormal\u201d tolerances of what is measured.\n\n\nThe Chaos Toolkit uses the Steady State Hypothesis for two purposes. It is used as a check before an experiment is run that the target system is in a recognised \nnormal\n state. It is also used as the template for comparison of the state of your system \nafter\n the experiment has been run, forming the results provided by the experiment\u2019s report.\n\n\nMethod\n\u00b6\n\n\nAn experiment\u2019s activities are contained within its \nMethod\n block.\n\n\nProbes\n\u00b6\n\n\nA probe is a way of observing a particular set of conditions in the system that\nis undergoing experimentation.\n\n\nActions\n\u00b6\n\n\nAn action is a particular activity that needs to be enacted on the system under\nexperimentation.\n\n\nRollbacks\n\u00b6\n\n\nAn experiment may define a sequence of actions that revert what was undone\nduring the experiment.",
            "title": "Concepts"
        },
        {
            "location": "/reference/concepts/#chaos-engeering-concepts-in-the-chaos-toolkit",
            "text": "If you haven\u2019t already, we strongly recommend reading the fantastic Chaos Engineering  book from O\u2019Reilly Media. This\nbook will give you some fantastic background on the whole Chaos Engineering\ndiscipline, and it\u2019s free!  Chaos Engineering is a discipline that allows you to surface weaknesses, and\neventually build confidence, in complex and often distributed systems.   The Chaos Toolkit aims to give you the simplest experience for writing and\nrunning your own Chaos Engineering experiments. The main concepts are all\nexpressed in an experiment definition, of which the following is an example\nfrom the Chaos Toolkit Samples \nproject:  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"System is resilient to provider's failures\" , \n     \"description\" :   \"Can our consumer survive gracefully a provider's failure?\" , \n     \"tags\" :   [ \n         \"service\" , \n         \"kubernetes\" , \n         \"spring\" \n     ], \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"Services are all available and healthy\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"all-services-are-healthy\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"type\" :   \"python\" , \n                     \"module\" :   \"chaosk8s.probes\" , \n                     \"func\" :   \"all_microservices_healthy\" \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"stop-provider-service\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosk8s.actions\" , \n                 \"func\" :   \"kill_microservice\" , \n                 \"arguments\" :   { \n                     \"name\" :   \"my-provider-service\" \n                 } \n             }, \n             \"pauses\" :   { \n                 \"after\" :   10 \n             } \n         }, \n         { \n             \"ref\" :   \"all-services-are-healthy\" \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"consumer-service-must-still-respond\" , \n             \"provider\" :   { \n                 \"type\" :   \"http\" , \n                 \"url\" :   \"http://192.168.42.58:31018/invokeConsumedService\" \n             } \n         } \n     ], \n     \"rollbacks\" :   []  }   The key concepts of the Chaos Toolkit are  Experiments , Steady State Hypothesis  and the experiment\u2019s  Method . The  Method \ncontains a combination of  Probes  and  Actions .",
            "title": "Chaos Engeering Concepts in the Chaos Toolkit"
        },
        {
            "location": "/reference/concepts/#experiments",
            "text": "A Chaos Toolkit experiment is provided in a single file and is currently\nexpressed in JSON.",
            "title": "Experiments"
        },
        {
            "location": "/reference/concepts/#steady-state-hypothesis",
            "text": "A Steady State Hypothesis describes \u201cwhat normal looks like\u201d for your system\nin order for the experiment to surface information about weaknesses when compared against the declared \u201cnormal\u201d tolerances of what is measured.  The Chaos Toolkit uses the Steady State Hypothesis for two purposes. It is used as a check before an experiment is run that the target system is in a recognised  normal  state. It is also used as the template for comparison of the state of your system  after  the experiment has been run, forming the results provided by the experiment\u2019s report.",
            "title": "Steady State Hypothesis"
        },
        {
            "location": "/reference/concepts/#method",
            "text": "An experiment\u2019s activities are contained within its  Method  block.",
            "title": "Method"
        },
        {
            "location": "/reference/concepts/#probes",
            "text": "A probe is a way of observing a particular set of conditions in the system that\nis undergoing experimentation.",
            "title": "Probes"
        },
        {
            "location": "/reference/concepts/#actions",
            "text": "An action is a particular activity that needs to be enacted on the system under\nexperimentation.",
            "title": "Actions"
        },
        {
            "location": "/reference/concepts/#rollbacks",
            "text": "An experiment may define a sequence of actions that revert what was undone\nduring the experiment.",
            "title": "Rollbacks"
        },
        {
            "location": "/reference/api/experiment/",
            "text": "An Open API for Chaos Engineering Experiments\n\u00b6\n\n\n\n\nInfo\n\n\nThe current specification has not reached its 1.0.0 stable version yet. Make\nsure to \njoin the discussion\n to provide any feedback you might have.\n\n\n\n\nIntroduction\n\u00b6\n\n\nThe purpose of this specification is to formalize the elements of a Chaos\nEngineering experiment and offer a way to federate the community around a\ncommon syntax and semantic.\n\n\nAs a fairly recent field, Chaos Engineering is a dynamic and its foundations\nare still emerging. However, it appears certain concepts are settling down\nenough to start agreeing on a shared understanding.\n\n\nThis specification is not prescriptive and does not aim at forcing the\ncommunity into one direction, rather it strives at providing a common\nvocabulary that new practicionners can easily make sense of.\n\n\nIt is necessary to appreciate that this document does not specify what tools,\nsuch as the Chaos Monkey or similar, should look like. Instead, this document\nspecifies how Chaos Engineering Experiment could be described, shared and\nconducted collaboratively.\n\n\nConventions Used in This Document\n\u00b6\n\n\nThe key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in \nRFC 2119\n.\n\n\nThe terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in \nRFC 7159\n.\n\n\nOther formats\n\u00b6\n\n\nWhile this specification uses JSON to define its elements, implementations may\nallow loading from other formats, such as \nYAML\n. As long as the output\nof such format respects the specification herein.\n\n\nChaos Engineering Elements\n\u00b6\n\n\nOverview\n\u00b6\n\n\nAn Experiment is one possible description of the\n\nprinciples of the Chaos Engineering\n. The intention of such a\ndescription is to provide shared understanding around a hypothesis on how\nto discover system\u2019s behavior under certain conditions.\n\n\nAn \nExperiment\n declares a steady \nstate hypothesis\n, alongside\n\nprobes\n to validate this steady state is met, and a \nmethod\n as a\nsequence \nactions\n and \nprobes\n, to interact and query the system\nrespectively.\n\n\nBy using a variety of \nprobes\n, experiments should gather information to\nsense behaviors in the system, potentially leading to systemic patterns that can\nbe stabilized.\n\n\nExperiment\n\u00b6\n\n\nA Chaos Engineering experiment, or simply an experiment, describes both the\nelements and the order in which they should be applied.\n\n\nAn experiment is a JSON object.\n\n\nAn experiment MUST declare:\n\n\n\n\na \nversion\n property\n\n\na \ntitle\n property\n\n\na \ndescription\n property\n\n\na \nsteady-state-hypothesis\n property\n\n\na \nmethod\n property\n\n\n\n\nThe \nversion\n property MUST be \n\"0.1.0\"\n.\n\n\nThe experiment\u2019s \ntitle\n and \ndescription\n are meant for humans and therefore\nshould be as descriptive as possible to clarify the experiment\u2019s rationale.\n\n\nTitle and description are JSON strings with no maximum length.\n\n\nAn experiment SHOULD also declare:\n\n\n\n\na \nrollbacks\n property\n\n\n\n\nAn experiment MAY finally declare:\n\n\n\n\na \ntags\n property\n\n\na \nsecrets\n property\n\n\n\n\nTags provide a way of categorizing experiments. It is a sequence of JSON\nstrings.\n\n\nSteady State Hypothesis\n\u00b6\n\n\nThe Steady State Hypothesis element describes what normal looks like in your\nsystem before the Method element is applied. If the steady state is not met,\nthe Method element is not applied and the experiment MUST bail out.\n\n\nThe Steady State Hypothesis element is a JSON object.\n\n\nSteady State Hypothesis element MUST declare:\n\n\n\n\na \ntitle\n property\n\n\na \nprobes\n property\n\n\n\n\nThe \ntitle\n is meant for humans and therefore should clarify the rationale for\nthis hypothesis.\n\n\nEach \nProbe\n MUST define a \ntolerance\n property that acting as a gate\nmechanism for the experiment to carry on or bail. Any \nProbe\n that does not\nfall into the \ntolerance\n zone MUST fail the experiment.\n\n\nSteady State Probe Tolerance\n\u00b6\n\n\nProbes\n of the Steady State Hypothesis MUST declare an additional property\nnamed \ntolerance\n.\n\n\nThe \ntolerance\n property\u2019s value MUST be one of:\n\n\n\n\na scalar: JSON string, number (an integer), boolean\n\n\na sequence of scalars: JSON string, number, boolean\n\n\nan object\n\n\n\n\nIn the case of a scalar or the sequence, the tolerance validation MUST be\nstrict. The value returned by the \nProbe\n MUST be checked against the\nscalar value. The experiment MUST bail when both fail to match.\n\n\nWhen the \ntolerance\n is a sequence. If it has only two values, those two values\nrepresent a lower and upper bound within which the \nProbe\n returned value\nmust fall (inclusive).\n\n\nWhen the sequence has more than two elements, the \nProbe\n returned value\nmust be contained in that sequence.\n\n\nWhen the \ntolerance\n is an object, it MUST have a \ntype\n property which MUST\nbe one of the followings: \n\"probe\"\n, \n\"regex\"\n or \n\"jsonpath\"\n.\n\n\nWhen the \ntype\n property is \n\"probe\"\n, the object MUST be a \nProbe\n that is\napplied. The probe should take two arguments, \nvalue\n and \nsecrets\n where\nthe value is the \nProbe\n returned value and secrets a \nSecret\n\nobject or \nnull\n. Its returned status MUST be successful for the \ntolerance\n to\nbe considered valid.\n\n\nWhen the \ntype\n property is \n\"regex\"\n, the object MUST have a \npattern\n\nproperty which MUST be a valid regular expression. The \ntolerance\n succeeds if\nthe \nProbe\n returned value is matched against the pattern.\n\n\nWhen the \ntype\n property is \n\"jsonpath\"\n, the object MUST have a \npath\n\nproperty which MUST be a valid \nJSON Path\n. In addition, the object MAY\nhave a \nexpect\n property which is used to compare each value matched by the JSON\nPath to that value. The \nexpect\n property value MUST be a scalar. When the\n\nexpect\n property is not present, the \ntolerance\n succeeds if the JSON Path\nmatched at least one item.\n\n\nIn addition, when the \nProbe\n returned value is an object with a \u0300\nstatus\n\nproperty, the tested value is the value of that property.\n\n\nSome examples of \ntolerance\n properties.\n\n\nA boolean tolerance:\n\n\"tolerance\"\n:\n \ntrue\n\n\n\n\nA integer tolerance:\n\n\"tolerance\"\n:\n \n8\n\n\n\n\nA string tolerance:\n\n\"tolerance\"\n:\n \n\"OK\"\n\n\n\n\nA sequence tolerance with lower and upper bounds:\n\n\"tolerance\"\n:\n \n[\n4\n,\n \n9\n]\n\n\n\n\nA sequence tolerance, the value must be contained in that sequence:\n\n\"tolerance\"\n:\n \n[\n4\n,\n \n9\n,\n \n78\n]\n\n\n\n\nA \nProbe\n tolerance:\n\n\"tolerance\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"should-exist\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"os.path\"\n,\n\n        \n\"func\"\n:\n \n\"exists\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"path\"\n:\n \n\"some/file\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\nA regex tolerance:\n\n\n\"tolerance\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"regex\"\n,\n\n    \n\"pattern\"\n:\n \n\"[0-9]{3}\"\n\n\n}\n\n\n\n\n\nA jsonpath tolerance:\n\n\n\"tolerance\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"jsonpath\"\n,\n\n    \n\"path\"\n:\n \n\"foo[*].baz\"\n\n\n}\n\n\n\n\n\nA jsonpath tolerance with an expected value to match:\n\n\n\"tolerance\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"jsonpath\"\n,\n\n    \n\"path\"\n:\n \n\"foo[*].baz\"\n,\n\n    \n\"expect\"\n:\n \n4\n\n\n}\n\n\n\n\n\nMethod\n\u00b6\n\n\nThe Method describes the sequence of \nProbe\n and \nAction\n elements\nto apply. The Method is declared under \nmethod\n property at the top-level of the\nexperiment.\n\n\nThe \nmethod\n MUST have at least one element but this can be either a \nProbe\n\nor an \nAction\n.\n\n\nThe elements MUST be applied in the order they are declared.\n\n\nProbe\n\u00b6\n\n\nA Probe collects information from the system during the experiment.\n\n\nA Probe is a JSON object. A Probe is declared fully or reference another Probe\nthrough the \nref\n property.\n\n\nWhen declared fully, a Probe MUST declare:\n\n\n\n\na \ntype\n property\n\n\na \nname\n property\n\n\na \nprovider\n property\n\n\n\n\nThe \ntype\n property MUST be the JSON string \n\"probe\"\n. \n\n\nThe \nname\n property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.\n\n\nIt MAY also declare:\n\n\n\n\na \nsecret\n property\n\n\na \nconfiguration\n property\n\n\na \nbackground\n property\n\n\n\n\nThe \nsecret\n property MUST be a JSON string referencing an identifier declared\nin the top-level \nsecrets\n \nproperty\n. It is assumed that when not\ndeclared, the Probe requires no secrets.\n\n\nThe \nconfiguration\n property MUST be a JSON string referencing an identifier\ndeclared in the top-level \nconfiguration\n \nproperty\n. It is assumed that\nwhen not declared, the Probe requires no configuration.\n\n\nThe \nbackground\n property MUST be a JSON boolean value either \ntrue\n or \nfalse\n.\nIt is assumed that, when that property is not declared, it is set to \nfalse\n.\nWhen that property is set to \ntrue\n it indicates the Probe MUST not block\nand the next Action or Probe should immediatly be applied.\n\n\nWhen a Probe references another Probe in the Experiment, the Probe MUST\ndeclare a single property called \nref\n.\n\n\nThe \nref\n property MUST be a JSON string which MUST be the name of a declared\nProbe.\n\n\nAction\n\u00b6\n\n\nAn Action performs an operation against the system.\n\n\nAn Action collects information from the system during the experiment.\n\n\nAn Action is a JSON object. An Action is declared fully or reference another\nAction through the \nref\n property.\n\n\nWhen declared fully, a Action MUST declare:\n\n\n\n\na \ntype\n property\n\n\na \nname\n property\n\n\na \nprovider\n property\n\n\n\n\nThe \ntype\n property MUST be the JSON string \n\"action\"\n. \n\n\nThe \nname\n property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.\n\n\nIt MAY also declare:\n\n\n\n\na \nsecret\n property\n\n\na \nconfiguration\n property\n\n\na \nbackground\n property\n\n\na \npauses\n property\n\n\n\n\nThe \nsecret\n property MUST be a JSON string referencing an identifier declared\nin the top-level \nsecrets\n \nproperty\n. It is assumed that when not\ndeclared, the Action requires no secrets.\n\n\nThe \nconfiguration\n property MUST be a JSON string referencing an identifier\ndeclared in the top-level \nconfiguration\n \nproperty\n. It is assumed that\nwhen not declared, the Action requires no configuration.\n\n\nThe \nbackground\n property MUST be a JSON boolean value either \ntrue\n or \nfalse\n.\nIt is assumed that, when that property is not declared, it is set to \nfalse\n.\nWhen that property is set to \ntrue\n it indicates the Action MUST not block\nand the next Action or Probe should immediatly be applied.\n\n\nThe \npauses\n property MUST be a JSON object which MAY have one or the two\nfollowing properties:\n\n\n\n\nbefore\n\n\nafter\n\n\n\n\nIn both cases, the value MUST be JSON number indicating the number of seconds to\nwait before continuining. The \nbefore\n pause MUST be performed before the Action\nwhile the \nafter\n MUST be performed afterwards.\n\n\nWhen a Action references another Action in the Experiment, the Action MUST\ndeclare a single property called \nref\n.\n\n\nThe \nref\n property MUST be a JSON string which MUST be the name of a declared\nAction.\n\n\nAction or Probe Provider\n\u00b6\n\n\nA provider MUST be a JSON object which MUST declare a \ntype\n property that\ndecides the other expected properties.\n\n\nThe \ntype\n property MUST be one of \n\"python\"\n, \n\"http\"\n or \n\"process\"\n.\n\n\nPython Provider\n\u00b6\n\n\nA Python Provider declares a Python function to be applied.\n\n\nA Python Provider MUST declare the following:\n\n\n\n\na \nmodule\n property\n\n\na \nfunc\n property\n\n\n\n\nIt SHOULD also declare an \narguments\n property when the function expects them.\n\n\nThe \nmodule\n property is the fully qualified module exposing the function. It\nMUST be a JSON string.\n\n\nThe \nfunc\n property is the name of the function to apply. It MUST be a JSON\nstring.\n\n\nWhen provided, the \narguments\n property MUST be a JSON object which\nproperties are the names of the \nfunction\u2019s arguments\n. When a function\u2019s\nsignature has \ndefault values\n for some of its arguments, those MAY be\nomitted from the \narguments\n object. In that case, those default values will be\nused.\n\n\nArgument values MUST be valid JSON entities.\n\n\nHTTP Provider\n\u00b6\n\n\nA HTTP Provider declares a URL to be called.\n\n\nA HTTP Provider MUST declare the following:\n\n\n\n\na \nurl\n property\n\n\n\n\nThe \nurl\n property MUST be a JSON string representing a URL as per\n\nRFC 3986\n.\n\n\nIn addition, the \nprovider\n object MAY declare any of the followings:\n\n\n\n\na \nmethod\n property\n\n\na \nheaders\n property\n\n\na \nexpected_status\n property\n\n\na \narguments\n property\n\n\na \ntimeout\n property\n\n\n\n\nThe \nmethod\n property MUST be a JSON string, such as \n\"POST\"\n, as per\n\nRFC 7231\n. It defaults to \n\"GET\"\n.\n\n\nThe \nheaders\n property MUST be a JSON object which properties are header names\nand values are header values, as per \nRFC 7231\n.\n\n\nWhen provided, the \narguments\n property MUST be a JSON object which\nproperties are parameters of the HTTP request.\n\n\nWhen \nmethod\n is \n\"GET\"\n, the \narguments\n are mapped as a query-string of the\nURL. Otherwise, the \narguments\n are passed as the request body\u2019s data and the\nencoding depends on the \n\"Content-Type\"\n provided in the \nheaders\n object.\n\n\nThe \ntimeout\n property MUST be either a JSON number specifying how long the\nrequest should take to complete. Or a JSON array that MUST made of two JSON\nnumbers, the first one indicating the connection timeout, the second the\nrequest timeout to respond.\n\n\nThe HTTP provider MUST return an object with the following properties:\n\n\n\n\nstatus\n which MUST be a valid HTTP returned code as defined in\n  \nRFC 7231\n\n\nheaders\n which MUST be an object\n\n\nbody\n which MUST be a string\n\n\n\n\nProcess Provider\n\u00b6\n\n\nA Process Provider declares a process to be called.\n\n\nA Process Provider MUST declare the following:\n\n\n\n\na \npath\n property\n\n\n\n\nThe \npath\n property MUST be a JSON string of a path to an executable.\n\n\nIn addition, the \nprovider\n object MAY declare any of the followings:\n\n\n\n\na \narguments\n property\n\n\na \ntimeout\n property\n\n\n\n\nThe \narguments\n property MUST be a JSON array which defines the process\narguments. Those arguments are passed in order to the process arguments.\n\n\nThe \ntimeout\n property MUST be a JSON number specifying how long the process\nshould take to complete.\n\n\nThe Process provider MUST return an object with the following properties:\n\n\n\n\nstatus\n which MUST be a scalar of the process return code\n\n\nstdout\n which MUST be bytes sequence encoded with the \nUTF-8\n encoding\n  representing the stdout payload of the process\n\n\nstderr\n which MUST be bytes sequence encoded with the \nUTF-8\n encoding\n  representing the stderr payload of the process\n\n\n\n\nRollbacks\n\u00b6\n\n\nRollbacks declare the sequence of actions that attempt to put the system back\nto its initial state.\n\n\nThe experiment MAY declare a single \nrollbacks\n property which is a JSON array\nconsisting of \nActions\n.\n\n\nA failed rollback MUST not bail the sequence of rollbacks.\n\n\nSecrets\n\u00b6\n\n\nSecrets declare values that need to be passed on to \nActions\n or\n\nProbes\n in a secure manner.\n\n\nThe \nsecrets\n property MUST be a JSON object. Its properties are identifiers\nreferenced by \nActions\n and \nProbes\n.\n\n\nThe value of each identifier is a JSON object which properties are the secrets\nkeys and the properties values are the secrets values.\n\n\nReferenced secrets MUST be injected into probes and actions when they are\napplied. Probes and actions MUST NOT modify the secrets.\n\n\nSecrets MUST be passed a mapping of keys and values to probes and actions.\n\n\nAn example of a \nsecrets\n element at the top-level:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"token\"\n:\n \n\"XYZ\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThis can then referenced from probes or actions:\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"secrets\"\n:\n \n\"kubernetes\"\n\n\n}\n\n\n\n\n\nInline Secrets\n\u00b6\n\n\nSecrets MAY be inlined in the \nExperiment\n directly.\n\n\nEnvironment Secrets\n\u00b6\n\n\nSecrets MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a \ntype\n property set to \n\"env\"\n. The\nenvironment variable MUST be declared in the \nkey\n property as a JSON string.\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"token\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"env\"\n,\n\n                \n\"key\"\n:\n \n\"KUBERNETES_TOKEN\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nVault Secrets\n\u00b6\n\n\nSecrets MAY be retrieved from a \nHashiCorp vault instance\n. In that case,\nthey must be declared as a JSON object with a \ntype\n property set to \n\"vault\"\n.\nThe path to the key MUST be declared in the \nkey\n property as a JSON\nstring.\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"myapp\"\n:\n \n{\n\n            \n\"token\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"vault\"\n,\n\n                \n\"key\"\n:\n \n\"secrets/something\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nConfiguration\n\u00b6\n\n\nConfiguration is meant to provide runtime values to \nactions\n and\n\nprobes\n.\n\n\nThe \nconfiguration\n element MUST be a JSON object. The value of each property\nMUST be a JSON string or object which properties are considered the\nconfiguration lookup. Configuration must be passed to all Probes and actions\nrequring it. Probes and actions MUST NOT modify the configuration.\n\n\nConfigurations MUST be passed a mapping of keys and values to probes and\nactions.\n\n\nAn example of a \nconfiguration\n element at the top-level:\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"some_service\"\n:\n \n\"http://127.0.0.1:8080\"\n,\n\n        \n\"vault_addr\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"env\"\n,\n\n            \n\"key\"\n:\n \n\"VAULT_ADDR\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nInline Configurations\n\u00b6\n\n\nConfigurations MAY be inlined in the \nExperiment\n directly.\n\n\nEnvironment Configurations\n\u00b6\n\n\nConfigurations MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a \ntype\n property set to \n\"env\"\n. The\nenvironment variable MUST be declared in the \nkey\n property as a JSON string.\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"vault_address\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"env\"\n,\n\n            \n\"key\"\n:\n \n\"VAULT_ADDR\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nVariable Substitution\n\u00b6\n\n\nProbes and Actions argument values MAY be dynamically resolved at runtime. \n\n\nDynamic values MUST follow the syntax \n${name}\n where \nname\n is an identifier\ndeclared in either the Configuration or Secrets sections. When \nname\n is\ndeclared in both sections, the Configuration section MUST take precedence.\n\n\nDynamic values MUST be substituted before being passed to Probes or Actions.\n\n\nOther values, such as the HTTP Probe url, MAY be sustituted as well.\n\n\nExamples\n\u00b6\n\n\nThe following examples MUST NOT be considered normatives.\n\n\nMinimal Experiment\n\u00b6\n\n\nHere is an example of the most minimal experiment:\n\n\n{\n\n    \n\"version\"\n:\n \n\"0.1.0\"\n,\n\n    \n\"title\"\n:\n \n\"Moving a file from under our feet is forgivable\"\n,\n\n    \n\"description\"\n:\n \n\"Our application should re-create a file that was removed\"\n,\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"The file must be around first\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"name\"\n:\n \n\"file-must-exist\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"module\"\n:\n \n\"os.path\"\n,\n\n                    \n\"func\"\n:\n \n\"exists\"\n,\n\n                    \n\"arguments\"\n:\n \n{\n\n                        \n\"path\"\n:\n \n\"some/file\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"file-be-gone\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"module\"\n:\n \n\"os.path\"\n,\n\n                \n\"func\"\n:\n \n\"remove\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"path\"\n:\n \n\"some/file\"\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n5\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"file-must-exist\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nFor reference, here is the YAML equivalent (which is not official but respects\nthe specification herein):\n\n\n---\n\n\nversion\n:\n \n0.1.0\n\n\ntitle\n:\n \nMoving a file from under our feet is forgivable\n\n\ndescription\n:\n \nOur application should re-create a file that was removed\n\n\nsteady-state-hypothesis\n:\n\n  \ntitle\n:\n \nThe file must be around first\n\n  \nprobes\n:\n\n  \n-\n \ntype\n:\n \npython\n\n    \nname\n:\n \nfile-must-exist\n\n    \ntolerance\n:\n \ntrue\n\n    \nprovider\n:\n\n      \nmodule\n:\n \nos.path\n\n      \nfunc\n:\n \nexists\n\n      \narguments\n:\n\n        \npath\n:\n \nsome/file\n\n\nmethod\n:\n\n\n-\n \ntype\n:\n \naction\n\n  \nname\n:\n \nfile-be-gone\n\n  \nprovider\n:\n\n    \nmodule\n:\n \nos.path\n\n    \nfunc\n:\n \nremove\n\n    \narguments\n:\n\n      \npath\n:\n \nsome/file\n\n  \npauses\n:\n\n    \nafter\n:\n \n5\n\n\n-\n \nref\n:\n \nfile-must-exist\n\n\n\n\n\nMore Complex Experiment\n\u00b6\n\n\nBelow is an example of a fully featured experiment that uses various extensions\nto perform actions, probing and steady-state hypothesis validation.\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"Are our users impacted by the loss of a function?\"\n,\n\n    \n\"description\"\n:\n \n\"While users query the Astre function, they should not be impacted if one instance goes down.\"\n,\n\n    \n\"tags\"\n:\n \n[\n\n        \n\"kubernetes\"\n,\n\n        \n\"openfaas\"\n,\n\n        \n\"cloudnative\"\n\n    \n],\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"prometheus_base_url\"\n:\n \n\"http://demo.foo.bar\"\n\n    \n},\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"global\"\n:\n \n{\n\n            \n\"auth\"\n:\n \n\"Basic XYZ\"\n\n        \n}\n\n    \n},\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"Function is available\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"function-must-exist\"\n,\n\n                \n\"tolerance\"\n:\n \n200\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"http\"\n,\n\n                    \n\"secrets\"\n:\n \n[\n\"faas\"\n],\n\n                    \n\"url\"\n:\n \n\"http://demo.foo.bar/system/function/astre\"\n,\n\n                    \n\"headers\"\n:\n \n{\n\n                        \n\"Authorization\"\n:\n \n\"${auth}\"\n\n                    \n}\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"function-must-respond\"\n,\n\n                \n\"tolerance\"\n:\n \n200\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"http\"\n,\n\n                    \n\"timeout\"\n:\n \n[\n3\n,\n \n5\n],\n\n                    \n\"secrets\"\n:\n \n[\n\"global\"\n],\n\n                    \n\"url\"\n:\n \n\"http://demo.foo.bar/function/astre\"\n,\n\n                    \n\"method\"\n:\n \n\"POST\"\n,\n\n                    \n\"headers\"\n:\n \n{\n\n                        \n\"Content-Type\"\n:\n \n\"application/json\"\n,\n\n                        \n\"Authorization\"\n:\n \n\"${auth}\"\n\n                    \n},\n\n                    \n\"arguments\"\n:\n \n{\n\n                        \n\"city\"\n:\n \n\"Paris\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"simulate-user-traffic\"\n,\n\n            \n\"background\"\n:\n \ntrue\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"process\"\n,\n\n                \n\"path\"\n:\n \n\"vegeta\"\n,\n\n                \n\"arguments\"\n:\n \n\"-cpus 2 attack -targets=data/scenario.txt -workers=2 -connections=1 -rate=3 -timeout=3s -duration=30s -output=result.bin\"\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"terminate-one-function\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosk8s.pod.actions\"\n,\n\n                \n\"func\"\n:\n \n\"terminate_pods\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"ns\"\n:\n \n\"openfaas-fn\"\n,\n\n                    \n\"label_selector\"\n:\n \n\"faas_function=astre\"\n,\n\n                    \n\"rand\"\n:\n \ntrue\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"before\"\n:\n \n5\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"fetch-openfaas-gateway-logs\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosk8s.pod.probes\"\n,\n\n                \n\"func\"\n:\n \n\"read_pod_logs\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"label_selector\"\n:\n \n\"app=gateway\"\n,\n\n                    \n\"last\"\n:\n \n\"35s\"\n,\n\n                    \n\"ns\"\n:\n \n\"openfaas\"\n\n                \n}\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"query-total-function-invocation\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosprometheus.probes\"\n,\n\n                \n\"func\"\n:\n \n\"query_interval\"\n,\n\n                \n\"secrets\"\n:\n \n[\n\"global\"\n],\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"query\"\n:\n \n\"gateway_function_invocation_total{function_name='astre'}\"\n,\n\n                    \n\"start\"\n:\n \n\"1 minute ago\"\n,\n\n                    \n\"end\"\n:\n \n\"now\"\n,\n\n                    \n\"step\"\n:\n \n1\n\n                \n}\n\n            \n}\n\n        \n}\n\n    \n],\n\n    \n\"rollbacks\"\n:\n \n[]\n\n\n}\n\n\n\n\n\nThe equivalent YAML serialization:\n\n\n---\n\n\nversion\n:\n \n1.0.0\n\n\ntitle\n:\n \nAre our users impacted by the loss of a function?\n\n\ndescription\n:\n \nWhile users query the Astre function, they should not be impacted if\n\n  \none instance goes down.\n\n\ntags\n:\n\n\n-\n \nkubernetes\n\n\n-\n \nopenfaas\n\n\n-\n \ncloudnative\n\n\nconfiguration\n:\n\n  \nprometheus_base_url\n:\n \nhttp://demo.foo.bar\n\n\nsecrets\n:\n\n  \nglobal\n:\n\n    \nauth\n:\n \nBasic XYZ\n\n\nsteady-state-hypothesis\n:\n\n  \ntitle\n:\n \nFunction is available\n\n  \nprobes\n:\n\n  \n-\n \ntype\n:\n \nprobe\n\n    \nname\n:\n \nfunction-must-exist\n\n    \ntolerance\n:\n \n200\n\n    \nprovider\n:\n\n      \ntype\n:\n \nhttp\n\n      \nsecrets\n:\n\n      \n-\n \nfaas\n\n      \nurl\n:\n \nhttp://demo.foo.bar/system/function/astre\n\n      \nheaders\n:\n\n        \nAuthorization\n:\n \n\"${auth}\"\n\n  \n-\n \ntype\n:\n \nprobe\n\n    \nname\n:\n \nfunction-must-respond\n\n    \ntolerance\n:\n \n200\n\n    \nprovider\n:\n\n      \ntype\n:\n \nhttp\n\n      \ntimeout\n:\n\n      \n-\n \n3\n\n      \n-\n \n5\n\n      \nsecrets\n:\n\n      \n-\n \nglobal\n\n      \nurl\n:\n \nhttp://demo.foo.bar/function/astre\n\n      \nmethod\n:\n \nPOST\n\n      \nheaders\n:\n\n        \nContent-Type\n:\n \napplication/json\n\n        \nAuthorization\n:\n \n\"${auth}\"\n\n      \narguments\n:\n\n        \ncity\n:\n \nParis\n\n\nmethod\n:\n\n\n-\n \ntype\n:\n \naction\n\n  \nname\n:\n \nsimulate-user-traffic\n\n  \nbackground\n:\n \ntrue\n\n  \nprovider\n:\n\n    \ntype\n:\n \nprocess\n\n    \npath\n:\n \nvegeta\n\n    \narguments\n:\n \n\"-cpus\n \n2\n \nattack\n \n-targets=data/scenario.txt\n \n-workers=2\n \n-connections=1\n\n      \n-rate=3\n \n-timeout=3s\n \n-duration=30s\n \n-output=result.bin\"\n\n\n-\n \ntype\n:\n \naction\n\n  \nname\n:\n \nterminate-one-function\n\n  \nprovider\n:\n\n    \ntype\n:\n \npython\n\n    \nmodule\n:\n \nchaosk8s.pod.actions\n\n    \nfunc\n:\n \nterminate_pods\n\n    \narguments\n:\n\n      \nns\n:\n \nopenfaas-fn\n\n      \nlabel_selector\n:\n \nfaas_function=astre\n\n      \nrand\n:\n \ntrue\n\n  \npauses\n:\n\n    \nbefore\n:\n \n5\n\n\n-\n \ntype\n:\n \nprobe\n\n  \nname\n:\n \nfetch-openfaas-gateway-logs\n\n  \nprovider\n:\n\n    \ntype\n:\n \npython\n\n    \nmodule\n:\n \nchaosk8s.pod.probes\n\n    \nfunc\n:\n \nread_pod_logs\n\n    \narguments\n:\n\n      \nlabel_selector\n:\n \napp=gateway\n\n      \nlast\n:\n \n35s\n\n      \nns\n:\n \nopenfaas\n\n\n-\n \ntype\n:\n \nprobe\n\n  \nname\n:\n \nquery-total-function-invocation\n\n  \nprovider\n:\n\n    \ntype\n:\n \npython\n\n    \nmodule\n:\n \nchaosprometheus.probes\n\n    \nfunc\n:\n \nquery_interval\n\n    \nsecrets\n:\n\n    \n-\n \nglobal\n\n    \narguments\n:\n\n      \nquery\n:\n \ngateway_function_invocation_total{function_name='astre'}\n\n      \nstart\n:\n \n1 minute ago\n\n      \nend\n:\n \nnow\n\n      \nstep\n:\n \n1\n\n\nrollbacks\n:\n \n[]",
            "title": "Experiment"
        },
        {
            "location": "/reference/api/experiment/#an-open-api-for-chaos-engineering-experiments",
            "text": "Info  The current specification has not reached its 1.0.0 stable version yet. Make\nsure to  join the discussion  to provide any feedback you might have.",
            "title": "An Open API for Chaos Engineering Experiments"
        },
        {
            "location": "/reference/api/experiment/#introduction",
            "text": "The purpose of this specification is to formalize the elements of a Chaos\nEngineering experiment and offer a way to federate the community around a\ncommon syntax and semantic.  As a fairly recent field, Chaos Engineering is a dynamic and its foundations\nare still emerging. However, it appears certain concepts are settling down\nenough to start agreeing on a shared understanding.  This specification is not prescriptive and does not aim at forcing the\ncommunity into one direction, rather it strives at providing a common\nvocabulary that new practicionners can easily make sense of.  It is necessary to appreciate that this document does not specify what tools,\nsuch as the Chaos Monkey or similar, should look like. Instead, this document\nspecifies how Chaos Engineering Experiment could be described, shared and\nconducted collaboratively.",
            "title": "Introduction"
        },
        {
            "location": "/reference/api/experiment/#conventions-used-in-this-document",
            "text": "The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in  RFC 2119 .  The terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in  RFC 7159 .",
            "title": "Conventions Used in This Document"
        },
        {
            "location": "/reference/api/experiment/#other-formats",
            "text": "While this specification uses JSON to define its elements, implementations may\nallow loading from other formats, such as  YAML . As long as the output\nof such format respects the specification herein.",
            "title": "Other formats"
        },
        {
            "location": "/reference/api/experiment/#chaos-engineering-elements",
            "text": "",
            "title": "Chaos Engineering Elements"
        },
        {
            "location": "/reference/api/experiment/#overview",
            "text": "An Experiment is one possible description of the principles of the Chaos Engineering . The intention of such a\ndescription is to provide shared understanding around a hypothesis on how\nto discover system\u2019s behavior under certain conditions.  An  Experiment  declares a steady  state hypothesis , alongside probes  to validate this steady state is met, and a  method  as a\nsequence  actions  and  probes , to interact and query the system\nrespectively.  By using a variety of  probes , experiments should gather information to\nsense behaviors in the system, potentially leading to systemic patterns that can\nbe stabilized.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/experiment/#experiment",
            "text": "A Chaos Engineering experiment, or simply an experiment, describes both the\nelements and the order in which they should be applied.  An experiment is a JSON object.  An experiment MUST declare:   a  version  property  a  title  property  a  description  property  a  steady-state-hypothesis  property  a  method  property   The  version  property MUST be  \"0.1.0\" .  The experiment\u2019s  title  and  description  are meant for humans and therefore\nshould be as descriptive as possible to clarify the experiment\u2019s rationale.  Title and description are JSON strings with no maximum length.  An experiment SHOULD also declare:   a  rollbacks  property   An experiment MAY finally declare:   a  tags  property  a  secrets  property   Tags provide a way of categorizing experiments. It is a sequence of JSON\nstrings.",
            "title": "Experiment"
        },
        {
            "location": "/reference/api/experiment/#steady-state-hypothesis",
            "text": "The Steady State Hypothesis element describes what normal looks like in your\nsystem before the Method element is applied. If the steady state is not met,\nthe Method element is not applied and the experiment MUST bail out.  The Steady State Hypothesis element is a JSON object.  Steady State Hypothesis element MUST declare:   a  title  property  a  probes  property   The  title  is meant for humans and therefore should clarify the rationale for\nthis hypothesis.  Each  Probe  MUST define a  tolerance  property that acting as a gate\nmechanism for the experiment to carry on or bail. Any  Probe  that does not\nfall into the  tolerance  zone MUST fail the experiment.",
            "title": "Steady State Hypothesis"
        },
        {
            "location": "/reference/api/experiment/#steady-state-probe-tolerance",
            "text": "Probes  of the Steady State Hypothesis MUST declare an additional property\nnamed  tolerance .  The  tolerance  property\u2019s value MUST be one of:   a scalar: JSON string, number (an integer), boolean  a sequence of scalars: JSON string, number, boolean  an object   In the case of a scalar or the sequence, the tolerance validation MUST be\nstrict. The value returned by the  Probe  MUST be checked against the\nscalar value. The experiment MUST bail when both fail to match.  When the  tolerance  is a sequence. If it has only two values, those two values\nrepresent a lower and upper bound within which the  Probe  returned value\nmust fall (inclusive).  When the sequence has more than two elements, the  Probe  returned value\nmust be contained in that sequence.  When the  tolerance  is an object, it MUST have a  type  property which MUST\nbe one of the followings:  \"probe\" ,  \"regex\"  or  \"jsonpath\" .  When the  type  property is  \"probe\" , the object MUST be a  Probe  that is\napplied. The probe should take two arguments,  value  and  secrets  where\nthe value is the  Probe  returned value and secrets a  Secret \nobject or  null . Its returned status MUST be successful for the  tolerance  to\nbe considered valid.  When the  type  property is  \"regex\" , the object MUST have a  pattern \nproperty which MUST be a valid regular expression. The  tolerance  succeeds if\nthe  Probe  returned value is matched against the pattern.  When the  type  property is  \"jsonpath\" , the object MUST have a  path \nproperty which MUST be a valid  JSON Path . In addition, the object MAY\nhave a  expect  property which is used to compare each value matched by the JSON\nPath to that value. The  expect  property value MUST be a scalar. When the expect  property is not present, the  tolerance  succeeds if the JSON Path\nmatched at least one item.  In addition, when the  Probe  returned value is an object with a \u0300 status \nproperty, the tested value is the value of that property.  Some examples of  tolerance  properties.  A boolean tolerance: \"tolerance\" :   true   A integer tolerance: \"tolerance\" :   8   A string tolerance: \"tolerance\" :   \"OK\"   A sequence tolerance with lower and upper bounds: \"tolerance\" :   [ 4 ,   9 ]   A sequence tolerance, the value must be contained in that sequence: \"tolerance\" :   [ 4 ,   9 ,   78 ]   A  Probe  tolerance: \"tolerance\" :   { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"should-exist\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"os.path\" , \n         \"func\" :   \"exists\" , \n         \"arguments\" :   { \n             \"path\" :   \"some/file\" \n         } \n     }  }   A regex tolerance:  \"tolerance\" :   { \n     \"type\" :   \"regex\" , \n     \"pattern\" :   \"[0-9]{3}\"  }   A jsonpath tolerance:  \"tolerance\" :   { \n     \"type\" :   \"jsonpath\" , \n     \"path\" :   \"foo[*].baz\"  }   A jsonpath tolerance with an expected value to match:  \"tolerance\" :   { \n     \"type\" :   \"jsonpath\" , \n     \"path\" :   \"foo[*].baz\" , \n     \"expect\" :   4  }",
            "title": "Steady State Probe Tolerance"
        },
        {
            "location": "/reference/api/experiment/#method",
            "text": "The Method describes the sequence of  Probe  and  Action  elements\nto apply. The Method is declared under  method  property at the top-level of the\nexperiment.  The  method  MUST have at least one element but this can be either a  Probe \nor an  Action .  The elements MUST be applied in the order they are declared.",
            "title": "Method"
        },
        {
            "location": "/reference/api/experiment/#probe",
            "text": "A Probe collects information from the system during the experiment.  A Probe is a JSON object. A Probe is declared fully or reference another Probe\nthrough the  ref  property.  When declared fully, a Probe MUST declare:   a  type  property  a  name  property  a  provider  property   The  type  property MUST be the JSON string  \"probe\" .   The  name  property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.  It MAY also declare:   a  secret  property  a  configuration  property  a  background  property   The  secret  property MUST be a JSON string referencing an identifier declared\nin the top-level  secrets   property . It is assumed that when not\ndeclared, the Probe requires no secrets.  The  configuration  property MUST be a JSON string referencing an identifier\ndeclared in the top-level  configuration   property . It is assumed that\nwhen not declared, the Probe requires no configuration.  The  background  property MUST be a JSON boolean value either  true  or  false .\nIt is assumed that, when that property is not declared, it is set to  false .\nWhen that property is set to  true  it indicates the Probe MUST not block\nand the next Action or Probe should immediatly be applied.  When a Probe references another Probe in the Experiment, the Probe MUST\ndeclare a single property called  ref .  The  ref  property MUST be a JSON string which MUST be the name of a declared\nProbe.",
            "title": "Probe"
        },
        {
            "location": "/reference/api/experiment/#action",
            "text": "An Action performs an operation against the system.  An Action collects information from the system during the experiment.  An Action is a JSON object. An Action is declared fully or reference another\nAction through the  ref  property.  When declared fully, a Action MUST declare:   a  type  property  a  name  property  a  provider  property   The  type  property MUST be the JSON string  \"action\" .   The  name  property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.  It MAY also declare:   a  secret  property  a  configuration  property  a  background  property  a  pauses  property   The  secret  property MUST be a JSON string referencing an identifier declared\nin the top-level  secrets   property . It is assumed that when not\ndeclared, the Action requires no secrets.  The  configuration  property MUST be a JSON string referencing an identifier\ndeclared in the top-level  configuration   property . It is assumed that\nwhen not declared, the Action requires no configuration.  The  background  property MUST be a JSON boolean value either  true  or  false .\nIt is assumed that, when that property is not declared, it is set to  false .\nWhen that property is set to  true  it indicates the Action MUST not block\nand the next Action or Probe should immediatly be applied.  The  pauses  property MUST be a JSON object which MAY have one or the two\nfollowing properties:   before  after   In both cases, the value MUST be JSON number indicating the number of seconds to\nwait before continuining. The  before  pause MUST be performed before the Action\nwhile the  after  MUST be performed afterwards.  When a Action references another Action in the Experiment, the Action MUST\ndeclare a single property called  ref .  The  ref  property MUST be a JSON string which MUST be the name of a declared\nAction.",
            "title": "Action"
        },
        {
            "location": "/reference/api/experiment/#action-or-probe-provider",
            "text": "A provider MUST be a JSON object which MUST declare a  type  property that\ndecides the other expected properties.  The  type  property MUST be one of  \"python\" ,  \"http\"  or  \"process\" .",
            "title": "Action or Probe Provider"
        },
        {
            "location": "/reference/api/experiment/#python-provider",
            "text": "A Python Provider declares a Python function to be applied.  A Python Provider MUST declare the following:   a  module  property  a  func  property   It SHOULD also declare an  arguments  property when the function expects them.  The  module  property is the fully qualified module exposing the function. It\nMUST be a JSON string.  The  func  property is the name of the function to apply. It MUST be a JSON\nstring.  When provided, the  arguments  property MUST be a JSON object which\nproperties are the names of the  function\u2019s arguments . When a function\u2019s\nsignature has  default values  for some of its arguments, those MAY be\nomitted from the  arguments  object. In that case, those default values will be\nused.  Argument values MUST be valid JSON entities.",
            "title": "Python Provider"
        },
        {
            "location": "/reference/api/experiment/#http-provider",
            "text": "A HTTP Provider declares a URL to be called.  A HTTP Provider MUST declare the following:   a  url  property   The  url  property MUST be a JSON string representing a URL as per RFC 3986 .  In addition, the  provider  object MAY declare any of the followings:   a  method  property  a  headers  property  a  expected_status  property  a  arguments  property  a  timeout  property   The  method  property MUST be a JSON string, such as  \"POST\" , as per RFC 7231 . It defaults to  \"GET\" .  The  headers  property MUST be a JSON object which properties are header names\nand values are header values, as per  RFC 7231 .  When provided, the  arguments  property MUST be a JSON object which\nproperties are parameters of the HTTP request.  When  method  is  \"GET\" , the  arguments  are mapped as a query-string of the\nURL. Otherwise, the  arguments  are passed as the request body\u2019s data and the\nencoding depends on the  \"Content-Type\"  provided in the  headers  object.  The  timeout  property MUST be either a JSON number specifying how long the\nrequest should take to complete. Or a JSON array that MUST made of two JSON\nnumbers, the first one indicating the connection timeout, the second the\nrequest timeout to respond.  The HTTP provider MUST return an object with the following properties:   status  which MUST be a valid HTTP returned code as defined in\n   RFC 7231  headers  which MUST be an object  body  which MUST be a string",
            "title": "HTTP Provider"
        },
        {
            "location": "/reference/api/experiment/#process-provider",
            "text": "A Process Provider declares a process to be called.  A Process Provider MUST declare the following:   a  path  property   The  path  property MUST be a JSON string of a path to an executable.  In addition, the  provider  object MAY declare any of the followings:   a  arguments  property  a  timeout  property   The  arguments  property MUST be a JSON array which defines the process\narguments. Those arguments are passed in order to the process arguments.  The  timeout  property MUST be a JSON number specifying how long the process\nshould take to complete.  The Process provider MUST return an object with the following properties:   status  which MUST be a scalar of the process return code  stdout  which MUST be bytes sequence encoded with the  UTF-8  encoding\n  representing the stdout payload of the process  stderr  which MUST be bytes sequence encoded with the  UTF-8  encoding\n  representing the stderr payload of the process",
            "title": "Process Provider"
        },
        {
            "location": "/reference/api/experiment/#rollbacks",
            "text": "Rollbacks declare the sequence of actions that attempt to put the system back\nto its initial state.  The experiment MAY declare a single  rollbacks  property which is a JSON array\nconsisting of  Actions .  A failed rollback MUST not bail the sequence of rollbacks.",
            "title": "Rollbacks"
        },
        {
            "location": "/reference/api/experiment/#secrets",
            "text": "Secrets declare values that need to be passed on to  Actions  or Probes  in a secure manner.  The  secrets  property MUST be a JSON object. Its properties are identifiers\nreferenced by  Actions  and  Probes .  The value of each identifier is a JSON object which properties are the secrets\nkeys and the properties values are the secrets values.  Referenced secrets MUST be injected into probes and actions when they are\napplied. Probes and actions MUST NOT modify the secrets.  Secrets MUST be passed a mapping of keys and values to probes and actions.  An example of a  secrets  element at the top-level:  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"token\" :   \"XYZ\" \n         } \n     }  }   This can then referenced from probes or actions:  { \n     \"type\" :   \"probe\" , \n     \"secrets\" :   \"kubernetes\"  }",
            "title": "Secrets"
        },
        {
            "location": "/reference/api/experiment/#inline-secrets",
            "text": "Secrets MAY be inlined in the  Experiment  directly.",
            "title": "Inline Secrets"
        },
        {
            "location": "/reference/api/experiment/#environment-secrets",
            "text": "Secrets MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a  type  property set to  \"env\" . The\nenvironment variable MUST be declared in the  key  property as a JSON string.  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"token\" :   { \n                 \"type\" :   \"env\" , \n                 \"key\" :   \"KUBERNETES_TOKEN\" \n             } \n         } \n     }  }",
            "title": "Environment Secrets"
        },
        {
            "location": "/reference/api/experiment/#vault-secrets",
            "text": "Secrets MAY be retrieved from a  HashiCorp vault instance . In that case,\nthey must be declared as a JSON object with a  type  property set to  \"vault\" .\nThe path to the key MUST be declared in the  key  property as a JSON\nstring.  { \n     \"secrets\" :   { \n         \"myapp\" :   { \n             \"token\" :   { \n                 \"type\" :   \"vault\" , \n                 \"key\" :   \"secrets/something\" \n             } \n         } \n     }  }",
            "title": "Vault Secrets"
        },
        {
            "location": "/reference/api/experiment/#configuration",
            "text": "Configuration is meant to provide runtime values to  actions  and probes .  The  configuration  element MUST be a JSON object. The value of each property\nMUST be a JSON string or object which properties are considered the\nconfiguration lookup. Configuration must be passed to all Probes and actions\nrequring it. Probes and actions MUST NOT modify the configuration.  Configurations MUST be passed a mapping of keys and values to probes and\nactions.  An example of a  configuration  element at the top-level:  { \n     \"configuration\" :   { \n         \"some_service\" :   \"http://127.0.0.1:8080\" , \n         \"vault_addr\" :   { \n             \"type\" :   \"env\" , \n             \"key\" :   \"VAULT_ADDR\" \n         } \n     }  }",
            "title": "Configuration"
        },
        {
            "location": "/reference/api/experiment/#inline-configurations",
            "text": "Configurations MAY be inlined in the  Experiment  directly.",
            "title": "Inline Configurations"
        },
        {
            "location": "/reference/api/experiment/#environment-configurations",
            "text": "Configurations MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a  type  property set to  \"env\" . The\nenvironment variable MUST be declared in the  key  property as a JSON string.  { \n     \"configuration\" :   { \n         \"vault_address\" :   { \n             \"type\" :   \"env\" , \n             \"key\" :   \"VAULT_ADDR\" \n         } \n     }  }",
            "title": "Environment Configurations"
        },
        {
            "location": "/reference/api/experiment/#variable-substitution",
            "text": "Probes and Actions argument values MAY be dynamically resolved at runtime.   Dynamic values MUST follow the syntax  ${name}  where  name  is an identifier\ndeclared in either the Configuration or Secrets sections. When  name  is\ndeclared in both sections, the Configuration section MUST take precedence.  Dynamic values MUST be substituted before being passed to Probes or Actions.  Other values, such as the HTTP Probe url, MAY be sustituted as well.",
            "title": "Variable Substitution"
        },
        {
            "location": "/reference/api/experiment/#examples",
            "text": "The following examples MUST NOT be considered normatives.",
            "title": "Examples"
        },
        {
            "location": "/reference/api/experiment/#minimal-experiment",
            "text": "Here is an example of the most minimal experiment:  { \n     \"version\" :   \"0.1.0\" , \n     \"title\" :   \"Moving a file from under our feet is forgivable\" , \n     \"description\" :   \"Our application should re-create a file that was removed\" , \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"The file must be around first\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"python\" , \n                 \"name\" :   \"file-must-exist\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"module\" :   \"os.path\" , \n                     \"func\" :   \"exists\" , \n                     \"arguments\" :   { \n                         \"path\" :   \"some/file\" \n                     } \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"file-be-gone\" , \n             \"provider\" :   { \n                 \"module\" :   \"os.path\" , \n                 \"func\" :   \"remove\" , \n                 \"arguments\" :   { \n                     \"path\" :   \"some/file\" \n                 } \n             }, \n             \"pauses\" :   { \n                 \"after\" :   5 \n             } \n         }, \n         { \n             \"ref\" :   \"file-must-exist\" \n         } \n     ]  }   For reference, here is the YAML equivalent (which is not official but respects\nthe specification herein):  ---  version :   0.1.0  title :   Moving a file from under our feet is forgivable  description :   Our application should re-create a file that was removed  steady-state-hypothesis : \n   title :   The file must be around first \n   probes : \n   -   type :   python \n     name :   file-must-exist \n     tolerance :   true \n     provider : \n       module :   os.path \n       func :   exists \n       arguments : \n         path :   some/file  method :  -   type :   action \n   name :   file-be-gone \n   provider : \n     module :   os.path \n     func :   remove \n     arguments : \n       path :   some/file \n   pauses : \n     after :   5  -   ref :   file-must-exist",
            "title": "Minimal Experiment"
        },
        {
            "location": "/reference/api/experiment/#more-complex-experiment",
            "text": "Below is an example of a fully featured experiment that uses various extensions\nto perform actions, probing and steady-state hypothesis validation.  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"Are our users impacted by the loss of a function?\" , \n     \"description\" :   \"While users query the Astre function, they should not be impacted if one instance goes down.\" , \n     \"tags\" :   [ \n         \"kubernetes\" , \n         \"openfaas\" , \n         \"cloudnative\" \n     ], \n     \"configuration\" :   { \n         \"prometheus_base_url\" :   \"http://demo.foo.bar\" \n     }, \n     \"secrets\" :   { \n         \"global\" :   { \n             \"auth\" :   \"Basic XYZ\" \n         } \n     }, \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"Function is available\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"function-must-exist\" , \n                 \"tolerance\" :   200 , \n                 \"provider\" :   { \n                     \"type\" :   \"http\" , \n                     \"secrets\" :   [ \"faas\" ], \n                     \"url\" :   \"http://demo.foo.bar/system/function/astre\" , \n                     \"headers\" :   { \n                         \"Authorization\" :   \"${auth}\" \n                     } \n                 } \n             }, \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"function-must-respond\" , \n                 \"tolerance\" :   200 , \n                 \"provider\" :   { \n                     \"type\" :   \"http\" , \n                     \"timeout\" :   [ 3 ,   5 ], \n                     \"secrets\" :   [ \"global\" ], \n                     \"url\" :   \"http://demo.foo.bar/function/astre\" , \n                     \"method\" :   \"POST\" , \n                     \"headers\" :   { \n                         \"Content-Type\" :   \"application/json\" , \n                         \"Authorization\" :   \"${auth}\" \n                     }, \n                     \"arguments\" :   { \n                         \"city\" :   \"Paris\" \n                     } \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"simulate-user-traffic\" , \n             \"background\" :   true , \n             \"provider\" :   { \n                 \"type\" :   \"process\" , \n                 \"path\" :   \"vegeta\" , \n                 \"arguments\" :   \"-cpus 2 attack -targets=data/scenario.txt -workers=2 -connections=1 -rate=3 -timeout=3s -duration=30s -output=result.bin\" \n             } \n         }, \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"terminate-one-function\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosk8s.pod.actions\" , \n                 \"func\" :   \"terminate_pods\" , \n                 \"arguments\" :   { \n                     \"ns\" :   \"openfaas-fn\" , \n                     \"label_selector\" :   \"faas_function=astre\" , \n                     \"rand\" :   true \n                 } \n             }, \n             \"pauses\" :   { \n                 \"before\" :   5 \n             } \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"fetch-openfaas-gateway-logs\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosk8s.pod.probes\" , \n                 \"func\" :   \"read_pod_logs\" , \n                 \"arguments\" :   { \n                     \"label_selector\" :   \"app=gateway\" , \n                     \"last\" :   \"35s\" , \n                     \"ns\" :   \"openfaas\" \n                 } \n             } \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"query-total-function-invocation\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosprometheus.probes\" , \n                 \"func\" :   \"query_interval\" , \n                 \"secrets\" :   [ \"global\" ], \n                 \"arguments\" :   { \n                     \"query\" :   \"gateway_function_invocation_total{function_name='astre'}\" , \n                     \"start\" :   \"1 minute ago\" , \n                     \"end\" :   \"now\" , \n                     \"step\" :   1 \n                 } \n             } \n         } \n     ], \n     \"rollbacks\" :   []  }   The equivalent YAML serialization:  ---  version :   1.0.0  title :   Are our users impacted by the loss of a function?  description :   While users query the Astre function, they should not be impacted if \n   one instance goes down.  tags :  -   kubernetes  -   openfaas  -   cloudnative  configuration : \n   prometheus_base_url :   http://demo.foo.bar  secrets : \n   global : \n     auth :   Basic XYZ  steady-state-hypothesis : \n   title :   Function is available \n   probes : \n   -   type :   probe \n     name :   function-must-exist \n     tolerance :   200 \n     provider : \n       type :   http \n       secrets : \n       -   faas \n       url :   http://demo.foo.bar/system/function/astre \n       headers : \n         Authorization :   \"${auth}\" \n   -   type :   probe \n     name :   function-must-respond \n     tolerance :   200 \n     provider : \n       type :   http \n       timeout : \n       -   3 \n       -   5 \n       secrets : \n       -   global \n       url :   http://demo.foo.bar/function/astre \n       method :   POST \n       headers : \n         Content-Type :   application/json \n         Authorization :   \"${auth}\" \n       arguments : \n         city :   Paris  method :  -   type :   action \n   name :   simulate-user-traffic \n   background :   true \n   provider : \n     type :   process \n     path :   vegeta \n     arguments :   \"-cpus   2   attack   -targets=data/scenario.txt   -workers=2   -connections=1 \n       -rate=3   -timeout=3s   -duration=30s   -output=result.bin\"  -   type :   action \n   name :   terminate-one-function \n   provider : \n     type :   python \n     module :   chaosk8s.pod.actions \n     func :   terminate_pods \n     arguments : \n       ns :   openfaas-fn \n       label_selector :   faas_function=astre \n       rand :   true \n   pauses : \n     before :   5  -   type :   probe \n   name :   fetch-openfaas-gateway-logs \n   provider : \n     type :   python \n     module :   chaosk8s.pod.probes \n     func :   read_pod_logs \n     arguments : \n       label_selector :   app=gateway \n       last :   35s \n       ns :   openfaas  -   type :   probe \n   name :   query-total-function-invocation \n   provider : \n     type :   python \n     module :   chaosprometheus.probes \n     func :   query_interval \n     secrets : \n     -   global \n     arguments : \n       query :   gateway_function_invocation_total{function_name='astre'} \n       start :   1 minute ago \n       end :   now \n       step :   1  rollbacks :   []",
            "title": "More Complex Experiment"
        },
        {
            "location": "/reference/api/journal/",
            "text": "Experiment Journal\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis document describes the syntax and grammar of a Chaos Engineering\nexperiment\u2019s output, called a journal. One should be able to walkthrough the\nexperiment\u2019s run through its journal alone.\n\n\nThis specification makes sense in regards to the\n\nExperiment specification\n itself. It is indeed a mirror to that\ndocument.\n\n\nConventions Used in This Document\n\u00b6\n\n\nThe key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in \nRFC 2119\n.\n\n\nThe terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in \nRFC 7159\n.\n\n\nOther formats\n\u00b6\n\n\nWhile this specification uses JSON to define its elements, implementations may\nallow loading from other formats, such as \nYAML\n. As long as the output\nof such format respects the specification herein.\n\n\nJournal Elements\n\u00b6\n\n\nOverview\n\u00b6\n\n\nA Journal is one potential output of a\n\nChaos Engineering experiment\n. The objective of such journal is\nto collect all events that took place during the experiment\u2019s run.\n\n\nThe journal contains static information, such as the experiment that was run,\nas well as runtime entries.\n\n\nFormat\n\u00b6\n\n\nA journal is a JSON object.\n\n\nRequired Properties\n\u00b6\n\n\nA journal MUST declare:\n\n\n\n\na \nexperiment\n property\n\n\na \nstatus\n property\n\n\na \nstart\n property\n\n\na \nend\n property\n\n\na \nduration\n property\n\n\n\n\nThe \nexperiment\n property MUST be a copy of the run experiment as-is and is\ntherefore a JSON object. It MUST follow the \nExperiment\n\ndefinition.\n\n\nThe \u0300\nstatus\n property MUST be a JSON string, one of:\n\n\n\n\n\"completed\"\n: when the experiment runs fully. It does not indicate the\n  activities in the experiment suceeded, only that they were executed as\n  expected\n\n\n\"failed\"\n: when one of the activity reports a failed condition\n\n\n\"aborted\"\n: when the experiment breaks for unforeseen reason\n\n\n\"interrupted\"\n: when the experiment is interrupted (for instance after a\n  signal is received)\n\n\n\n\n\n\nNote\n\n\nIt is important to understand the \n\"completed\"\n status expresses that\neverything ran all the way. An action may not have resulted in what the\noperator wanted but it did not fail. Always review the entire journal to\nfully appreciate the actual outcome of the experiment.\n\n\nThere are two reasons it could be marked as \n\"failed\"\n. Either a tolerance\nfailed or if an extension made a check for a condition. So, for\ninstance, let\u2019s say the extension made a HTTP call to your service, that\ncall returned a 400 rather than 200. If the extension was not designed to\ncare for this difference, then the status will be marked as \n\"completed\"\n.\nHowever, if the extension validated the HTTP response, it may have decided\nto fail the action which would lead to a \u0300 \u201cfailed\u201d` status.\n\n\nThe \n\"aborted\"\n and \n\"interrupted\"\n are different, the former means of a\ncrash somehow (say, because of a bug). The latter indicates a signal was\nreceived. Both MUST bail the entire process.\n\n\n\n\nThe \nstart\n property MUST be a JSON string formatted as per \nRFC 3339\n\nin UTC timezone.\n\n\nThe \nend\n property MUST be a JSON string formatted as per \nRFC 3339\n in\nUTC timezone.\n\n\nThe \nduration\n MUST be a JSON number of difference between the \nend\n datetime\nand the \nstart\n datetime.\n\n\nRecommended Properties\n\u00b6\n\n\nIn addition to those required properties, the journal SHOULD also declare the\nfollowings:\n\n\n\n\na \nsteady_states\n property\n\n\na \nrun\n property\n\n\na \nrollbacks\n property\n\n\n\n\nThe \nsteady_states\n property MUST be a JSON object defining the result of the\n\nsteady state hypothesis\n outcome.\n\n\nThe \nrun\n property MUST be a JSON array defining the result of each activity\nin the \nmethod\n element of the experiment.\n\n\nThe \nrollbacks\n property MUST be a JSON array defining the result of each\n\naction\n in the \nrollbacks\n element of the experiment.\n\n\nOptional Properties\n\u00b6\n\n\nIn addition to those required properties, the journal MAY also declare the\nfollowings:\n\n\n\n\na \nplatform\n property\n\n\na \nnode\n property\n\n\n\n\nThe \nplatform\n property MUST be a JSON string defining the machine on which\nthe experiment was executed. The content is free form but may be similar to the\noutput of the \nuname -a\n command.\n\n\nThe \nnode\n property MUST be a JSON string representing the name of the machine\nwhere the experiment was run. The content is free form.\n\n\nSteady State\n\u00b6\n\n\nThe \nsteady_states\n property holds the outcomes of the steady state hypothesis.\n\n\nThe \nsteady_states\n property MAY declare the following properties:\n\n\n\n\na \nbefore\n property\n\n\na \nafter\n property\n\n\n\n\nThe \nbefore\n property MUST be a JSON object describing the outcome of the\nhypothesis run before the \nmethod\n is executed.\n\n\nThe \nafter\n property MUST be a JSON object describing the outcome of the\nhypothesis run after the \nmethod\n is executed.\n\n\nNotice that either of those properties MAY be missing if they were not run.\n\n\nSteady State Outcomes\n\u00b6\n\n\nBoth the \nbefore\n and \nafter\n properties follow the same definition.\n\n\n\n\na \nsteady_state_met\n property\n\n\na \nprobes\n property\n\n\n\n\nThe \nsteady_state_met\n property MUST be a JSON boolean. It MUST be \ntrue\n if the\nsteady state hypothesis was met, \nfalse\n otherwise.\n\n\nA steady state is met when all its probes matched their tolerance.\nA steady state is not met at the first non-matching tolerance probe.\n\n\nThe \nprobes\n property MUST be a JSON array of \nprobes\n results.\n\n\nEach probe result MUST declare the following properties:\n\n\n\n\na \nactivity\n property\n\n\na \nstatus\n property\n\n\na \nstart\n property\n\n\na \nend\n property\n\n\na \nduration\n property\n\n\na \ntolerance_met\n property\n\n\na \noutput\n property\n\n\n\n\nThe \nactivity\n property MUST be a JSON object, a raw copy of the executed\n\nprobe\n.\n\n\nThe \nstatus\n property MUST be a JSON string, one of \n\"succeeded\"\n or \n\"failed\"\n.\n\n\nThe \nstart\n property MUST be a JSON string formatted as per \nRFC 3339\n\nin UTC timezone.\n\n\nThe \nend\n property MUST be a JSON string formatted as per \nRFC 3339\n in\nUTC timezone.\n\n\nThe \nduration\n MUST be a JSON number of difference between the \nend\n datetime\nand the \nstart\n datetime.\n\n\nThe \ntolerance_met\n MUST be a JSON boolean indicating if the probe matched its\ntolerance or not.\n\n\nThe \noutput\n MUST be a JSON string or \nnull\n.\n\n\nIn addition, the probe result MAY contain an additional property:\n\n\n\n\na \nexception\n property\n\n\n\n\nThis property is set when the probe failed in an unforeseeable way and MUST be\na JSON array or JSON string of the error trace. \n\n\nRun\n\u00b6\n\n\nThe \nrun\n property holds the outcomes of the \nmethod\n element.\n\n\nThe \nrun\n property MUST be a JSON array of activity results.\n\n\nEach activity result MUST declare the following properties:\n\n\n\n\na \nactivity\n property\n\n\na \nstatus\n property\n\n\na \nstart\n property\n\n\na \nend\n property\n\n\na \nduration\n property\n\n\na \noutput\n property\n\n\n\n\nThe \nactivity\n property MUST be a JSON object, a raw copy of the executed\n\nprobe\n or \naction\n.\n\n\nThe \nstatus\n property MUST be a JSON string, one of \n\"succeeded\"\n or \n\"failed\"\n.\n\n\nThe \nstart\n property MUST be a JSON string formatted as per \nRFC 3339\n\nin UTC timezone.\n\n\nThe \nend\n property MUST be a JSON string formatted as per \nRFC 3339\n in\nUTC timezone.\n\n\nThe \nduration\n MUST be a JSON number of difference between the \nend\n datetime\nand the \nstart\n datetime.\n\n\nThe \noutput\n MUST be a JSON string or \nnull\n.\n\n\nIn addition, the activity result MAY contain an additional property:\n\n\n\n\na \nexception\n property\n\n\n\n\nThis property is set when the activity failed in an unforeseeable way and MUST\nbe a JSON array or JSON string of the error trace.\n\n\nRollbacks\n\u00b6\n\n\nThe \nrollbacks\n property holds the outcomes of the \nrollbacks\n element.\n\n\nThe \nrollbacks\n property MUST be a JSON array of \naction\n results.\n\n\nEach action result MUST declare the following properties:\n\n\n\n\na \nactivity\n property\n\n\na \nstatus\n property\n\n\na \nstart\n property\n\n\na \nend\n property\n\n\na \nduration\n property\n\n\na \noutput\n property\n\n\n\n\nThe \nactivity\n property MUST be a JSON object, a raw copy of the executed\n\naction\n.\n\n\nThe \nstatus\n property MUST be a JSON string, one of \n\"succeeded\"\n or \n\"failed\"\n.\n\n\nThe \nstart\n property MUST be a JSON string formatted as per \nRFC 3339\n\nin UTC timezone.\n\n\nThe \nend\n property MUST be a JSON string formatted as per \nRFC 3339\n in\nUTC timezone.\n\n\nThe \nduration\n MUST be a JSON number of difference between the \nend\n datetime\nand the \nstart\n datetime.\n\n\nThe \noutput\n MUST be a JSON string or \nnull\n.\n\n\nIn addition, the activity result MAY contain an additional property:\n\n\n\n\na \nexception\n property\n\n\n\n\nThis property is set when the action failed in an unforeseeable way and MUST be\na JSON array or JSON string of the error trace. \n\n\nRollbacks MUST NOT to be applied when the experiment status is \n\"interrupted\"\n.",
            "title": "Journal"
        },
        {
            "location": "/reference/api/journal/#experiment-journal",
            "text": "",
            "title": "Experiment Journal"
        },
        {
            "location": "/reference/api/journal/#introduction",
            "text": "This document describes the syntax and grammar of a Chaos Engineering\nexperiment\u2019s output, called a journal. One should be able to walkthrough the\nexperiment\u2019s run through its journal alone.  This specification makes sense in regards to the Experiment specification  itself. It is indeed a mirror to that\ndocument.",
            "title": "Introduction"
        },
        {
            "location": "/reference/api/journal/#conventions-used-in-this-document",
            "text": "The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in  RFC 2119 .  The terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in  RFC 7159 .",
            "title": "Conventions Used in This Document"
        },
        {
            "location": "/reference/api/journal/#other-formats",
            "text": "While this specification uses JSON to define its elements, implementations may\nallow loading from other formats, such as  YAML . As long as the output\nof such format respects the specification herein.",
            "title": "Other formats"
        },
        {
            "location": "/reference/api/journal/#journal-elements",
            "text": "",
            "title": "Journal Elements"
        },
        {
            "location": "/reference/api/journal/#overview",
            "text": "A Journal is one potential output of a Chaos Engineering experiment . The objective of such journal is\nto collect all events that took place during the experiment\u2019s run.  The journal contains static information, such as the experiment that was run,\nas well as runtime entries.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/journal/#format",
            "text": "A journal is a JSON object.",
            "title": "Format"
        },
        {
            "location": "/reference/api/journal/#required-properties",
            "text": "A journal MUST declare:   a  experiment  property  a  status  property  a  start  property  a  end  property  a  duration  property   The  experiment  property MUST be a copy of the run experiment as-is and is\ntherefore a JSON object. It MUST follow the  Experiment \ndefinition.  The \u0300 status  property MUST be a JSON string, one of:   \"completed\" : when the experiment runs fully. It does not indicate the\n  activities in the experiment suceeded, only that they were executed as\n  expected  \"failed\" : when one of the activity reports a failed condition  \"aborted\" : when the experiment breaks for unforeseen reason  \"interrupted\" : when the experiment is interrupted (for instance after a\n  signal is received)    Note  It is important to understand the  \"completed\"  status expresses that\neverything ran all the way. An action may not have resulted in what the\noperator wanted but it did not fail. Always review the entire journal to\nfully appreciate the actual outcome of the experiment.  There are two reasons it could be marked as  \"failed\" . Either a tolerance\nfailed or if an extension made a check for a condition. So, for\ninstance, let\u2019s say the extension made a HTTP call to your service, that\ncall returned a 400 rather than 200. If the extension was not designed to\ncare for this difference, then the status will be marked as  \"completed\" .\nHowever, if the extension validated the HTTP response, it may have decided\nto fail the action which would lead to a \u0300 \u201cfailed\u201d` status.  The  \"aborted\"  and  \"interrupted\"  are different, the former means of a\ncrash somehow (say, because of a bug). The latter indicates a signal was\nreceived. Both MUST bail the entire process.   The  start  property MUST be a JSON string formatted as per  RFC 3339 \nin UTC timezone.  The  end  property MUST be a JSON string formatted as per  RFC 3339  in\nUTC timezone.  The  duration  MUST be a JSON number of difference between the  end  datetime\nand the  start  datetime.",
            "title": "Required Properties"
        },
        {
            "location": "/reference/api/journal/#recommended-properties",
            "text": "In addition to those required properties, the journal SHOULD also declare the\nfollowings:   a  steady_states  property  a  run  property  a  rollbacks  property   The  steady_states  property MUST be a JSON object defining the result of the steady state hypothesis  outcome.  The  run  property MUST be a JSON array defining the result of each activity\nin the  method  element of the experiment.  The  rollbacks  property MUST be a JSON array defining the result of each action  in the  rollbacks  element of the experiment.",
            "title": "Recommended Properties"
        },
        {
            "location": "/reference/api/journal/#optional-properties",
            "text": "In addition to those required properties, the journal MAY also declare the\nfollowings:   a  platform  property  a  node  property   The  platform  property MUST be a JSON string defining the machine on which\nthe experiment was executed. The content is free form but may be similar to the\noutput of the  uname -a  command.  The  node  property MUST be a JSON string representing the name of the machine\nwhere the experiment was run. The content is free form.",
            "title": "Optional Properties"
        },
        {
            "location": "/reference/api/journal/#steady-state",
            "text": "The  steady_states  property holds the outcomes of the steady state hypothesis.  The  steady_states  property MAY declare the following properties:   a  before  property  a  after  property   The  before  property MUST be a JSON object describing the outcome of the\nhypothesis run before the  method  is executed.  The  after  property MUST be a JSON object describing the outcome of the\nhypothesis run after the  method  is executed.  Notice that either of those properties MAY be missing if they were not run.",
            "title": "Steady State"
        },
        {
            "location": "/reference/api/journal/#steady-state-outcomes",
            "text": "Both the  before  and  after  properties follow the same definition.   a  steady_state_met  property  a  probes  property   The  steady_state_met  property MUST be a JSON boolean. It MUST be  true  if the\nsteady state hypothesis was met,  false  otherwise.  A steady state is met when all its probes matched their tolerance.\nA steady state is not met at the first non-matching tolerance probe.  The  probes  property MUST be a JSON array of  probes  results.  Each probe result MUST declare the following properties:   a  activity  property  a  status  property  a  start  property  a  end  property  a  duration  property  a  tolerance_met  property  a  output  property   The  activity  property MUST be a JSON object, a raw copy of the executed probe .  The  status  property MUST be a JSON string, one of  \"succeeded\"  or  \"failed\" .  The  start  property MUST be a JSON string formatted as per  RFC 3339 \nin UTC timezone.  The  end  property MUST be a JSON string formatted as per  RFC 3339  in\nUTC timezone.  The  duration  MUST be a JSON number of difference between the  end  datetime\nand the  start  datetime.  The  tolerance_met  MUST be a JSON boolean indicating if the probe matched its\ntolerance or not.  The  output  MUST be a JSON string or  null .  In addition, the probe result MAY contain an additional property:   a  exception  property   This property is set when the probe failed in an unforeseeable way and MUST be\na JSON array or JSON string of the error trace.",
            "title": "Steady State Outcomes"
        },
        {
            "location": "/reference/api/journal/#run",
            "text": "The  run  property holds the outcomes of the  method  element.  The  run  property MUST be a JSON array of activity results.  Each activity result MUST declare the following properties:   a  activity  property  a  status  property  a  start  property  a  end  property  a  duration  property  a  output  property   The  activity  property MUST be a JSON object, a raw copy of the executed probe  or  action .  The  status  property MUST be a JSON string, one of  \"succeeded\"  or  \"failed\" .  The  start  property MUST be a JSON string formatted as per  RFC 3339 \nin UTC timezone.  The  end  property MUST be a JSON string formatted as per  RFC 3339  in\nUTC timezone.  The  duration  MUST be a JSON number of difference between the  end  datetime\nand the  start  datetime.  The  output  MUST be a JSON string or  null .  In addition, the activity result MAY contain an additional property:   a  exception  property   This property is set when the activity failed in an unforeseeable way and MUST\nbe a JSON array or JSON string of the error trace.",
            "title": "Run"
        },
        {
            "location": "/reference/api/journal/#rollbacks",
            "text": "The  rollbacks  property holds the outcomes of the  rollbacks  element.  The  rollbacks  property MUST be a JSON array of  action  results.  Each action result MUST declare the following properties:   a  activity  property  a  status  property  a  start  property  a  end  property  a  duration  property  a  output  property   The  activity  property MUST be a JSON object, a raw copy of the executed action .  The  status  property MUST be a JSON string, one of  \"succeeded\"  or  \"failed\" .  The  start  property MUST be a JSON string formatted as per  RFC 3339 \nin UTC timezone.  The  end  property MUST be a JSON string formatted as per  RFC 3339  in\nUTC timezone.  The  duration  MUST be a JSON number of difference between the  end  datetime\nand the  start  datetime.  The  output  MUST be a JSON string or  null .  In addition, the activity result MAY contain an additional property:   a  exception  property   This property is set when the action failed in an unforeseeable way and MUST be\na JSON array or JSON string of the error trace.   Rollbacks MUST NOT to be applied when the experiment status is  \"interrupted\" .",
            "title": "Rollbacks"
        },
        {
            "location": "/reference/contributing/",
            "text": "The Chaos Toolkit is a free and open source tool \nand\n a \ncommunity-driven \nset of projects\n. The \ncommunity\u2019s input is what makes this project special and a success. \n\n\nYour input could take the form of \nraising issues\n, \nvoting for issues\n, \n\nstarring projects\n, \njoining us on our \ncommunity Slack team\n, \nsubmitting pull requests\n, or even \nsuggesting whole new extension projects\n. \n\n\nWhatever you can contribute, \nwe\u2019re listening and want you to help us drive the \nproject forward\n.\n\n\nThe Chaos Toolkit Incubator\n\u00b6\n\n\nNew potential projects should be first incubated in the \n\nChaos Toolkit Incubator\n until they \nare ready to be moved into the main \n\nChaos Toolkit suite of projects\n. \nConditions for graduating a project from the Incubator to the main suite of \nprojects include:\n\n\n\n\nCorrect Licensing and Certification of Origin.\n\n\nA popular starred and used extension to the Chaos Toolkit.\n\n\nActive and prompt project issue resolution.\n\n\n\n\nLicensing and Certification of Origin\n\u00b6\n\n\nEvery project in the Chaos Toolkit and the Chaos Toolkit Incubator is licensed \nunder the \nApache License, Version 2.0\n and abides by the \nDeveloper Certificate of Origin\n on all accepted commits to the \nmaster\n branch.",
            "title": "Contributing to the Chaos Toolkit"
        },
        {
            "location": "/reference/contributing/#the-chaos-toolkit-incubator",
            "text": "New potential projects should be first incubated in the  Chaos Toolkit Incubator  until they \nare ready to be moved into the main  Chaos Toolkit suite of projects . \nConditions for graduating a project from the Incubator to the main suite of \nprojects include:   Correct Licensing and Certification of Origin.  A popular starred and used extension to the Chaos Toolkit.  Active and prompt project issue resolution.",
            "title": "The Chaos Toolkit Incubator"
        },
        {
            "location": "/reference/contributing/#licensing-and-certification-of-origin",
            "text": "Every project in the Chaos Toolkit and the Chaos Toolkit Incubator is licensed \nunder the  Apache License, Version 2.0  and abides by the  Developer Certificate of Origin  on all accepted commits to the  master  branch.",
            "title": "Licensing and Certification of Origin"
        },
        {
            "location": "/reference/developing/values/",
            "text": "Key Project Values\n\u00b6\n\n\nThe following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.\n\n\nSimplicity\n\u00b6\n\n\nThe Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.\n\n\nTo achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.\n\n\nExtensibility\n\u00b6\n\n\nThe Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.\n\n\nBy using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.\n\n\nReadability\n\u00b6\n\n\nWe believe code readbility is a factor for positive maintenance and evolutivity.\n\n\nReadable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in \nPEP8\n.\n\n\nDiversity\n\u00b6\n\n\nAlthough not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Key Project Values"
        },
        {
            "location": "/reference/developing/values/#key-project-values",
            "text": "The following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.",
            "title": "Key Project Values"
        },
        {
            "location": "/reference/developing/values/#simplicity",
            "text": "The Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.  To achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.",
            "title": "Simplicity"
        },
        {
            "location": "/reference/developing/values/#extensibility",
            "text": "The Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.  By using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.",
            "title": "Extensibility"
        },
        {
            "location": "/reference/developing/values/#readability",
            "text": "We believe code readbility is a factor for positive maintenance and evolutivity.  Readable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in  PEP8 .",
            "title": "Readability"
        },
        {
            "location": "/reference/developing/values/#diversity",
            "text": "Although not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Diversity"
        },
        {
            "location": "/reference/developing/core/",
            "text": "Core Projects\n\u00b6\n\n\nThe Chaos Toolkit is made of several projects that work together to provide its\nservice.\n\n\nchaostoolkit\n\u00b6\n\n\nThe \nchaostoolkit\n project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.\n\n\nThat project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-lib\n\u00b6\n\n\nThe \nchaostoolkit-lib\n project is the core library which implements\nthe \ncore concepts\n of the Chaos Toolkit.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-documentation\n\u00b6\n\n\nThe \nchaostoolkit-documehtation\n is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.\n\n\nThis project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "Core Projects"
        },
        {
            "location": "/reference/developing/core/#core-projects",
            "text": "The Chaos Toolkit is made of several projects that work together to provide its\nservice.",
            "title": "Core Projects"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit",
            "text": "The  chaostoolkit  project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.  That project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.  This project is implemented in Python 3.",
            "title": "chaostoolkit"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit-lib",
            "text": "The  chaostoolkit-lib  project is the core library which implements\nthe  core concepts  of the Chaos Toolkit.  This project is implemented in Python 3.",
            "title": "chaostoolkit-lib"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit-documentation",
            "text": "The  chaostoolkit-documehtation  is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.  This project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "chaostoolkit-documentation"
        },
        {
            "location": "/reference/developing/technologies/",
            "text": "Technology Choices\n\u00b6\n\n\nPython 3\n\u00b6\n\n\nThe Chaos Toolkit is implemented in \nPython 3\n. A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.\n\n\nThe language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.\n\n\nThe choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.\n\n\nAlthough Python natively does not generate (though \nit can be done\n)\nstandalone binaries like \ngolang\n would. We do not believe this will harm\nthe project and hope that package managers will eventually provide native\ninstallers.\n\n\nFunctional\n\u00b6\n\n\nWell, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.\n\n\nMutable data structures are used but mostly created and returned from functions\nrather than modified.\n\n\nGenerally speaking, the project draws inspirations from certain ideas of \n\nfunctional paradigms\n but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.",
            "title": "Technology Choices"
        },
        {
            "location": "/reference/developing/technologies/#technology-choices",
            "text": "",
            "title": "Technology Choices"
        },
        {
            "location": "/reference/developing/technologies/#python-3",
            "text": "The Chaos Toolkit is implemented in  Python 3 . A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.  The language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.  The choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.  Although Python natively does not generate (though  it can be done )\nstandalone binaries like  golang  would. We do not believe this will harm\nthe project and hope that package managers will eventually provide native\ninstallers.",
            "title": "Python 3"
        },
        {
            "location": "/reference/developing/technologies/#functional",
            "text": "Well, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.  Mutable data structures are used but mostly created and returned from functions\nrather than modified.  Generally speaking, the project draws inspirations from certain ideas of  functional paradigms  but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.",
            "title": "Functional"
        },
        {
            "location": "/reference/developing/guidelines/",
            "text": "Developer Guidelines\n\u00b6\n\n\nContributors to the Chaos Toolkit are always welcome. This guide describes the\ngeneral elements you probably need to know to get started. Once past those\nelements, you should dive into the code of each project and come discuss\non our \nSlack\n.\n\n\nOverview\n\u00b6\n\n\nProgramming Environment\n\u00b6\n\n\nThe programming environment really is up to you. However, since the Chaos\nToolkit is implemented in Python so make sure to have the right tooling for it.\n\n\nThe most basics are:\n\n\n\n\nPython 3.5+ installed. Right now, we officially support 3.5 and 3.6 but there\n  should not be harm in using 3.7 as long as it can gracefully degrade down to\n  3.5\n\n\nA virtual environment so you can deploy the dependencies in a specific\n  environment\n\n\n\n\nIf you\u2019re not familiar with Python, you will find a few helpful books online,\nsuch \nThe Hitchhiker\u2019s Guide to Python\n.\n\n\nThe Ultimate Trick\n\u00b6\n\n\nWhenever you code on one of the projects, you should run the following command\nso that the project you are hacking on is part of your virtual environment\nwithout being installed:\n\n\n(chaostk) $\n \ncd\n <project-name>\n\n(chaostk) $\n python setup.py develop\n\n\n\n\nSometimes, your virtual env may be borked and not point to your development\ndirectory. In that case, make sure to remove any previously installed version\nof the project:\n\n\n(chaostk) $\n pip uninstall <project-name>\n\n\n\n\nThen make sure your virtual environment point at your local directory with:\n\n\n(chaostk) $\n pip freeze\n\n\n\n\nGitHub\n\u00b6\n\n\nThe Chaos Toolkit projects are hosted on \nGitHub\n. If you wish to\n\ncontribute\n, you will need to have an account there.\n\n\nThe general workflow is to fork the project you wish to contribute to, make your\nchanges in a dedicated branch, rebase against the original master and finally\nsubmit a pull-request to the project with a clear description of the what and\nwhy.\n\n\nChaos Toolkit Projects At A Glance\n\u00b6\n\n\nThe Chaos Toolkit is made of several projects. The core ones are:\n\n\n\n\nchaostoolkit\n: the CLI\n\n\nchaostoolkit-lib\n: the core\n  library that propels the CLI\n\n\n\n\nBasically, those projects represent the Chaos Toolkit itself. However, the\ntoolkit is naked without extensions. The currently core extensions are:\n\n\n\n\nchaostoolkit-kubernetes\n\n\n\n\nIn addition, there are a\n\nbunch of incubating projects\n.\n\n\nCreating an Extension\n\u00b6\n\n\nPlease review the various \napproaches\n to extend\nthe toolkit.\n\n\nCreating a Notification Plugin\n\u00b6\n\n\nThe Chaos Toolkit triggers events while it runs. Those events may be forwarded\nto any endpoint that you care for through HTTP or, when you need more control,\na full Python project.\n\n\nThere is no template for such a project yet but it is very close to an\nextension project except it doesn\u2019t have probes and actions. You can therefore\nstart by cloning the \nextension template project\n and start from there.\n\n\nInstead, it should define a function in a module. That function takes two\nparameters:\n\n\n\n\nthe notification channel settings (coming from the\n  \nChaos Toolkit settings file\n) as a dictionary\n\n\nthe event payload as a Python dictionary which is documented\n  \nhere\n\n\n\n\nThe event has a \npayload\n key which is the content associated to the event. It\ncan be one of:\n\n\n\n\nNone\n when there was no payload ()\n\n\na string\n\n\nan \nexperiment\n dictionary\n\n\nan \njournal\n dictionary\n\n\n\n\nThree kind of events can be triggered: \nstarted\n, \ncompleted\n and \nfailed\n for\neach phase of the flow. Those events are defined\n\nhere\n.\n\n\nA typical notification callback function will look like this:\n\n\nfrom\n \ntyping\n \nimport\n \nAny\n,\n \nDict\n\n\n\nfrom\n \nchaoslib.notification\n \nimport\n \nRunFlowEvent\n\n\nfrom\n \nchaoslib.types\n \nimport\n \nEventPayload\n\n\nimport\n \nlogzero\n\n\n\ndef\n \nnotify\n(\nsettings\n:\n \nDict\n[\nstr\n,\n \nAny\n],\n \nevent\n:\n \nEventPayload\n):\n\n    \nif\n \nevent\n[\n\"name\"\n]\n \n==\n \nRunFlowEvent\n.\nRunStarted\n.\nvalue\n:\n\n        \nlogzero\n.\ninfo\n(\n\"Event phase \"\n \n+\n \nevent\n[\n\"phase\"\n])\n\n        \nlogzero\n.\ninfo\n(\n\"Event timestamp \"\n \n+\n \nevent\n[\n\"ts\"\n])\n\n        \nlogzero\n.\ninfo\n(\n\"Event payload \"\n \n+\n \nevent\n[\n\"payload\"\n])\n\n        \nlogzero\n.\ninfo\n(\n\"Event error \"\n \n+\n \nevent\n.\nget\n(\n\"error\"\n,\n \n\"N/A\"\n))\n\n\n\n\n\nlogzero\n is a third-party package that the Chaos Toolkit uses to log when\nit runs.",
            "title": "Guidelines"
        },
        {
            "location": "/reference/developing/guidelines/#developer-guidelines",
            "text": "Contributors to the Chaos Toolkit are always welcome. This guide describes the\ngeneral elements you probably need to know to get started. Once past those\nelements, you should dive into the code of each project and come discuss\non our  Slack .",
            "title": "Developer Guidelines"
        },
        {
            "location": "/reference/developing/guidelines/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/reference/developing/guidelines/#programming-environment",
            "text": "The programming environment really is up to you. However, since the Chaos\nToolkit is implemented in Python so make sure to have the right tooling for it.  The most basics are:   Python 3.5+ installed. Right now, we officially support 3.5 and 3.6 but there\n  should not be harm in using 3.7 as long as it can gracefully degrade down to\n  3.5  A virtual environment so you can deploy the dependencies in a specific\n  environment   If you\u2019re not familiar with Python, you will find a few helpful books online,\nsuch  The Hitchhiker\u2019s Guide to Python .",
            "title": "Programming Environment"
        },
        {
            "location": "/reference/developing/guidelines/#the-ultimate-trick",
            "text": "Whenever you code on one of the projects, you should run the following command\nso that the project you are hacking on is part of your virtual environment\nwithout being installed:  (chaostk) $   cd  <project-name> (chaostk) $  python setup.py develop  Sometimes, your virtual env may be borked and not point to your development\ndirectory. In that case, make sure to remove any previously installed version\nof the project:  (chaostk) $  pip uninstall <project-name>  Then make sure your virtual environment point at your local directory with:  (chaostk) $  pip freeze",
            "title": "The Ultimate Trick"
        },
        {
            "location": "/reference/developing/guidelines/#github",
            "text": "The Chaos Toolkit projects are hosted on  GitHub . If you wish to contribute , you will need to have an account there.  The general workflow is to fork the project you wish to contribute to, make your\nchanges in a dedicated branch, rebase against the original master and finally\nsubmit a pull-request to the project with a clear description of the what and\nwhy.",
            "title": "GitHub"
        },
        {
            "location": "/reference/developing/guidelines/#chaos-toolkit-projects-at-a-glance",
            "text": "The Chaos Toolkit is made of several projects. The core ones are:   chaostoolkit : the CLI  chaostoolkit-lib : the core\n  library that propels the CLI   Basically, those projects represent the Chaos Toolkit itself. However, the\ntoolkit is naked without extensions. The currently core extensions are:   chaostoolkit-kubernetes   In addition, there are a bunch of incubating projects .",
            "title": "Chaos Toolkit Projects At A Glance"
        },
        {
            "location": "/reference/developing/guidelines/#creating-an-extension",
            "text": "Please review the various  approaches  to extend\nthe toolkit.",
            "title": "Creating an Extension"
        },
        {
            "location": "/reference/developing/guidelines/#creating-a-notification-plugin",
            "text": "The Chaos Toolkit triggers events while it runs. Those events may be forwarded\nto any endpoint that you care for through HTTP or, when you need more control,\na full Python project.  There is no template for such a project yet but it is very close to an\nextension project except it doesn\u2019t have probes and actions. You can therefore\nstart by cloning the  extension template project  and start from there.  Instead, it should define a function in a module. That function takes two\nparameters:   the notification channel settings (coming from the\n   Chaos Toolkit settings file ) as a dictionary  the event payload as a Python dictionary which is documented\n   here   The event has a  payload  key which is the content associated to the event. It\ncan be one of:   None  when there was no payload ()  a string  an  experiment  dictionary  an  journal  dictionary   Three kind of events can be triggered:  started ,  completed  and  failed  for\neach phase of the flow. Those events are defined here .  A typical notification callback function will look like this:  from   typing   import   Any ,   Dict  from   chaoslib.notification   import   RunFlowEvent  from   chaoslib.types   import   EventPayload  import   logzero  def   notify ( settings :   Dict [ str ,   Any ],   event :   EventPayload ): \n     if   event [ \"name\" ]   ==   RunFlowEvent . RunStarted . value : \n         logzero . info ( \"Event phase \"   +   event [ \"phase\" ]) \n         logzero . info ( \"Event timestamp \"   +   event [ \"ts\" ]) \n         logzero . info ( \"Event payload \"   +   event [ \"payload\" ]) \n         logzero . info ( \"Event error \"   +   event . get ( \"error\" ,   \"N/A\" ))   logzero  is a third-party package that the Chaos Toolkit uses to log when\nit runs.",
            "title": "Creating a Notification Plugin"
        },
        {
            "location": "/reference/extending/approaches/",
            "text": "Extending the Chaos Toolkit\n\u00b6\n\n\nThe Chaos Toolkit is designed to be extended with new probes and actions so that\nyou can work with any failure injection and system observability systems that you choose. The toolkit has a growing number of open source extensions for just this purpose, but the intention is that you may also want to extend the Chaos Toolkit for your own unique, possible closed, systems as well.\n\n\nThe ChaosToolkit currently \nsupports\n three extension approaches:\n\n\n\n\nPython function\n: see \nthis page\n for more information on creating Python extensions\n\n\nProcess\n\n\nHTTP\n\n\n\n\nYou can extend your actions and probes by implementing them using one of these\napproaches.\n\n\n\n\nTip\n\n\nThe Chaos Toolkit maintains a set of \nopen-source extensions\n ready to\nbe integrated into your Chaos experiments.",
            "title": "Extension Approaches"
        },
        {
            "location": "/reference/extending/approaches/#extending-the-chaos-toolkit",
            "text": "The Chaos Toolkit is designed to be extended with new probes and actions so that\nyou can work with any failure injection and system observability systems that you choose. The toolkit has a growing number of open source extensions for just this purpose, but the intention is that you may also want to extend the Chaos Toolkit for your own unique, possible closed, systems as well.  The ChaosToolkit currently  supports  three extension approaches:   Python function : see  this page  for more information on creating Python extensions  Process  HTTP   You can extend your actions and probes by implementing them using one of these\napproaches.   Tip  The Chaos Toolkit maintains a set of  open-source extensions  ready to\nbe integrated into your Chaos experiments.",
            "title": "Extending the Chaos Toolkit"
        },
        {
            "location": "/reference/extending/extending-with-python/",
            "text": "Extending Chaos Toolkit with Python\n\u00b6\n\n\nCreate your new Chaos Toolkit extension project\n\u00b6\n\n\nAll Chaos Toolkit extensions follow the same structure and you can benefit from\na project generator such as \ncookiecutter\n. This will drive you through a set\nof basic questions for metadata and will create a local project you can then\nstart put your code into.\n\n\nLet\u2019s use the \ncommunity-driven template project\n:\n\n\n$\n pip install - U cookiecutter\n\n$\n cookiecutter https://github.com/dastergon/cookiecutter-chaostoolkit.git\n\n\n\n\nWhere to put your code\n\u00b6\n\n\nThere are two extension points for a Chaos Toolkit Python extension, and they\nare captured in two files: \nactions.py\n and \nprobes.py\n.\n\n\nIt is conventional to use the \nactions.py\n module as the place where you expose\nthe actions that you would like to conduct as part of your Chaos Toolkit\nexperimental method against the environment you want to inject failure into.\n\n\nIt\u2019s also conventional to use the \nprobes.py\n module as the place where you can\nintegrate with your system\u2019s existing\n\nobservability\n\nso that those values can be used either for an experiment\u2019s\n\nSteady State Hypothesis\n, or as\n\nsimple additional data-gathering probes\n that can be declared\nthroughout an experiment\u2019s method.\n\n\nRunning \nDiscover\n on a New Extension\n\u00b6\n\n\nChaos Toolkit extensions often implement functionality that assists in \ndiscovering what a system, and the extension against that system, supports. This\nis executed using the \nchaos discover\n command.\n\n\nWhen writing your own implementation of discovery you will often want to test \nthe new functionality locally. To do this you should first execute from your \nextension workspace:\n\n\n$ python setup.py develop\n\n\nThen you can exercise your discovery functionality using the \n--no-install\n flag\n on the \nchaos discover\n command, for example:\n\n\nchaos discover --no-install ext-name\n\n\nLog From Your Extension\n\u00b6\n\n\nYou can write to the Chaos Toolkit log by using the \nlogzero\n package.\n\n\nfrom\n \nlogzero\n \nimport\n \nlogger\n\n\n\nlogger\n.\ninfo\n(\n\"Hello!\"\n)\n\n\n\n\n\nMake sure to add \nlogzero\n as an entry of the \nrequirements.txt\n file of your\nextension.",
            "title": "Python"
        },
        {
            "location": "/reference/extending/extending-with-python/#extending-chaos-toolkit-with-python",
            "text": "",
            "title": "Extending Chaos Toolkit with Python"
        },
        {
            "location": "/reference/extending/extending-with-python/#create-your-new-chaos-toolkit-extension-project",
            "text": "All Chaos Toolkit extensions follow the same structure and you can benefit from\na project generator such as  cookiecutter . This will drive you through a set\nof basic questions for metadata and will create a local project you can then\nstart put your code into.  Let\u2019s use the  community-driven template project :  $  pip install - U cookiecutter $  cookiecutter https://github.com/dastergon/cookiecutter-chaostoolkit.git",
            "title": "Create your new Chaos Toolkit extension project"
        },
        {
            "location": "/reference/extending/extending-with-python/#where-to-put-your-code",
            "text": "There are two extension points for a Chaos Toolkit Python extension, and they\nare captured in two files:  actions.py  and  probes.py .  It is conventional to use the  actions.py  module as the place where you expose\nthe actions that you would like to conduct as part of your Chaos Toolkit\nexperimental method against the environment you want to inject failure into.  It\u2019s also conventional to use the  probes.py  module as the place where you can\nintegrate with your system\u2019s existing observability \nso that those values can be used either for an experiment\u2019s Steady State Hypothesis , or as simple additional data-gathering probes  that can be declared\nthroughout an experiment\u2019s method.",
            "title": "Where to put your code"
        },
        {
            "location": "/reference/extending/extending-with-python/#running-discover-on-a-new-extension",
            "text": "Chaos Toolkit extensions often implement functionality that assists in \ndiscovering what a system, and the extension against that system, supports. This\nis executed using the  chaos discover  command.  When writing your own implementation of discovery you will often want to test \nthe new functionality locally. To do this you should first execute from your \nextension workspace:  $ python setup.py develop  Then you can exercise your discovery functionality using the  --no-install  flag\n on the  chaos discover  command, for example:  chaos discover --no-install ext-name",
            "title": "Running Discover on a New Extension"
        },
        {
            "location": "/reference/extending/extending-with-python/#log-from-your-extension",
            "text": "You can write to the Chaos Toolkit log by using the  logzero  package.  from   logzero   import   logger  logger . info ( \"Hello!\" )   Make sure to add  logzero  as an entry of the  requirements.txt  file of your\nextension.",
            "title": "Log From Your Extension"
        }
    ]
}